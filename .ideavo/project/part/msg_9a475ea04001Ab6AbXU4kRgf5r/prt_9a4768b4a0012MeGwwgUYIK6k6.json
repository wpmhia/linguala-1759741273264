{
  "id": "prt_9a4768b4a0012MeGwwgUYIK6k6",
  "messageID": "msg_9a475ea04001Ab6AbXU4kRgf5r",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01JSqTCgJyfQdDybbewD34dX",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/translator.tsx",
      "content": "\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Copy, ArrowUpDown, Volume2, RotateCcw } from \"lucide-react\"\nimport { toast } from \"sonner\"\n\nconst LANGUAGES = [\n  { code: \"auto\", name: \"Detect language\" },\n  { code: \"en\", name: \"English\" },\n  { code: \"zh\", name: \"Chinese\" },\n  { code: \"ja\", name: \"Japanese\" },\n  { code: \"ko\", name: \"Korean\" },\n  { code: \"es\", name: \"Spanish\" },\n  { code: \"fr\", name: \"French\" },\n  { code: \"de\", name: \"German\" },\n  { code: \"it\", name: \"Italian\" },\n  { code: \"pt\", name: \"Portuguese\" },\n  { code: \"ru\", name: \"Russian\" },\n  { code: \"ar\", name: \"Arabic\" },\n]\n\ninterface TranslationHistory {\n  id: string\n  sourceText: string\n  translatedText: string\n  sourceLang: string\n  targetLang: string\n  timestamp: number\n}\n\nexport default function Translator() {\n  const [sourceText, setSourceText] = useState(\"\")\n  const [translatedText, setTranslatedText] = useState(\"\")\n  const [sourceLang, setSourceLang] = useState(\"auto\")\n  const [targetLang, setTargetLang] = useState(\"en\")\n  const [isTranslating, setIsTranslating] = useState(false)\n  const [history, setHistory] = useState<TranslationHistory[]>([])\n  const debounceRef = useRef<NodeJS.Timeout>()\n\n  // Load history from localStorage on mount\n  useEffect(() => {\n    const savedHistory = localStorage.getItem(\"translation-history\")\n    if (savedHistory) {\n      setHistory(JSON.parse(savedHistory))\n    }\n  }, [])\n\n  // Save history to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem(\"translation-history\", JSON.stringify(history))\n  }, [history])\n\n  const translateText = async (text: string, from: string, to: string) => {\n    if (!text.trim()) {\n      setTranslatedText(\"\")\n      return\n    }\n\n    setIsTranslating(true)\n    try {\n      const response = await fetch(\"/api/translate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          text: text.trim(),\n          sourceLang: from,\n          targetLang: to,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(\"Translation failed\")\n      }\n\n      const data = await response.json()\n      setTranslatedText(data.translatedText)\n\n      // Add to history\n      const historyItem: TranslationHistory = {\n        id: Date.now().toString(),\n        sourceText: text.trim(),\n        translatedText: data.translatedText,\n        sourceLang: from,\n        targetLang: to,\n        timestamp: Date.now(),\n      }\n      setHistory(prev => [historyItem, ...prev.slice(0, 9)]) // Keep only last 10\n\n    } catch (error) {\n      console.error(\"Translation error:\", error)\n      toast.error(\"Translation failed. Please try again.\")\n    } finally {\n      setIsTranslating(false)\n    }\n  }\n\n  const handleSourceTextChange = (text: string) => {\n    setSourceText(text)\n    \n    // Debounce translation\n    if (debounceRef.current) {\n      clearTimeout(debounceRef.current)\n    }\n    \n    debounceRef.current = setTimeout(() => {\n      translateText(text, sourceLang, targetLang)\n    }, 500)\n  }\n\n  const handleLanguageChange = () => {\n    if (sourceText.trim()) {\n      translateText(sourceText, sourceLang, targetLang)\n    }\n  }\n\n  const swapLanguages = () => {\n    if (sourceLang === \"auto\") return\n    \n    setSourceLang(targetLang)\n    setTargetLang(sourceLang)\n    setSourceText(translatedText)\n    setTranslatedText(sourceText)\n  }\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      toast.success(\"Copied to clipboard!\")\n    } catch (error) {\n      toast.error(\"Failed to copy text\")\n    }\n  }\n\n  const clearText = () => {\n    setSourceText(\"\")\n    setTranslatedText(\"\")\n  }\n\n  const getLanguageName = (code: string) => {\n    return LANGUAGES.find(lang => lang.code === code)?.name || code\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-4xl font-bold text-gray-900\">DeepL Clone</h1>\n        <p className=\"text-gray-600\">Powered by Alibaba Cloud Qwen</p>\n      </div>\n\n      <Card className=\"shadow-lg\">\n        <CardContent className=\"p-6\">\n          {/* Language Selection */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Select value={sourceLang} onValueChange={(value) => {\n                setSourceLang(value)\n                handleLanguageChange()\n              }}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {LANGUAGES.map((lang) => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      {lang.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={swapLanguages}\n                disabled={sourceLang === \"auto\"}\n                className=\"p-2\"\n              >\n                <ArrowUpDown className=\"h-4 w-4\" />\n              </Button>\n\n              <Select value={targetLang} onValueChange={(value) => {\n                setTargetLang(value)\n                handleLanguageChange()\n              }}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {LANGUAGES.filter(lang => lang.code !== \"auto\").map((lang) => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      {lang.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button variant=\"ghost\" size=\"sm\" onClick={clearText}>\n              <RotateCcw className=\"h-4 w-4 mr-2\" />\n              Clear\n            </Button>\n          </div>\n\n          {/* Translation Interface */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n            {/* Source Text */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium text-gray-700\">\n                  {getLanguageName(sourceLang)}\n                </label>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(sourceText)}\n                  disabled={!sourceText}\n                >\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <Textarea\n                placeholder=\"Enter text to translate...\"\n                value={sourceText}\n                onChange={(e) => handleSourceTextChange(e.target.value)}\n                className=\"min-h-[200px] resize-none border-gray-300 focus:border-blue-500\"\n              />\n            </div>\n\n            {/* Translated Text */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium text-gray-700\">\n                  {getLanguageName(targetLang)}\n                </label>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(translatedText)}\n                  disabled={!translatedText}\n                >\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <Textarea\n                placeholder={isTranslating ? \"Translating...\" : \"Translation will appear here...\"}\n                value={translatedText}\n                readOnly\n                className=\"min-h-[200px] resize-none border-gray-300 bg-gray-50\"\n              />\n            </div>\n          </div>\n\n          {/* Translation Status */}\n          {isTranslating && (\n            <div className=\"flex items-center justify-center mt-4 text-blue-600\">\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\n              Translating...\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Translation History */}\n      {history.length > 0 && (\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Recent Translations</h2>\n            <div className=\"space-y-3\">\n              {history.slice(0, 5).map((item) => (\n                <div\n                  key={item.id}\n                  className=\"p-3 border rounded-lg hover:bg-gray-50 cursor-pointer\"\n                  onClick={() => {\n                    setSourceText(item.sourceText)\n                    setTranslatedText(item.translatedText)\n                    setSourceLang(item.sourceLang)\n                    setTargetLang(item.targetLang)\n                  }}\n                >\n                  <div className=\"flex items-center justify-between text-sm text-gray-600 mb-1\">\n                    <span>{getLanguageName(item.sourceLang)} → {getLanguageName(item.targetLang)}</span>\n                    <span>{new Date(item.timestamp).toLocaleTimeString()}</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                    <div className=\"truncate\">{item.sourceText}</div>\n                    <div className=\"truncate font-medium\">{item.translatedText}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/translator.tsx",
      "exists": false
    },
    "title": "components/translator.tsx",
    "time": {
      "start": 1759400885132,
      "end": 1759400885141
    }
  }
}
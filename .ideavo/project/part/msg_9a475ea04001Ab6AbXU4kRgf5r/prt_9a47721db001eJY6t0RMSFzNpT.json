{
  "id": "prt_9a47721db001eJY6t0RMSFzNpT",
  "messageID": "msg_9a475ea04001Ab6AbXU4kRgf5r",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_018aptQSS9RSeYAkESH1bkGy",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/api/translate/route.ts",
      "content": "import { NextRequest, NextResponse } from 'next/server'\n\n// Language mapping for Qwen API\nconst LANGUAGE_MAP: Record<string, string> = {\n  auto: 'auto',\n  en: 'English',\n  zh: 'Chinese',\n  ja: 'Japanese',\n  ko: 'Korean',\n  es: 'Spanish',\n  fr: 'French',\n  de: 'German',\n  it: 'Italian',\n  pt: 'Portuguese',\n  ru: 'Russian',\n  ar: 'Arabic',\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { text, sourceLang, targetLang } = await request.json()\n\n    if (!text || !targetLang) {\n      return NextResponse.json(\n        { error: 'Text and target language are required' },\n        { status: 400 }\n      )\n    }\n\n    const apiKey = process.env.DASHSCOPE_API_KEY\n    if (!apiKey) {\n      return NextResponse.json(\n        { error: 'API key not configured. Please set DASHSCOPE_API_KEY environment variable.' },\n        { status: 500 }\n      )\n    }\n\n    // Prepare the translation prompt\n    const sourceLanguage = LANGUAGE_MAP[sourceLang] || sourceLang\n    const targetLanguage = LANGUAGE_MAP[targetLang] || targetLang\n    \n    let prompt: string\n    if (sourceLang === 'auto') {\n      prompt = `Translate the following text to ${targetLanguage}. Only return the translation without any additional explanation or formatting:\\n\\n${text}`\n    } else {\n      prompt = `Translate the following text from ${sourceLanguage} to ${targetLanguage}. Only return the translation without any additional explanation or formatting:\\n\\n${text}`\n    }\n\n    // Call Qwen API using OpenAI-compatible interface\n    const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-plus',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a professional translator. Provide accurate translations without any additional commentary, explanations, or formatting. Return only the translated text.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 2000,\n      }),\n    })\n\n    if (!response.ok) {\n      const errorData = await response.text()\n      console.error('Qwen API error:', errorData)\n      return NextResponse.json(\n        { error: 'Translation service unavailable' },\n        { status: 500 }\n      )\n    }\n\n    const data = await response.json()\n    const translatedText = data.choices?.[0]?.message?.content?.trim()\n\n    if (!translatedText) {\n      return NextResponse.json(\n        { error: 'No translation received' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({\n      translatedText,\n      sourceLang,\n      targetLang,\n    })\n\n  } catch (error) {\n    console.error('Translation error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/app/api/translate/route.ts",
      "exists": false
    },
    "title": "app/api/translate/route.ts",
    "time": {
      "start": 1759400905004,
      "end": 1759400905006
    }
  }
}
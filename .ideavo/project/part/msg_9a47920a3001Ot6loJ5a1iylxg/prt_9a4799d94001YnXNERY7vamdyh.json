{
  "id": "prt_9a4799d94001YnXNERY7vamdyh",
  "messageID": "msg_9a47920a3001Ot6loJ5a1iylxg",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01TumTji7yPhSbq2Zpv8mHCQ",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/api/translate/route.ts"
    },
    "output": "<file>\n00001| import { NextRequest, NextResponse } from 'next/server'\n00002| \n00003| // Language mapping for Qwen API\n00004| const LANGUAGE_MAP: Record<string, string> = {\n00005|   auto: 'auto',\n00006|   en: 'English',\n00007|   zh: 'Chinese',\n00008|   ja: 'Japanese',\n00009|   ko: 'Korean',\n00010|   es: 'Spanish',\n00011|   fr: 'French',\n00012|   de: 'German',\n00013|   it: 'Italian',\n00014|   pt: 'Portuguese',\n00015|   ru: 'Russian',\n00016|   ar: 'Arabic',\n00017| }\n00018| \n00019| export async function POST(request: NextRequest) {\n00020|   try {\n00021|     const { text, sourceLang, targetLang } = await request.json()\n00022| \n00023|     if (!text || !targetLang) {\n00024|       return NextResponse.json(\n00025|         { error: 'Text and target language are required' },\n00026|         { status: 400 }\n00027|       )\n00028|     }\n00029| \n00030|     const apiKey = process.env.DASHSCOPE_API_KEY\n00031|     if (!apiKey) {\n00032|       return NextResponse.json(\n00033|         { error: 'API key not configured. Please set DASHSCOPE_API_KEY environment variable.' },\n00034|         { status: 500 }\n00035|       )\n00036|     }\n00037| \n00038|     // Prepare the translation prompt\n00039|     const sourceLanguage = LANGUAGE_MAP[sourceLang] || sourceLang\n00040|     const targetLanguage = LANGUAGE_MAP[targetLang] || targetLang\n00041|     \n00042|     let prompt: string\n00043|     if (sourceLang === 'auto') {\n00044|       prompt = `Translate the following text to ${targetLanguage}. Only return the translation without any additional explanation or formatting:\\n\\n${text}`\n00045|     } else {\n00046|       prompt = `Translate the following text from ${sourceLanguage} to ${targetLanguage}. Only return the translation without any additional explanation or formatting:\\n\\n${text}`\n00047|     }\n00048| \n00049|     // Call Qwen API using OpenAI-compatible interface\n00050|     const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00051|       method: 'POST',\n00052|       headers: {\n00053|         'Authorization': `Bearer ${apiKey}`,\n00054|         'Content-Type': 'application/json',\n00055|       },\n00056|       body: JSON.stringify({\n00057|         model: 'qwen-plus',\n00058|         messages: [\n00059|           {\n00060|             role: 'system',\n00061|             content: 'You are a professional translator. Provide accurate translations without any additional commentary, explanations, or formatting. Return only the translated text.'\n00062|           },\n00063|           {\n00064|             role: 'user',\n00065|             content: prompt\n00066|           }\n00067|         ],\n00068|         temperature: 0.3,\n00069|         max_tokens: 2000,\n00070|       }),\n00071|     })\n00072| \n00073|     if (!response.ok) {\n00074|       const errorData = await response.text()\n00075|       console.error('Qwen API error:', errorData)\n00076|       return NextResponse.json(\n00077|         { error: 'Translation service unavailable' },\n00078|         { status: 500 }\n00079|       )\n00080|     }\n00081| \n00082|     const data = await response.json()\n00083|     const translatedText = data.choices?.[0]?.message?.content?.trim()\n00084| \n00085|     if (!translatedText) {\n00086|       return NextResponse.json(\n00087|         { error: 'No translation received' },\n00088|         { status: 500 }\n00089|       )\n00090|     }\n00091| \n00092|     return NextResponse.json({\n00093|       translatedText,\n00094|       sourceLang,\n00095|       targetLang,\n00096|     })\n00097| \n00098|   } catch (error) {\n00099|     console.error('Translation error:', error)\n00100|     return NextResponse.json(\n00101|       { error: 'Internal server error' },\n00102|       { status: 500 }\n00103|     )\n00104|   }\n00105| }\n</file>",
    "metadata": {
      "preview": "import { NextRequest, NextResponse } from 'next/server'\n\n// Language mapping for Qwen API\nconst LANGUAGE_MAP: Record<string, string> = {\n  auto: 'auto',\n  en: 'English',\n  zh: 'Chinese',\n  ja: 'Japanese',\n  ko: 'Korean',\n  es: 'Spanish',\n  fr: 'French',\n  de: 'German',\n  it: 'Italian',\n  pt: 'Portuguese',\n  ru: 'Russian',\n  ar: 'Arabic',\n}\n\nexport async function POST(request: NextRequest) {\n  try {"
    },
    "title": "app/api/translate/route.ts",
    "time": {
      "start": 1759401058123,
      "end": 1759401058125
    }
  }
}
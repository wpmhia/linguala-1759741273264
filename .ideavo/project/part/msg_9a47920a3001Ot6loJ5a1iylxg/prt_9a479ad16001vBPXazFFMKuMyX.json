{
  "id": "prt_9a479ad16001vBPXazFFMKuMyX",
  "messageID": "msg_9a47920a3001Ot6loJ5a1iylxg",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_017o9K1Th8weUVEc49ewUoP2",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/translator.tsx"
    },
    "output": "<file>\n00001| \"use client\"\n00002| \n00003| import { useState, useRef, useEffect } from \"react\"\n00004| import { Button } from \"@/components/ui/button\"\n00005| import { Textarea } from \"@/components/ui/textarea\"\n00006| import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n00007| import { Card, CardContent } from \"@/components/ui/card\"\n00008| import { Copy, ArrowUpDown, Volume2, RotateCcw } from \"lucide-react\"\n00009| import { toast } from \"sonner\"\n00010| \n00011| const LANGUAGES = [\n00012|   { code: \"auto\", name: \"Detect language\" },\n00013|   { code: \"en\", name: \"English\" },\n00014|   { code: \"zh\", name: \"Chinese\" },\n00015|   { code: \"ja\", name: \"Japanese\" },\n00016|   { code: \"ko\", name: \"Korean\" },\n00017|   { code: \"es\", name: \"Spanish\" },\n00018|   { code: \"fr\", name: \"French\" },\n00019|   { code: \"de\", name: \"German\" },\n00020|   { code: \"it\", name: \"Italian\" },\n00021|   { code: \"pt\", name: \"Portuguese\" },\n00022|   { code: \"ru\", name: \"Russian\" },\n00023|   { code: \"ar\", name: \"Arabic\" },\n00024| ]\n00025| \n00026| interface TranslationHistory {\n00027|   id: string\n00028|   sourceText: string\n00029|   translatedText: string\n00030|   sourceLang: string\n00031|   targetLang: string\n00032|   timestamp: number\n00033| }\n00034| \n00035| export default function Translator() {\n00036|   const [sourceText, setSourceText] = useState(\"\")\n00037|   const [translatedText, setTranslatedText] = useState(\"\")\n00038|   const [sourceLang, setSourceLang] = useState(\"auto\")\n00039|   const [targetLang, setTargetLang] = useState(\"en\")\n00040|   const [isTranslating, setIsTranslating] = useState(false)\n00041|   const [history, setHistory] = useState<TranslationHistory[]>([])\n00042|   const debounceRef = useRef<NodeJS.Timeout>()\n00043| \n00044|   // Load history from localStorage on mount\n00045|   useEffect(() => {\n00046|     const savedHistory = localStorage.getItem(\"translation-history\")\n00047|     if (savedHistory) {\n00048|       setHistory(JSON.parse(savedHistory))\n00049|     }\n00050|   }, [])\n00051| \n00052|   // Save history to localStorage whenever it changes\n00053|   useEffect(() => {\n00054|     localStorage.setItem(\"translation-history\", JSON.stringify(history))\n00055|   }, [history])\n00056| \n00057|   const translateText = async (text: string, from: string, to: string) => {\n00058|     if (!text.trim()) {\n00059|       setTranslatedText(\"\")\n00060|       return\n00061|     }\n00062| \n00063|     setIsTranslating(true)\n00064|     try {\n00065|       const response = await fetch(\"/api/translate\", {\n00066|         method: \"POST\",\n00067|         headers: {\n00068|           \"Content-Type\": \"application/json\",\n00069|         },\n00070|         body: JSON.stringify({\n00071|           text: text.trim(),\n00072|           sourceLang: from,\n00073|           targetLang: to,\n00074|         }),\n00075|       })\n00076| \n00077|       if (!response.ok) {\n00078|         throw new Error(\"Translation failed\")\n00079|       }\n00080| \n00081|       const data = await response.json()\n00082|       setTranslatedText(data.translatedText)\n00083| \n00084|       // Add to history\n00085|       const historyItem: TranslationHistory = {\n00086|         id: Date.now().toString(),\n00087|         sourceText: text.trim(),\n00088|         translatedText: data.translatedText,\n00089|         sourceLang: from,\n00090|         targetLang: to,\n00091|         timestamp: Date.now(),\n00092|       }\n00093|       setHistory(prev => [historyItem, ...prev.slice(0, 9)]) // Keep only last 10\n00094| \n00095|     } catch (error) {\n00096|       console.error(\"Translation error:\", error)\n00097|       toast.error(\"Translation failed. Please try again.\")\n00098|     } finally {\n00099|       setIsTranslating(false)\n00100|     }\n00101|   }\n00102| \n00103|   const handleSourceTextChange = (text: string) => {\n00104|     setSourceText(text)\n00105|     \n00106|     // Debounce translation\n00107|     if (debounceRef.current) {\n00108|       clearTimeout(debounceRef.current)\n00109|     }\n00110|     \n00111|     debounceRef.current = setTimeout(() => {\n00112|       translateText(text, sourceLang, targetLang)\n00113|     }, 500)\n00114|   }\n00115| \n00116|   const handleLanguageChange = () => {\n00117|     if (sourceText.trim()) {\n00118|       translateText(sourceText, sourceLang, targetLang)\n00119|     }\n00120|   }\n00121| \n00122|   const swapLanguages = () => {\n00123|     if (sourceLang === \"auto\") return\n00124|     \n00125|     setSourceLang(targetLang)\n00126|     setTargetLang(sourceLang)\n00127|     setSourceText(translatedText)\n00128|     setTranslatedText(sourceText)\n00129|   }\n00130| \n00131|   const copyToClipboard = async (text: string) => {\n00132|     try {\n00133|       await navigator.clipboard.writeText(text)\n00134|       toast.success(\"Copied to clipboard!\")\n00135|     } catch (error) {\n00136|       toast.error(\"Failed to copy text\")\n00137|     }\n00138|   }\n00139| \n00140|   const clearText = () => {\n00141|     setSourceText(\"\")\n00142|     setTranslatedText(\"\")\n00143|   }\n00144| \n00145|   const getLanguageName = (code: string) => {\n00146|     return LANGUAGES.find(lang => lang.code === code)?.name || code\n00147|   }\n00148| \n00149|   return (\n00150|     <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\n00151|       <div className=\"text-center space-y-2\">\n00152|         <h1 className=\"text-4xl font-bold text-gray-900\">DeepL Clone</h1>\n00153|         <p className=\"text-gray-600\">Powered by Alibaba Cloud Qwen</p>\n00154|       </div>\n00155| \n00156|       <Card className=\"shadow-lg\">\n00157|         <CardContent className=\"p-6\">\n00158|           {/* Language Selection */}\n00159|           <div className=\"flex items-center justify-between mb-4\">\n00160|             <div className=\"flex items-center space-x-4\">\n00161|               <Select value={sourceLang} onValueChange={(value) => {\n00162|                 setSourceLang(value)\n00163|                 handleLanguageChange()\n00164|               }}>\n00165|                 <SelectTrigger className=\"w-48\">\n00166|                   <SelectValue />\n00167|                 </SelectTrigger>\n00168|                 <SelectContent>\n00169|                   {LANGUAGES.map((lang) => (\n00170|                     <SelectItem key={lang.code} value={lang.code}>\n00171|                       {lang.name}\n00172|                     </SelectItem>\n00173|                   ))}\n00174|                 </SelectContent>\n00175|               </Select>\n00176| \n00177|               <Button\n00178|                 variant=\"ghost\"\n00179|                 size=\"sm\"\n00180|                 onClick={swapLanguages}\n00181|                 disabled={sourceLang === \"auto\"}\n00182|                 className=\"p-2\"\n00183|               >\n00184|                 <ArrowUpDown className=\"h-4 w-4\" />\n00185|               </Button>\n00186| \n00187|               <Select value={targetLang} onValueChange={(value) => {\n00188|                 setTargetLang(value)\n00189|                 handleLanguageChange()\n00190|               }}>\n00191|                 <SelectTrigger className=\"w-48\">\n00192|                   <SelectValue />\n00193|                 </SelectTrigger>\n00194|                 <SelectContent>\n00195|                   {LANGUAGES.filter(lang => lang.code !== \"auto\").map((lang) => (\n00196|                     <SelectItem key={lang.code} value={lang.code}>\n00197|                       {lang.name}\n00198|                     </SelectItem>\n00199|                   ))}\n00200|                 </SelectContent>\n00201|               </Select>\n00202|             </div>\n00203| \n00204|             <Button variant=\"ghost\" size=\"sm\" onClick={clearText}>\n00205|               <RotateCcw className=\"h-4 w-4 mr-2\" />\n00206|               Clear\n00207|             </Button>\n00208|           </div>\n00209| \n00210|           {/* Translation Interface */}\n00211|           <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n00212|             {/* Source Text */}\n00213|             <div className=\"space-y-2\">\n00214|               <div className=\"flex items-center justify-between\">\n00215|                 <label className=\"text-sm font-medium text-gray-700\">\n00216|                   {getLanguageName(sourceLang)}\n00217|                 </label>\n00218|                 <Button\n00219|                   variant=\"ghost\"\n00220|                   size=\"sm\"\n00221|                   onClick={() => copyToClipboard(sourceText)}\n00222|                   disabled={!sourceText}\n00223|                 >\n00224|                   <Copy className=\"h-4 w-4\" />\n00225|                 </Button>\n00226|               </div>\n00227|               <Textarea\n00228|                 placeholder=\"Enter text to translate...\"\n00229|                 value={sourceText}\n00230|                 onChange={(e) => handleSourceTextChange(e.target.value)}\n00231|                 className=\"min-h-[200px] resize-none border-gray-300 focus:border-blue-500\"\n00232|               />\n00233|             </div>\n00234| \n00235|             {/* Translated Text */}\n00236|             <div className=\"space-y-2\">\n00237|               <div className=\"flex items-center justify-between\">\n00238|                 <label className=\"text-sm font-medium text-gray-700\">\n00239|                   {getLanguageName(targetLang)}\n00240|                 </label>\n00241|                 <Button\n00242|                   variant=\"ghost\"\n00243|                   size=\"sm\"\n00244|                   onClick={() => copyToClipboard(translatedText)}\n00245|                   disabled={!translatedText}\n00246|                 >\n00247|                   <Copy className=\"h-4 w-4\" />\n00248|                 </Button>\n00249|               </div>\n00250|               <Textarea\n00251|                 placeholder={isTranslating ? \"Translating...\" : \"Translation will appear here...\"}\n00252|                 value={translatedText}\n00253|                 readOnly\n00254|                 className=\"min-h-[200px] resize-none border-gray-300 bg-gray-50\"\n00255|               />\n00256|             </div>\n00257|           </div>\n00258| \n00259|           {/* Translation Status */}\n00260|           {isTranslating && (\n00261|             <div className=\"flex items-center justify-center mt-4 text-blue-600\">\n00262|               <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\n00263|               Translating...\n00264|             </div>\n00265|           )}\n00266|         </CardContent>\n00267|       </Card>\n00268| \n00269|       {/* Translation History */}\n00270|       {history.length > 0 && (\n00271|         <Card className=\"shadow-lg\">\n00272|           <CardContent className=\"p-6\">\n00273|             <h2 className=\"text-xl font-semibold mb-4\">Recent Translations</h2>\n00274|             <div className=\"space-y-3\">\n00275|               {history.slice(0, 5).map((item) => (\n00276|                 <div\n00277|                   key={item.id}\n00278|                   className=\"p-3 border rounded-lg hover:bg-gray-50 cursor-pointer\"\n00279|                   onClick={() => {\n00280|                     setSourceText(item.sourceText)\n00281|                     setTranslatedText(item.translatedText)\n00282|                     setSourceLang(item.sourceLang)\n00283|                     setTargetLang(item.targetLang)\n00284|                   }}\n00285|                 >\n00286|                   <div className=\"flex items-center justify-between text-sm text-gray-600 mb-1\">\n00287|                     <span>{getLanguageName(item.sourceLang)} → {getLanguageName(item.targetLang)}</span>\n00288|                     <span>{new Date(item.timestamp).toLocaleTimeString()}</span>\n00289|                   </div>\n00290|                   <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n00291|                     <div className=\"truncate\">{item.sourceText}</div>\n00292|                     <div className=\"truncate font-medium\">{item.translatedText}</div>\n00293|                   </div>\n00294|                 </div>\n00295|               ))}\n00296|             </div>\n00297|           </CardContent>\n00298|         </Card>\n00299|       )}\n00300|     </div>\n00301|   )\n00302| }\n</file>",
    "metadata": {
      "preview": "\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Copy, ArrowUpDown, Volume2, RotateCcw } from \"lucide-react\"\nimport { toast } from \"sonner\"\n\nconst LANGUAGES = [\n  { code: \"auto\", name: \"Detect language\" },\n  { code: \"en\", name: \"English\" },\n  { code: \"zh\", name: \"Chinese\" },\n  { code: \"ja\", name: \"Japanese\" },\n  { code: \"ko\", name: \"Korean\" },\n  { code: \"es\", name: \"Spanish\" },\n  { code: \"fr\", name: \"French\" },\n  { code: \"de\", name: \"German\" },\n  { code: \"it\", name: \"Italian\" },"
    },
    "title": "components/translator.tsx",
    "time": {
      "start": 1759401062355,
      "end": 1759401062358
    }
  }
}
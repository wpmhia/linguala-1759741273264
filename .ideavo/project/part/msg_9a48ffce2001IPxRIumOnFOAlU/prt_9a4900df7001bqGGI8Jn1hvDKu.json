{
  "id": "prt_9a4900df7001bqGGI8Jn1hvDKu",
  "messageID": "msg_9a48ffce2001IPxRIumOnFOAlU",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01DYSoGJ3bJ5V4ECBWo7wmYx",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/api/translate/route.ts"
    },
    "output": "<file>\n00001| import { NextRequest, NextResponse } from 'next/server'\n00002| \n00003| // Language mapping for Qwen API\n00004| const LANGUAGE_MAP: Record<string, string> = {\n00005|   auto: 'auto',\n00006|   en: 'English',\n00007|   zh: 'Chinese',\n00008|   ja: 'Japanese',\n00009|   ko: 'Korean',\n00010|   es: 'Spanish',\n00011|   fr: 'French',\n00012|   de: 'German',\n00013|   it: 'Italian',\n00014|   pt: 'Portuguese',\n00015|   ru: 'Russian',\n00016|   ar: 'Arabic',\n00017| }\n00018| \n00019| export async function POST(request: NextRequest) {\n00020|   try {\n00021|     const { text, sourceLang, targetLang } = await request.json()\n00022| \n00023|     if (!text || !targetLang) {\n00024|       return NextResponse.json(\n00025|         { error: 'Text and target language are required' },\n00026|         { status: 400 }\n00027|       )\n00028|     }\n00029| \n00030|     const apiKey = process.env.DASHSCOPE_API_KEY\n00031|     console.log('API Key length:', apiKey ? apiKey.length : 'undefined')\n00032|     console.log('API Key prefix:', apiKey ? apiKey.substring(0, 10) : 'undefined')\n00033|     if (!apiKey) {\n00034|       return NextResponse.json(\n00035|         { error: 'API key not configured. Please set DASHSCOPE_API_KEY environment variable.' },\n00036|         { status: 500 }\n00037|       )\n00038|     }\n00039| \n00040|     // Prepare the translation prompt\n00041|     const sourceLanguage = LANGUAGE_MAP[sourceLang] || sourceLang\n00042|     const targetLanguage = LANGUAGE_MAP[targetLang] || targetLang\n00043|     \n00044|     let prompt: string\n00045|     if (sourceLang === 'auto') {\n00046|       prompt = `Translate the following text to ${targetLanguage}. Only return the translation without any additional explanation or formatting:\\n\\n${text}`\n00047|     } else {\n00048|       prompt = `Translate the following text from ${sourceLanguage} to ${targetLanguage}. Only return the translation without any additional explanation or formatting:\\n\\n${text}`\n00049|     }\n00050| \n00051|     // Call Qwen API using OpenAI-compatible interface\n00052|     const response = await fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00053|       method: 'POST',\n00054|       headers: {\n00055|         'Authorization': `Bearer ${apiKey}`,\n00056|         'Content-Type': 'application/json',\n00057|       },\n00058|       body: JSON.stringify({\n00059|          model: 'qwen-mt-turbo',\n00060|         messages: [\n00061|           {\n00062|             role: 'system',\n00063|             content: 'You are a professional translator. Provide accurate translations without any additional commentary, explanations, or formatting. Return only the translated text.'\n00064|           },\n00065|           {\n00066|             role: 'user',\n00067|             content: prompt\n00068|           }\n00069|         ],\n00070|         temperature: 0.3,\n00071|         max_tokens: 2000,\n00072|       }),\n00073|     })\n00074| \n00075|     if (!response.ok) {\n00076|       const errorData = await response.text()\n00077|       console.error('Qwen API error:', errorData)\n00078|       console.error('Response status:', response.status)\n00079|       console.error('Response headers:', Object.fromEntries(response.headers.entries()))\n00080|       return NextResponse.json(\n00081|         { error: 'Translation service unavailable' },\n00082|         { status: 500 }\n00083|       )\n00084|     }\n00085| \n00086|     const data = await response.json()\n00087|     const translatedText = data.choices?.[0]?.message?.content?.trim()\n00088| \n00089|     if (!translatedText) {\n00090|       return NextResponse.json(\n00091|         { error: 'No translation received' },\n00092|         { status: 500 }\n00093|       )\n00094|     }\n00095| \n00096|     return NextResponse.json({\n00097|       translatedText,\n00098|       sourceLang,\n00099|       targetLang,\n00100|     })\n00101| \n00102|   } catch (error) {\n00103|     console.error('Translation error:', error)\n00104|     return NextResponse.json(\n00105|       { error: 'Internal server error' },\n00106|       { status: 500 }\n00107|     )\n00108|   }\n00109| }\n</file>",
    "metadata": {
      "preview": "import { NextRequest, NextResponse } from 'next/server'\n\n// Language mapping for Qwen API\nconst LANGUAGE_MAP: Record<string, string> = {\n  auto: 'auto',\n  en: 'English',\n  zh: 'Chinese',\n  ja: 'Japanese',\n  ko: 'Korean',\n  es: 'Spanish',\n  fr: 'French',\n  de: 'German',\n  it: 'Italian',\n  pt: 'Portuguese',\n  ru: 'Russian',\n  ar: 'Arabic',\n}\n\nexport async function POST(request: NextRequest) {\n  try {"
    },
    "title": "app/api/translate/route.ts",
    "time": {
      "start": 1759402528760,
      "end": 1759402528770
    }
  }
}
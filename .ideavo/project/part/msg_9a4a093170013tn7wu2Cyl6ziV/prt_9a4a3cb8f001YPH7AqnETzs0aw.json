{
  "id": "prt_9a4a3cb8f001YPH7AqnETzs0aw",
  "messageID": "msg_9a4a093170013tn7wu2Cyl6ziV",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "edit",
  "callID": "toolu_01Qe9c4YCRqUN69MAkCCX3dS",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/translator.tsx",
      "oldString": "                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>",
      "newString": "                </DropdownMenuContent>\n              </DropdownMenu>\n\n              {/* Glossary Button */}\n              <Dialog open={showGlossary} onOpenChange={setShowGlossary}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-1\">\n                    <Book className=\"h-4 w-4\" />\n                    <span>Glossary</span>\n                    <Badge variant=\"secondary\" className=\"ml-1\">{glossary.length}</Badge>\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>Translation Glossary</DialogTitle>\n                  </DialogHeader>\n                  <Tabs defaultValue=\"manage\" className=\"w-full\">\n                    <TabsList>\n                      <TabsTrigger value=\"manage\">Manage Terms</TabsTrigger>\n                      <TabsTrigger value=\"add\">Add New Term</TabsTrigger>\n                    </TabsList>\n                    <TabsContent value=\"manage\" className=\"space-y-4\">\n                      <div className=\"grid gap-4 max-h-96 overflow-y-auto\">\n                        {glossary.length === 0 ? (\n                          <p className=\"text-center text-gray-500 py-8\">No glossary entries yet. Add your first term!</p>\n                        ) : (\n                          glossary.map(entry => (\n                            <div key={entry.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"font-medium\">{entry.source}</span>\n                                  <ArrowUpDown className=\"h-3 w-3 text-gray-400\" />\n                                  <span className=\"text-blue-600\">{entry.target}</span>\n                                  <Badge variant=\"outline\" className=\"text-xs\">{DOMAINS.find(d => d.code === entry.domain)?.name}</Badge>\n                                </div>\n                                {entry.notes && <p className=\"text-sm text-gray-600 mt-1\">{entry.notes}</p>}\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => removeGlossaryEntry(entry.id)}\n                                className=\"text-red-600 hover:text-red-700\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </TabsContent>\n                    <TabsContent value=\"add\" className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"source-term\">Source Term</Label>\n                          <Input\n                            id=\"source-term\"\n                            value={newGlossaryEntry.source}\n                            onChange={(e) => setNewGlossaryEntry(prev => ({ ...prev, source: e.target.value }))}\n                            placeholder=\"Enter source term\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"target-term\">Target Term</Label>\n                          <Input\n                            id=\"target-term\"\n                            value={newGlossaryEntry.target}\n                            onChange={(e) => setNewGlossaryEntry(prev => ({ ...prev, target: e.target.value }))}\n                            placeholder=\"Enter target term\"\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"notes\">Notes (Optional)</Label>\n                        <Input\n                          id=\"notes\"\n                          value={newGlossaryEntry.notes}\n                          onChange={(e) => setNewGlossaryEntry(prev => ({ ...prev, notes: e.target.value }))}\n                          placeholder=\"Add context or usage notes\"\n                        />\n                      </div>\n                      <Button onClick={addGlossaryEntry} className=\"w-full\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add to Glossary\n                      </Button>\n                    </TabsContent>\n                  </Tabs>\n                </DialogContent>\n              </Dialog>\n\n              {/* Advanced History Button */}\n              <Dialog open={showAdvancedHistory} onOpenChange={setShowAdvancedHistory}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-1\">\n                    <FileText className=\"h-4 w-4\" />\n                    <span>History</span>\n                    <Badge variant=\"secondary\" className=\"ml-1\">{history.length}</Badge>\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>Translation History</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Search className=\"h-4 w-4 text-gray-400\" />\n                      <Input\n                        value={historySearch}\n                        onChange={(e) => setHistorySearch(e.target.value)}\n                        placeholder=\"Search history...\"\n                        className=\"flex-1\"\n                      />\n                      <Button onClick={exportHistory} variant=\"outline\" size=\"sm\">\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Export\n                      </Button>\n                      <Button onClick={clearHistory} variant=\"outline\" size=\"sm\" className=\"text-red-600\">\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Clear\n                      </Button>\n                    </div>\n                    <div className=\"grid gap-3 max-h-96 overflow-y-auto\">\n                      {filteredHistory.length === 0 ? (\n                        <p className=\"text-center text-gray-500 py-8\">\n                          {historySearch ? \"No matching translations found.\" : \"No translation history yet.\"}\n                        </p>\n                      ) : (\n                        filteredHistory.map(item => (\n                          <div key={item.id} className=\"p-4 bg-gray-50 rounded-lg space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                                <span>{getLanguageName(item.sourceLang)}</span>\n                                <ArrowUpDown className=\"h-3 w-3\" />\n                                <span>{getLanguageName(item.targetLang)}</span>\n                                <span>â€¢</span>\n                                <span>{new Date(item.timestamp).toLocaleDateString()}</span>\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => copyToClipboard(item.translatedText)}\n                              >\n                                <Copy className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                            <div className=\"text-sm\">\n                              <p className=\"font-medium\">{item.sourceText}</p>\n                              <p className=\"text-blue-600\">{item.translatedText}</p>\n                            </div>\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "diff": "Index: /home/user/project/components/translator.tsx\n===================================================================\n--- /home/user/project/components/translator.tsx\n+++ /home/user/project/components/translator.tsx\n@@ -509,8 +509,161 @@\n           Copy Share URL\n         </DropdownMenuItem>\n       </DropdownMenuContent>\n     </DropdownMenu>\n+\n+    {/* Glossary Button */}\n+    <Dialog open={showGlossary} onOpenChange={setShowGlossary}>\n+      <DialogTrigger asChild>\n+        <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-1\">\n+          <Book className=\"h-4 w-4\" />\n+          <span>Glossary</span>\n+          <Badge variant=\"secondary\" className=\"ml-1\">{glossary.length}</Badge>\n+        </Button>\n+      </DialogTrigger>\n+      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n+        <DialogHeader>\n+          <DialogTitle>Translation Glossary</DialogTitle>\n+        </DialogHeader>\n+        <Tabs defaultValue=\"manage\" className=\"w-full\">\n+          <TabsList>\n+            <TabsTrigger value=\"manage\">Manage Terms</TabsTrigger>\n+            <TabsTrigger value=\"add\">Add New Term</TabsTrigger>\n+          </TabsList>\n+          <TabsContent value=\"manage\" className=\"space-y-4\">\n+            <div className=\"grid gap-4 max-h-96 overflow-y-auto\">\n+              {glossary.length === 0 ? (\n+                <p className=\"text-center text-gray-500 py-8\">No glossary entries yet. Add your first term!</p>\n+              ) : (\n+                glossary.map(entry => (\n+                  <div key={entry.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n+                    <div className=\"flex-1\">\n+                      <div className=\"flex items-center space-x-2\">\n+                        <span className=\"font-medium\">{entry.source}</span>\n+                        <ArrowUpDown className=\"h-3 w-3 text-gray-400\" />\n+                        <span className=\"text-blue-600\">{entry.target}</span>\n+                        <Badge variant=\"outline\" className=\"text-xs\">{DOMAINS.find(d => d.code === entry.domain)?.name}</Badge>\n+                      </div>\n+                      {entry.notes && <p className=\"text-sm text-gray-600 mt-1\">{entry.notes}</p>}\n+                    </div>\n+                    <Button\n+                      variant=\"ghost\"\n+                      size=\"sm\"\n+                      onClick={() => removeGlossaryEntry(entry.id)}\n+                      className=\"text-red-600 hover:text-red-700\"\n+                    >\n+                      <Trash2 className=\"h-4 w-4\" />\n+                    </Button>\n+                  </div>\n+                ))\n+              )}\n+            </div>\n+          </TabsContent>\n+          <TabsContent value=\"add\" className=\"space-y-4\">\n+            <div className=\"grid grid-cols-2 gap-4\">\n+              <div>\n+                <Label htmlFor=\"source-term\">Source Term</Label>\n+                <Input\n+                  id=\"source-term\"\n+                  value={newGlossaryEntry.source}\n+                  onChange={(e) => setNewGlossaryEntry(prev => ({ ...prev, source: e.target.value }))}\n+                  placeholder=\"Enter source term\"\n+                />\n+              </div>\n+              <div>\n+                <Label htmlFor=\"target-term\">Target Term</Label>\n+                <Input\n+                  id=\"target-term\"\n+                  value={newGlossaryEntry.target}\n+                  onChange={(e) => setNewGlossaryEntry(prev => ({ ...prev, target: e.target.value }))}\n+                  placeholder=\"Enter target term\"\n+                />\n+              </div>\n+            </div>\n+            <div>\n+              <Label htmlFor=\"notes\">Notes (Optional)</Label>\n+              <Input\n+                id=\"notes\"\n+                value={newGlossaryEntry.notes}\n+                onChange={(e) => setNewGlossaryEntry(prev => ({ ...prev, notes: e.target.value }))}\n+                placeholder=\"Add context or usage notes\"\n+              />\n+            </div>\n+            <Button onClick={addGlossaryEntry} className=\"w-full\">\n+              <Plus className=\"h-4 w-4 mr-2\" />\n+              Add to Glossary\n+            </Button>\n+          </TabsContent>\n+        </Tabs>\n+      </DialogContent>\n+    </Dialog>\n+\n+    {/* Advanced History Button */}\n+    <Dialog open={showAdvancedHistory} onOpenChange={setShowAdvancedHistory}>\n+      <DialogTrigger asChild>\n+        <Button variant=\"outline\" size=\"sm\" className=\"flex items-center space-x-1\">\n+          <FileText className=\"h-4 w-4\" />\n+          <span>History</span>\n+          <Badge variant=\"secondary\" className=\"ml-1\">{history.length}</Badge>\n+        </Button>\n+      </DialogTrigger>\n+      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n+        <DialogHeader>\n+          <DialogTitle>Translation History</DialogTitle>\n+        </DialogHeader>\n+        <div className=\"space-y-4\">\n+          <div className=\"flex items-center space-x-2\">\n+            <Search className=\"h-4 w-4 text-gray-400\" />\n+            <Input\n+              value={historySearch}\n+              onChange={(e) => setHistorySearch(e.target.value)}\n+              placeholder=\"Search history...\"\n+              className=\"flex-1\"\n+            />\n+            <Button onClick={exportHistory} variant=\"outline\" size=\"sm\">\n+              <Download className=\"h-4 w-4 mr-2\" />\n+              Export\n+            </Button>\n+            <Button onClick={clearHistory} variant=\"outline\" size=\"sm\" className=\"text-red-600\">\n+              <Trash2 className=\"h-4 w-4 mr-2\" />\n+              Clear\n+            </Button>\n+          </div>\n+          <div className=\"grid gap-3 max-h-96 overflow-y-auto\">\n+            {filteredHistory.length === 0 ? (\n+              <p className=\"text-center text-gray-500 py-8\">\n+                {historySearch ? \"No matching translations found.\" : \"No translation history yet.\"}\n+              </p>\n+            ) : (\n+              filteredHistory.map(item => (\n+                <div key={item.id} className=\"p-4 bg-gray-50 rounded-lg space-y-2\">\n+                  <div className=\"flex items-center justify-between\">\n+                    <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n+                      <span>{getLanguageName(item.sourceLang)}</span>\n+                      <ArrowUpDown className=\"h-3 w-3\" />\n+                      <span>{getLanguageName(item.targetLang)}</span>\n+                      <span>â€¢</span>\n+                      <span>{new Date(item.timestamp).toLocaleDateString()}</span>\n+                    </div>\n+                    <Button\n+                      variant=\"ghost\"\n+                      size=\"sm\"\n+                      onClick={() => copyToClipboard(item.translatedText)}\n+                    >\n+                      <Copy className=\"h-4 w-4\" />\n+                    </Button>\n+                  </div>\n+                  <div className=\"text-sm\">\n+                    <p className=\"font-medium\">{item.sourceText}</p>\n+                    <p className=\"text-blue-600\">{item.translatedText}</p>\n+                  </div>\n+                </div>\n+              ))\n+            )}\n+          </div>\n+        </div>\n+      </DialogContent>\n+    </Dialog>\n   </div>\n </div>\n \n <Separator className=\"mb-6\" />\n"
    },
    "title": "components/translator.tsx",
    "time": {
      "start": 1759403842678,
      "end": 1759403842701
    }
  }
}
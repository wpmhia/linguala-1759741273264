{
  "id": "prt_9a4aabf7e0017IWT3VMfrDTtPP",
  "messageID": "msg_9a4aa55f6001q6rif8bcnsjNHg",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01VnA2DzTz7yByyJdToXzphV",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/translator-nielsen.tsx",
      "content": "\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { \n  ArrowUpDown, Copy, Download, Share2, Settings, \n  Zap, ZapOff, Check, AlertTriangle, Info, \n  ChevronDown, ChevronUp, BookOpen, History,\n  Upload, FileText, Search, Trash2, Plus\n} from \"lucide-react\"\nimport { toast } from \"sonner\"\n\n// Core data structures remain the same\nconst LANGUAGES = [\n  { code: \"auto\", name: \"Detect language\" },\n  // Northern European languages\n  { code: \"en\", name: \"English\" },\n  { code: \"da\", name: \"Danish\" },\n  { code: \"sv\", name: \"Swedish\" },\n  { code: \"no\", name: \"Norwegian\" },\n  { code: \"fi\", name: \"Finnish\" },\n  { code: \"de\", name: \"German\" },\n  { code: \"nl\", name: \"Dutch\" },\n  { code: \"et\", name: \"Estonian\" },\n  { code: \"lv\", name: \"Latvian\" },\n  { code: \"lt\", name: \"Lithuanian\" },\n  { code: \"pl\", name: \"Polish\" },\n  { code: \"cs\", name: \"Czech\" },\n  { code: \"sk\", name: \"Slovak\" },\n  { code: \"uk\", name: \"Ukrainian\" },\n  { code: \"ru\", name: \"Russian\" },\n  // Southern European languages\n  { code: \"fr\", name: \"French\" },\n  { code: \"es\", name: \"Spanish\" },\n  { code: \"pt\", name: \"Portuguese\" },\n  { code: \"it\", name: \"Italian\" },\n  { code: \"el\", name: \"Greek\" },\n  { code: \"tr\", name: \"Turkish\" },\n  { code: \"ro\", name: \"Romanian\" },\n  { code: \"bg\", name: \"Bulgarian\" },\n  { code: \"hr\", name: \"Croatian\" },\n  { code: \"sl\", name: \"Slovenian\" },\n  { code: \"hu\", name: \"Hungarian\" },\n  // Other languages\n  { code: \"zh\", name: \"Chinese\" },\n  { code: \"ja\", name: \"Japanese\" },\n  { code: \"ko\", name: \"Korean\" },\n  { code: \"ar\", name: \"Arabic\" },\n  { code: \"he\", name: \"Hebrew\" },\n  { code: \"hi\", name: \"Hindi\" },\n  { code: \"th\", name: \"Thai\" },\n  { code: \"vi\", name: \"Vietnamese\" },\n  { code: \"ms\", name: \"Malay\" },\n  { code: \"id\", name: \"Indonesian\" },\n  { code: \"tl\", name: \"Filipino\" },\n]\n\nconst DOMAINS = [\n  { code: \"general\", name: \"General\", description: \"Everyday text and conversations\" },\n  { code: \"technical\", name: \"Technical\", description: \"Software, IT, and technical documentation\" },\n  { code: \"medical\", name: \"Medical\", description: \"Healthcare and medical terminology\" },\n  { code: \"legal\", name: \"Legal\", description: \"Legal documents and terminology\" },\n  { code: \"business\", name: \"Business\", description: \"Corporate and financial content\" },\n  { code: \"academic\", name: \"Academic\", description: \"Research and educational content\" },\n  { code: \"creative\", name: \"Creative\", description: \"Literature and creative writing\" }\n]\n\ninterface TranslationHistory {\n  id: string\n  sourceText: string\n  translatedText: string\n  sourceLang: string\n  targetLang: string\n  domain: string\n  timestamp: number\n}\n\ninterface GlossaryEntry {\n  id: string\n  source: string\n  target: string\n  domain: string\n  notes?: string\n}\n\nexport default function NielsenTranslator() {\n  // Core translation state\n  const [sourceText, setSourceText] = useState(\"\")\n  const [translatedText, setTranslatedText] = useState(\"\")\n  const [sourceLang, setSourceLang] = useState(\"auto\")\n  const [targetLang, setTargetLang] = useState(\"en\")\n  const [selectedDomain, setSelectedDomain] = useState(\"general\")\n  const [isTranslating, setIsTranslating] = useState(false)\n  const [translationProgress, setTranslationProgress] = useState(0)\n\n  // UI state\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [realTimeEnabled, setRealTimeEnabled] = useState(true)\n  const [lastAction, setLastAction] = useState<string>(\"\")\n  const [errors, setErrors] = useState<string[]>([])\n\n  // Data state\n  const [history, setHistory] = useState<TranslationHistory[]>([])\n  const [glossary, setGlossary] = useState<GlossaryEntry[]>([])\n  const [historySearch, setHistorySearch] = useState(\"\")\n\n  const debounceRef = useRef<NodeJS.Timeout>()\n\n  // Load saved data\n  useEffect(() => {\n    const savedHistory = localStorage.getItem(\"translation-history\")\n    if (savedHistory) setHistory(JSON.parse(savedHistory))\n\n    const savedGlossary = localStorage.getItem(\"translation-glossary\")\n    if (savedGlossary) setGlossary(JSON.parse(savedGlossary))\n\n    // Handle shared URLs\n    const urlParams = new URLSearchParams(window.location.search)\n    const sharedText = urlParams.get('text')\n    const sharedFrom = urlParams.get('from')\n    const sharedTo = urlParams.get('to')\n    \n    if (sharedText && sharedFrom && sharedTo) {\n      setSourceText(sharedText)\n      setSourceLang(sharedFrom)\n      setTargetLang(sharedTo)\n      setLastAction(\"Loaded shared translation\")\n      setTimeout(() => translateText(sharedText, sharedFrom, sharedTo), 100)\n      window.history.replaceState({}, '', window.location.pathname)\n    }\n  }, [])\n\n  // Save data changes\n  useEffect(() => {\n    localStorage.setItem(\"translation-history\", JSON.stringify(history))\n  }, [history])\n\n  useEffect(() => {\n    localStorage.setItem(\"translation-glossary\", JSON.stringify(glossary))\n  }, [glossary])\n\n  // Core translation function with Nielsen-style feedback\n  const translateText = async (text: string, from: string, to: string) => {\n    if (!text.trim()) {\n      setTranslatedText(\"\")\n      return\n    }\n\n    setErrors([])\n    setIsTranslating(true)\n    setTranslationProgress(0)\n    setLastAction(\"Starting translation...\")\n\n    try {\n      // Simulate progress for better user feedback\n      const progressInterval = setInterval(() => {\n        setTranslationProgress(prev => Math.min(prev + 10, 90))\n      }, 100)\n\n      const response = await fetch(\"/api/translate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          text: text.trim(),\n          sourceLang: from,\n          targetLang: to,\n          domain: selectedDomain,\n          glossary: glossary.filter(entry => entry.domain === selectedDomain || entry.domain === 'general')\n        }),\n      })\n\n      clearInterval(progressInterval)\n      setTranslationProgress(100)\n\n      if (!response.ok) {\n        throw new Error(`Translation failed: ${response.status}`)\n      }\n\n      const data = await response.json()\n      setTranslatedText(data.translatedText)\n      setLastAction(`Translated from ${getLanguageName(from)} to ${getLanguageName(to)}`)\n\n      // Add to history\n      const historyItem: TranslationHistory = {\n        id: Date.now().toString(),\n        sourceText: text.trim(),\n        translatedText: data.translatedText,\n        sourceLang: from,\n        targetLang: to,\n        domain: selectedDomain,\n        timestamp: Date.now(),\n      }\n      setHistory(prev => [historyItem, ...prev.slice(0, 99)]) // Keep last 100\n\n    } catch (error) {\n      console.error(\"Translation error:\", error)\n      setErrors([\"Translation failed. Please check your connection and try again.\"])\n      setLastAction(\"Translation failed\")\n      toast.error(\"Translation failed\")\n    } finally {\n      setIsTranslating(false)\n      setTimeout(() => setTranslationProgress(0), 1000)\n    }\n  }\n\n  // Input handling with debouncing\n  const handleSourceTextChange = (text: string) => {\n    setSourceText(text)\n    setLastAction(\"Typing...\")\n    \n    if (realTimeEnabled && text.trim()) {\n      if (debounceRef.current) clearTimeout(debounceRef.current)\n      debounceRef.current = setTimeout(() => {\n        translateText(text, sourceLang, targetLang)\n      }, 500)\n    }\n  }\n\n  // Language swapping\n  const swapLanguages = () => {\n    if (sourceLang === \"auto\") {\n      setErrors([\"Cannot swap when auto-detect is selected\"])\n      return\n    }\n    \n    setSourceLang(targetLang)\n    setTargetLang(sourceLang)\n    setSourceText(translatedText)\n    setTranslatedText(sourceText)\n    setLastAction(\"Languages swapped\")\n  }\n\n  // Utility functions\n  const getLanguageName = (code: string) => {\n    return LANGUAGES.find(lang => lang.code === code)?.name || code\n  }\n\n  const copyToClipboard = async (text: string, label: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setLastAction(`${label} copied to clipboard`)\n      toast.success(`${label} copied!`)\n    } catch (error) {\n      setErrors([`Failed to copy ${label.toLowerCase()}`])\n    }\n  }\n\n  const clearAll = () => {\n    setSourceText(\"\")\n    setTranslatedText(\"\")\n    setErrors([])\n    setLastAction(\"Text cleared\")\n  }\n\n  const filteredHistory = history.filter(item =>\n    item.sourceText.toLowerCase().includes(historySearch.toLowerCase()) ||\n    item.translatedText.toLowerCase().includes(historySearch.toLowerCase())\n  )\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header - Clean and purposeful */}\n      <header className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Translator</h1>\n          <p className=\"text-sm text-gray-600 mt-1\">Fast, accurate translations with specialized terminology</p>\n        </div>\n      </header>\n\n      <main className=\"max-w-4xl mx-auto px-4 py-6 space-y-6\">\n        {/* System Status - Always visible for transparency */}\n        <Card className=\"border-gray-200\">\n          <CardContent className=\"pt-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-2 h-2 rounded-full ${isTranslating ? 'bg-yellow-500' : errors.length > 0 ? 'bg-red-500' : 'bg-green-500'}`} />\n                <span className=\"text-sm text-gray-700\">\n                  {isTranslating ? \"Translating...\" : errors.length > 0 ? \"Error\" : \"Ready\"}\n                </span>\n                {lastAction && <span className=\"text-xs text-gray-500\">• {lastAction}</span>}\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-xs text-gray-500\">Auto-translate:</span>\n                <Switch \n                  checked={realTimeEnabled} \n                  onCheckedChange={setRealTimeEnabled}\n                  className=\"data-[state=checked]:bg-blue-600\"\n                />\n              </div>\n            </div>\n            \n            {isTranslating && (\n              <Progress value={translationProgress} className=\"mt-3 h-1\" />\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Error Messages - Nielsen principle of clear error communication */}\n        {errors.length > 0 && (\n          <Alert className=\"border-red-200 bg-red-50\">\n            <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n            <AlertDescription className=\"text-red-700\">\n              {errors.map((error, index) => (\n                <div key={index}>{error}</div>\n              ))}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Main Translation Interface - Primary task focus */}\n        <Card className=\"border-gray-200\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg font-medium\">Translation</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <Select value={selectedDomain} onValueChange={setSelectedDomain}>\n                  <SelectTrigger className=\"w-40 h-8 text-xs\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {DOMAINS.map(domain => (\n                      <SelectItem key={domain.code} value={domain.code}>\n                        <div>\n                          <div className=\"font-medium\">{domain.name}</div>\n                          <div className=\"text-xs text-gray-500\">{domain.description}</div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Language Selection - Clear and consistent */}\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"source-lang\" className=\"text-xs font-medium text-gray-700 mb-1 block\">From</Label>\n                <Select value={sourceLang} onValueChange={setSourceLang}>\n                  <SelectTrigger id=\"source-lang\" className=\"h-9\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {LANGUAGES.map(lang => (\n                      <SelectItem key={lang.code} value={lang.code}>{lang.name}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={swapLanguages}\n                disabled={sourceLang === \"auto\"}\n                className=\"mt-5 p-2\"\n                title=\"Swap languages\"\n              >\n                <ArrowUpDown className=\"h-4 w-4\" />\n              </Button>\n              \n              <div className=\"flex-1\">\n                <Label htmlFor=\"target-lang\" className=\"text-xs font-medium text-gray-700 mb-1 block\">To</Label>\n                <Select value={targetLang} onValueChange={setTargetLang}>\n                  <SelectTrigger id=\"target-lang\" className=\"h-9\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {LANGUAGES.filter(lang => lang.code !== \"auto\").map(lang => (\n                      <SelectItem key={lang.code} value={lang.code}>{lang.name}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Translation Areas - Side by side for easy comparison */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"source-text\" className=\"text-sm font-medium text-gray-700\">\n                    {getLanguageName(sourceLang)}\n                  </Label>\n                  <span className=\"text-xs text-gray-500\">{sourceText.length} characters</span>\n                </div>\n                <Textarea\n                  id=\"source-text\"\n                  value={sourceText}\n                  onChange={(e) => handleSourceTextChange(e.target.value)}\n                  placeholder=\"Enter text to translate...\"\n                  className=\"h-32 resize-none border-gray-300 focus:border-blue-500\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-sm font-medium text-gray-700\">\n                    {getLanguageName(targetLang)}\n                  </Label>\n                  <div className=\"flex items-center space-x-1\">\n                    <span className=\"text-xs text-gray-500\">{translatedText.length} characters</span>\n                    {translatedText && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(translatedText, \"Translation\")}\n                        className=\"h-6 w-6 p-0\"\n                        title=\"Copy translation\"\n                      >\n                        <Copy className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <Textarea\n                    value={translatedText}\n                    readOnly\n                    placeholder={isTranslating ? \"Translating...\" : \"Translation will appear here\"}\n                    className=\"h-32 resize-none bg-gray-50 border-gray-300\"\n                  />\n                  {isTranslating && (\n                    <div className=\"absolute inset-0 bg-gray-50 bg-opacity-75 flex items-center justify-center\">\n                      <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n                        <span>Translating...</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons - Essential actions only */}\n            <div className=\"flex items-center justify-between pt-2\">\n              <div className=\"flex items-center space-x-2\">\n                {!realTimeEnabled && (\n                  <Button\n                    onClick={() => translateText(sourceText, sourceLang, targetLang)}\n                    disabled={!sourceText.trim() || isTranslating}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    Translate\n                  </Button>\n                )}\n                <Button variant=\"outline\" onClick={clearAll} disabled={!sourceText && !translatedText}>\n                  Clear\n                </Button>\n              </div>\n              \n              <Button\n                variant=\"ghost\"\n                onClick={() => setShowAdvanced(!showAdvanced)}\n                className=\"text-sm\"\n              >\n                Advanced {showAdvanced ? <ChevronUp className=\"h-4 w-4 ml-1\" /> : <ChevronDown className=\"h-4 w-4 ml-1\" />}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Advanced Features - Hidden by default to reduce complexity */}\n        {showAdvanced && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Translation History */}\n            <Card className=\"border-gray-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base font-medium flex items-center\">\n                  <History className=\"h-4 w-4 mr-2\" />\n                  History ({history.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Input\n                  value={historySearch}\n                  onChange={(e) => setHistorySearch(e.target.value)}\n                  placeholder=\"Search history...\"\n                  className=\"h-8 text-sm\"\n                />\n                <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                  {filteredHistory.slice(0, 10).map(item => (\n                    <div key={item.id} className=\"p-2 bg-gray-50 rounded text-sm\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-xs text-gray-500\">\n                          {getLanguageName(item.sourceLang)} → {getLanguageName(item.targetLang)}\n                        </span>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(item.translatedText, \"Translation\")}\n                          className=\"h-5 w-5 p-0\"\n                        >\n                          <Copy className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                      <div className=\"text-gray-700 truncate\">{item.sourceText}</div>\n                      <div className=\"text-blue-600 truncate font-medium\">{item.translatedText}</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"border-gray-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base font-medium\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => copyToClipboard(window.location.href + `?text=${encodeURIComponent(sourceText)}&from=${sourceLang}&to=${targetLang}`, \"Share link\")}\n                  disabled={!sourceText.trim()}\n                  className=\"w-full justify-start\"\n                >\n                  <Share2 className=\"h-4 w-4 mr-2\" />\n                  Share Translation\n                </Button>\n                \n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    const content = `${sourceText}\\n\\n→ ${translatedText}\\n\\nFrom: ${getLanguageName(sourceLang)}\\nTo: ${getLanguageName(targetLang)}`\n                    const blob = new Blob([content], { type: 'text/plain' })\n                    const url = URL.createObjectURL(blob)\n                    const a = document.createElement('a')\n                    a.href = url\n                    a.download = 'translation.txt'\n                    a.click()\n                    URL.revokeObjectURL(url)\n                    setLastAction(\"Translation downloaded\")\n                  }}\n                  disabled={!translatedText}\n                  className=\"w-full justify-start\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download Translation\n                </Button>\n\n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    setHistory([])\n                    setLastAction(\"History cleared\")\n                  }}\n                  disabled={history.length === 0}\n                  className=\"w-full justify-start text-red-600 hover:text-red-700\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Clear History\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Help Text - Nielsen principle of providing help */}\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardContent className=\"pt-4\">\n            <div className=\"flex items-start space-x-2\">\n              <Info className=\"h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm text-blue-700\">\n                <p className=\"font-medium mb-1\">Tips for better translations:</p>\n                <ul className=\"text-xs space-y-1\">\n                  <li>• Use complete sentences for better context</li>\n                  <li>• Select the appropriate domain for specialized terms</li>\n                  <li>• Enable auto-translate for real-time results</li>\n                  <li>• Check the translation history for previous work</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/translator-nielsen.tsx",
      "exists": false
    },
    "title": "components/translator-nielsen.tsx",
    "time": {
      "start": 1759404350814,
      "end": 1759404350816
    }
  }
}
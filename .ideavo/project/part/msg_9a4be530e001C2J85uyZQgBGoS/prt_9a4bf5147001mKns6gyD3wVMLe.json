{
  "id": "prt_9a4bf5147001mKns6gyD3wVMLe",
  "messageID": "msg_9a4be530e001C2J85uyZQgBGoS",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01SxSXPQ2XYwQcCL8Yn4zoYA",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/linguala-translator.tsx",
      "content": "\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { useSession } from \"next-auth/react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport { \n  ArrowUpDown, Copy, Download, Share2, Settings, Sparkles,\n  Zap, ZapOff, Check, BookOpen, History, Upload, FileText,\n  Search, Trash2, Plus, Volume2, ChevronRight, Globe,\n  TrendingUp, Award, Users, Palette, Brain, Target\n} from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { LingualaLogo } from \"@/components/ui/linguala-logo\"\nimport { UserProfile } from \"@/components/user-profile\"\n\n// Enhanced language data with regions and popularity\nconst LANGUAGES = [\n  { code: \"auto\", name: \"Detect language\", region: \"auto\", popular: true },\n  // Most Popular\n  { code: \"en\", name: \"English\", region: \"Global\", popular: true },\n  { code: \"es\", name: \"Spanish\", region: \"Global\", popular: true },\n  { code: \"fr\", name: \"French\", region: \"Europe\", popular: true },\n  { code: \"de\", name: \"German\", region: \"Europe\", popular: true },\n  { code: \"it\", name: \"Italian\", region: \"Europe\", popular: true },\n  { code: \"pt\", name: \"Portuguese\", region: \"Global\", popular: true },\n  { code: \"ru\", name: \"Russian\", region: \"Europe\", popular: true },\n  { code: \"ja\", name: \"Japanese\", region: \"Asia\", popular: true },\n  { code: \"ko\", name: \"Korean\", region: \"Asia\", popular: true },\n  { code: \"zh\", name: \"Chinese\", region: \"Asia\", popular: true },\n  { code: \"ar\", name: \"Arabic\", region: \"Middle East\", popular: true },\n  { code: \"hi\", name: \"Hindi\", region: \"Asia\", popular: true },\n  \n  // European Languages\n  { code: \"da\", name: \"Danish\", region: \"Europe\", popular: false },\n  { code: \"sv\", name: \"Swedish\", region: \"Europe\", popular: false },\n  { code: \"no\", name: \"Norwegian\", region: \"Europe\", popular: false },\n  { code: \"fi\", name: \"Finnish\", region: \"Europe\", popular: false },\n  { code: \"nl\", name: \"Dutch\", region: \"Europe\", popular: false },\n  { code: \"pl\", name: \"Polish\", region: \"Europe\", popular: false },\n  { code: \"cs\", name: \"Czech\", region: \"Europe\", popular: false },\n  { code: \"hu\", name: \"Hungarian\", region: \"Europe\", popular: false },\n  { code: \"ro\", name: \"Romanian\", region: \"Europe\", popular: false },\n  { code: \"bg\", name: \"Bulgarian\", region: \"Europe\", popular: false },\n  { code: \"hr\", name: \"Croatian\", region: \"Europe\", popular: false },\n  { code: \"sk\", name: \"Slovak\", region: \"Europe\", popular: false },\n  { code: \"sl\", name: \"Slovenian\", region: \"Europe\", popular: false },\n  { code: \"et\", name: \"Estonian\", region: \"Europe\", popular: false },\n  { code: \"lv\", name: \"Latvian\", region: \"Europe\", popular: false },\n  { code: \"lt\", name: \"Lithuanian\", region: \"Europe\", popular: false },\n  { code: \"el\", name: \"Greek\", region: \"Europe\", popular: false },\n  { code: \"tr\", name: \"Turkish\", region: \"Europe\", popular: false },\n  \n  // Asian Languages  \n  { code: \"th\", name: \"Thai\", region: \"Asia\", popular: false },\n  { code: \"vi\", name: \"Vietnamese\", region: \"Asia\", popular: false },\n  { code: \"ms\", name: \"Malay\", region: \"Asia\", popular: false },\n  { code: \"id\", name: \"Indonesian\", region: \"Asia\", popular: false },\n  { code: \"tl\", name: \"Filipino\", region: \"Asia\", popular: false },\n]\n\nconst DOMAINS = [\n  { \n    code: \"general\", \n    name: \"General\", \n    description: \"Everyday conversations and general content\",\n    icon: Globe,\n    color: \"bg-blue-500\"\n  },\n  { \n    code: \"technical\", \n    name: \"Technology\", \n    description: \"Software, IT, engineering, and technical documentation\",\n    icon: Brain,\n    color: \"bg-purple-500\"\n  },\n  { \n    code: \"medical\", \n    name: \"Medical\", \n    description: \"Healthcare, pharmaceuticals, medical research\",\n    icon: Award,\n    color: \"bg-green-500\"\n  },\n  { \n    code: \"legal\", \n    name: \"Legal\", \n    description: \"Contracts, legal documents, regulatory content\",\n    icon: Target,\n    color: \"bg-red-500\"\n  },\n  { \n    code: \"business\", \n    name: \"Business\", \n    description: \"Finance, marketing, corporate communications\",\n    icon: TrendingUp,\n    color: \"bg-orange-500\"\n  },\n  { \n    code: \"academic\", \n    name: \"Academic\", \n    description: \"Research papers, educational content, scholarly articles\",\n    icon: Users,\n    color: \"bg-indigo-500\"\n  },\n  { \n    code: \"creative\", \n    name: \"Creative\", \n    description: \"Literature, marketing copy, creative writing\",\n    icon: Palette,\n    color: \"bg-pink-500\"\n  }\n]\n\ninterface TranslationHistory {\n  id: string\n  sourceText: string\n  translatedText: string\n  sourceLang: string\n  targetLang: string\n  domain: string\n  timestamp: number\n}\n\ninterface GlossaryEntry {\n  id: string\n  source: string\n  target: string\n  domain: string\n  notes?: string\n}\n\nexport default function LingualaTranslator() {\n  const { data: session, status } = useSession()\n  \n  // Core translation state\n  const [sourceText, setSourceText] = useState(\"\")\n  const [translatedText, setTranslatedText] = useState(\"\")\n  const [sourceLang, setSourceLang] = useState(\"auto\")\n  const [targetLang, setTargetLang] = useState(\"en\")\n  const [selectedDomain, setSelectedDomain] = useState(\"general\")\n  const [isTranslating, setIsTranslating] = useState(false)\n  const [translationProgress, setTranslationProgress] = useState(0)\n\n  // UI state\n  const [realTimeEnabled, setRealTimeEnabled] = useState(true)\n  const [copySuccess, setCopySuccess] = useState(false)\n  const [showGlossary, setShowGlossary] = useState(false)\n  const [showHistory, setShowHistory] = useState(false)\n  const [showSettings, setShowSettings] = useState(false)\n  const [translationMode, setTranslationMode] = useState<'text' | 'document'>('text')\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null)\n  const [isProcessingDocument, setIsProcessingDocument] = useState(false)\n\n  // Data state\n  const [history, setHistory] = useState<TranslationHistory[]>([])\n  const [glossary, setGlossary] = useState<GlossaryEntry[]>([])\n  const [historySearch, setHistorySearch] = useState(\"\")\n  const [newGlossaryEntry, setNewGlossaryEntry] = useState({ source: \"\", target: \"\", notes: \"\" })\n\n  const debounceRef = useRef<NodeJS.Timeout>()\n\n  // Load data from localStorage or database\n  useEffect(() => {\n    if (session?.user) {\n      // Load from database for authenticated users\n      loadUserData()\n    } else {\n      // Load from localStorage for anonymous users\n      const savedHistory = localStorage.getItem(\"linguala-history\")\n      if (savedHistory) setHistory(JSON.parse(savedHistory))\n      \n      const savedGlossary = localStorage.getItem(\"linguala-glossary\")\n      if (savedGlossary) setGlossary(JSON.parse(savedGlossary))\n    }\n\n    // Handle shared URLs\n    const urlParams = new URLSearchParams(window.location.search)\n    const sharedText = urlParams.get('text')\n    const sharedFrom = urlParams.get('from')\n    const sharedTo = urlParams.get('to')\n    \n    if (sharedText && sharedFrom && sharedTo) {\n      setSourceText(sharedText)\n      setSourceLang(sharedFrom)\n      setTargetLang(sharedTo)\n      setTimeout(() => translateText(sharedText, sharedFrom, sharedTo), 100)\n      window.history.replaceState({}, '', window.location.pathname)\n    }\n  }, [session])\n\n  // Save data\n  useEffect(() => {\n    if (!session?.user) {\n      // Save to localStorage for anonymous users\n      localStorage.setItem(\"linguala-history\", JSON.stringify(history))\n    }\n  }, [history, session])\n\n  useEffect(() => {\n    if (!session?.user) {\n      localStorage.setItem(\"linguala-glossary\", JSON.stringify(glossary))\n    }\n  }, [glossary, session])\n\n  const loadUserData = async () => {\n    try {\n      const [historyRes, glossaryRes] = await Promise.all([\n        fetch('/api/translations'),\n        fetch('/api/glossary')\n      ])\n      \n      if (historyRes.ok) {\n        const { translations } = await historyRes.json()\n        setHistory(translations.map((t: any) => ({\n          id: t.id,\n          sourceText: t.sourceText,\n          translatedText: t.translatedText,\n          sourceLang: t.sourceLang,\n          targetLang: t.targetLang,\n          domain: t.domain,\n          timestamp: new Date(t.createdAt).getTime()\n        })))\n      }\n      \n      if (glossaryRes.ok) {\n        const { glossaryEntries } = await glossaryRes.json()\n        setGlossary(glossaryEntries.map((g: any) => ({\n          id: g.id,\n          source: g.source,\n          target: g.target,\n          domain: g.domain,\n          notes: g.notes\n        })))\n      }\n    } catch (error) {\n      console.error('Failed to load user data:', error)\n    }\n  }\n\n  const translateText = async (text: string, from: string, to: string) => {\n    if (!text.trim()) {\n      setTranslatedText(\"\")\n      return\n    }\n\n    setIsTranslating(true)\n    setTranslationProgress(0)\n    \n    // Simulate progress for better UX\n    const progressInterval = setInterval(() => {\n      setTranslationProgress(prev => Math.min(prev + Math.random() * 30, 90))\n    }, 200)\n\n    try {\n      const response = await fetch(\"/api/translate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          text: text.trim(),\n          sourceLang: from,\n          targetLang: to,\n          domain: selectedDomain,\n          glossary: glossary.filter(entry => \n            entry.domain === selectedDomain || entry.domain === 'general'\n          )\n        }),\n      })\n\n      if (!response.ok) throw new Error(\"Translation failed\")\n\n      const data = await response.json()\n      setTranslatedText(data.translatedText)\n      setTranslationProgress(100)\n\n      // Save to history\n      const historyItem: TranslationHistory = {\n        id: Date.now().toString(),\n        sourceText: text.trim(),\n        translatedText: data.translatedText,\n        sourceLang: from,\n        targetLang: to,\n        domain: selectedDomain,\n        timestamp: Date.now(),\n      }\n      \n      setHistory(prev => [historyItem, ...prev.slice(0, 99)])\n\n      // Save to database if authenticated\n      if (session?.user) {\n        fetch('/api/translations', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            sourceText: text.trim(),\n            translatedText: data.translatedText,\n            sourceLang: from,\n            targetLang: to,\n            domain: selectedDomain\n          })\n        }).catch(console.error)\n      }\n\n    } catch (error) {\n      console.error(\"Translation error:\", error)\n      toast.error(\"Translation failed. Please try again.\")\n    } finally {\n      clearInterval(progressInterval)\n      setIsTranslating(false)\n      setTranslationProgress(0)\n    }\n  }\n\n  const handleSourceTextChange = (text: string) => {\n    setSourceText(text)\n    \n    if (realTimeEnabled && text.trim()) {\n      if (debounceRef.current) clearTimeout(debounceRef.current)\n      debounceRef.current = setTimeout(() => {\n        translateText(text, sourceLang, targetLang)\n      }, 800)\n    }\n  }\n\n  const swapLanguages = () => {\n    if (sourceLang === \"auto\") return\n    \n    setSourceLang(targetLang)\n    setTargetLang(sourceLang)\n    setSourceText(translatedText)\n    setTranslatedText(sourceText)\n  }\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopySuccess(true)\n      toast.success(\"Copied to clipboard!\")\n      setTimeout(() => setCopySuccess(false), 2000)\n    } catch (error) {\n      toast.error(\"Failed to copy text\")\n    }\n  }\n\n  const playAudio = (text: string, lang: string) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text)\n      utterance.lang = lang\n      speechSynthesis.speak(utterance)\n    }\n  }\n\n  const addGlossaryEntry = async () => {\n    if (!newGlossaryEntry.source.trim() || !newGlossaryEntry.target.trim()) {\n      toast.error(\"Source and target terms are required\")\n      return\n    }\n\n    const entry: GlossaryEntry = {\n      id: Date.now().toString(),\n      source: newGlossaryEntry.source.trim(),\n      target: newGlossaryEntry.target.trim(),\n      domain: selectedDomain,\n      notes: newGlossaryEntry.notes.trim() || undefined\n    }\n\n    setGlossary(prev => [...prev, entry])\n    setNewGlossaryEntry({ source: \"\", target: \"\", notes: \"\" })\n    toast.success(\"Glossary entry added!\")\n\n    // Save to database if authenticated\n    if (session?.user) {\n      fetch('/api/glossary', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          source: entry.source,\n          target: entry.target,\n          domain: entry.domain,\n          notes: entry.notes\n        })\n      }).catch(console.error)\n    }\n  }\n\n  const removeGlossaryEntry = async (id: string) => {\n    setGlossary(prev => prev.filter(entry => entry.id !== id))\n    toast.success(\"Glossary entry removed!\")\n\n    if (session?.user) {\n      fetch(`/api/glossary?id=${id}`, { method: 'DELETE' }).catch(console.error)\n    }\n  }\n\n  const getLanguageName = (code: string) => {\n    return LANGUAGES.find(lang => lang.code === code)?.name || code\n  }\n\n  const getDomainInfo = (code: string) => {\n    return DOMAINS.find(domain => domain.code === code) || DOMAINS[0]\n  }\n\n  const filteredHistory = history.filter(item =>\n    item.sourceText.toLowerCase().includes(historySearch.toLowerCase()) ||\n    item.translatedText.toLowerCase().includes(historySearch.toLowerCase()) ||\n    getLanguageName(item.sourceLang).toLowerCase().includes(historySearch.toLowerCase()) ||\n    getLanguageName(item.targetLang).toLowerCase().includes(historySearch.toLowerCase())\n  )\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/50\">\n      {/* Premium Header */}\n      <header className=\"bg-white/80 backdrop-blur-lg border-b border-gray-200/50 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <LingualaLogo size=\"lg\" />\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Stats for authenticated users */}\n              {session?.user && (\n                <div className=\"hidden md:flex items-center space-x-4 text-sm text-gray-600\">\n                  <div className=\"flex items-center space-x-1\">\n                    <History className=\"h-4 w-4\" />\n                    <span>{history.length} translations</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <BookOpen className=\"h-4 w-4\" />\n                    <span>{glossary.length} terms</span>\n                  </div>\n                </div>\n              )}\n              \n              <UserProfile />\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Hero Section with Domain Selection */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n            Professional AI Translation\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-6 max-w-2xl mx-auto\">\n            Translate with domain expertise, custom glossaries, and enterprise-grade accuracy\n          </p>\n          \n          {/* Domain Quick Selection */}\n          <div className=\"flex flex-wrap justify-center gap-3 mb-8\">\n            {DOMAINS.map(domain => {\n              const IconComponent = domain.icon\n              return (\n                <Button\n                  key={domain.code}\n                  variant={selectedDomain === domain.code ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedDomain(domain.code)}\n                  className={`flex items-center space-x-2 transition-all duration-200 ${\n                    selectedDomain === domain.code \n                      ? `${domain.color} text-white hover:opacity-90` \n                      : \"hover:scale-105\"\n                  }`}\n                >\n                  <IconComponent className=\"h-4 w-4\" />\n                  <span>{domain.name}</span>\n                </Button>\n              )\n            })}\n          </div>\n        </div>\n\n        {/* Main Translation Interface */}\n        <Card className=\"shadow-2xl border-0 bg-white/95 backdrop-blur-sm mb-8\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                {/* Real-time toggle */}\n                <div className=\"flex items-center space-x-2\">\n                  {realTimeEnabled ? \n                    <Zap className=\"h-4 w-4 text-emerald-500\" /> : \n                    <ZapOff className=\"h-4 w-4 text-gray-400\" />\n                  }\n                  <span className=\"text-sm font-medium\">Real-time</span>\n                  <Switch \n                    checked={realTimeEnabled} \n                    onCheckedChange={setRealTimeEnabled}\n                  />\n                </div>\n\n                {/* Current domain */}\n                <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n                  <div className={`w-2 h-2 rounded-full ${getDomainInfo(selectedDomain).color}`} />\n                  <span>{getDomainInfo(selectedDomain).name}</span>\n                </Badge>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex items-center space-x-2\">\n                <Dialog open={showGlossary} onOpenChange={setShowGlossary}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <BookOpen className=\"h-4 w-4 mr-2\" />\n                      Glossary\n                      <Badge variant=\"secondary\" className=\"ml-2\">{glossary.length}</Badge>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle className=\"flex items-center space-x-2\">\n                        <BookOpen className=\"h-5 w-5\" />\n                        <span>Custom Glossary</span>\n                      </DialogTitle>\n                    </DialogHeader>\n                    <Tabs defaultValue=\"manage\" className=\"w-full\">\n                      <TabsList>\n                        <TabsTrigger value=\"manage\">Manage Terms</TabsTrigger>\n                        <TabsTrigger value=\"add\">Add New Term</TabsTrigger>\n                      </TabsList>\n                      <TabsContent value=\"manage\" className=\"space-y-4\">\n                        <div className=\"grid gap-4 max-h-96 overflow-y-auto\">\n                          {glossary.length === 0 ? (\n                            <div className=\"text-center py-12\">\n                              <BookOpen className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                              <p className=\"text-gray-500\">No glossary entries yet.</p>\n                              <p className=\"text-sm text-gray-400\">Add custom terms to improve translation accuracy.</p>\n                            </div>\n                          ) : (\n                            glossary.map(entry => (\n                              <div key={entry.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center space-x-3\">\n                                    <span className=\"font-medium text-gray-900\">{entry.source}</span>\n                                    <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n                                    <span className=\"text-blue-600 font-medium\">{entry.target}</span>\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      {getDomainInfo(entry.domain).name}\n                                    </Badge>\n                                  </div>\n                                  {entry.notes && (\n                                    <p className=\"text-sm text-gray-600 mt-1\">{entry.notes}</p>\n                                  )}\n                                </div>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => removeGlossaryEntry(entry.id)}\n                                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            ))\n                          )}\n                        </div>\n                      </TabsContent>\n                      <TabsContent value=\"add\" className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"source-term\">Source Term</Label>\n                            <Input\n                              id=\"source-term\"\n                              value={newGlossaryEntry.source}\n                              onChange={(e) => setNewGlossaryEntry(prev => ({ ...prev, source: e.target.value }))}\n                              placeholder=\"Enter source term\"\n                              className=\"mt-1\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"target-term\">Target Term</Label>\n                            <Input\n                              id=\"target-term\"\n                              value={newGlossaryEntry.target}\n                              onChange={(e) => setNewGlossaryEntry(prev => ({ ...prev, target: e.target.value }))}\n                              placeholder=\"Enter target term\"\n                              className=\"mt-1\"\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"notes\">Context & Notes</Label>\n                          <Input\n                            id=\"notes\"\n                            value={newGlossaryEntry.notes}\n                            onChange={(e) => setNewGlossaryEntry(prev => ({ ...prev, notes: e.target.value }))}\n                            placeholder=\"Add context, usage notes, or examples\"\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        <Button onClick={addGlossaryEntry} className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add to Glossary\n                        </Button>\n                      </TabsContent>\n                    </Tabs>\n                  </DialogContent>\n                </Dialog>\n\n                <Dialog open={showHistory} onOpenChange={setShowHistory}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <History className=\"h-4 w-4 mr-2\" />\n                      History\n                      <Badge variant=\"secondary\" className=\"ml-2\">{history.length}</Badge>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle className=\"flex items-center space-x-2\">\n                        <History className=\"h-5 w-5\" />\n                        <span>Translation History</span>\n                      </DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"relative flex-1\">\n                          <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                          <Input\n                            value={historySearch}\n                            onChange={(e) => setHistorySearch(e.target.value)}\n                            placeholder=\"Search translations...\"\n                            className=\"pl-10\"\n                          />\n                        </div>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setHistory([])}\n                          className=\"text-red-600 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-2\" />\n                          Clear All\n                        </Button>\n                      </div>\n                      \n                      <div className=\"grid gap-3 max-h-96 overflow-y-auto\">\n                        {filteredHistory.length === 0 ? (\n                          <div className=\"text-center py-12\">\n                            <History className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                            <p className=\"text-gray-500\">\n                              {historySearch ? \"No matching translations found.\" : \"No translation history yet.\"}\n                            </p>\n                          </div>\n                        ) : (\n                          filteredHistory.map(item => (\n                            <div key={item.id} className=\"p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                                  <span className=\"font-medium\">{getLanguageName(item.sourceLang)}</span>\n                                  <ChevronRight className=\"h-3 w-3\" />\n                                  <span className=\"font-medium\">{getLanguageName(item.targetLang)}</span>\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {getDomainInfo(item.domain).name}\n                                  </Badge>\n                                  <span>•</span>\n                                  <span>{new Date(item.timestamp).toLocaleDateString()}</span>\n                                </div>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => copyToClipboard(item.translatedText)}\n                                >\n                                  <Copy className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                              <div className=\"space-y-1\">\n                                <p className=\"text-sm text-gray-700\">{item.sourceText}</p>\n                                <p className=\"text-sm text-blue-600 font-medium\">{item.translatedText}</p>\n                              </div>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            {/* Language Selection */}\n            <div className=\"flex items-center justify-center space-x-4\">\n              <Select value={sourceLang} onValueChange={(value) => {\n                setSourceLang(value)\n                if (sourceText.trim()) translateText(sourceText, value, targetLang)\n              }}>\n                <SelectTrigger className=\"w-48 h-12 border-2 border-gray-200 hover:border-blue-400 focus:border-blue-500 transition-colors\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <div className=\"p-2\">\n                    <div className=\"text-xs font-semibold text-gray-500 mb-2\">POPULAR</div>\n                    {LANGUAGES.filter(lang => lang.popular).map(lang => (\n                      <SelectItem key={lang.code} value={lang.code} className=\"flex items-center\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span>{lang.name}</span>\n                          {lang.region !== \"auto\" && (\n                            <Badge variant=\"outline\" className=\"text-xs\">{lang.region}</Badge>\n                          )}\n                        </div>\n                      </SelectItem>\n                    ))}\n                    <Separator className=\"my-2\" />\n                    <div className=\"text-xs font-semibold text-gray-500 mb-2\">ALL LANGUAGES</div>\n                    {LANGUAGES.filter(lang => !lang.popular).map(lang => (\n                      <SelectItem key={lang.code} value={lang.code}>\n                        <div className=\"flex items-center space-x-2\">\n                          <span>{lang.name}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">{lang.region}</Badge>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </div>\n                </SelectContent>\n              </Select>\n\n              <Button\n                variant=\"ghost\"\n                size=\"lg\"\n                onClick={swapLanguages}\n                disabled={sourceLang === \"auto\"}\n                className=\"p-3 rounded-full hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 hover:scale-110 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <ArrowUpDown className=\"h-5 w-5\" />\n              </Button>\n\n              <Select value={targetLang} onValueChange={(value) => {\n                setTargetLang(value)\n                if (sourceText.trim()) translateText(sourceText, sourceLang, value)\n              }}>\n                <SelectTrigger className=\"w-48 h-12 border-2 border-gray-200 hover:border-blue-400 focus:border-blue-500 transition-colors\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <div className=\"p-2\">\n                    <div className=\"text-xs font-semibold text-gray-500 mb-2\">POPULAR</div>\n                    {LANGUAGES.filter(lang => lang.popular && lang.code !== \"auto\").map(lang => (\n                      <SelectItem key={lang.code} value={lang.code}>\n                        <div className=\"flex items-center space-x-2\">\n                          <span>{lang.name}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">{lang.region}</Badge>\n                        </div>\n                      </SelectItem>\n                    ))}\n                    <Separator className=\"my-2\" />\n                    <div className=\"text-xs font-semibold text-gray-500 mb-2\">ALL LANGUAGES</div>\n                    {LANGUAGES.filter(lang => !lang.popular && lang.code !== \"auto\").map(lang => (\n                      <SelectItem key={lang.code} value={lang.code}>\n                        <div className=\"flex items-center space-x-2\">\n                          <span>{lang.name}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">{lang.region}</Badge>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </div>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Translation Areas */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Source Text */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-base font-semibold text-gray-700 flex items-center space-x-2\">\n                    <Globe className=\"h-4 w-4\" />\n                    <span>{getLanguageName(sourceLang)}</span>\n                  </Label>\n                  {sourceText && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => playAudio(sourceText, sourceLang)}\n                      className=\"text-gray-500 hover:text-blue-600\"\n                    >\n                      <Volume2 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n                <div className=\"relative\">\n                  <Textarea\n                    value={sourceText}\n                    onChange={(e) => handleSourceTextChange(e.target.value)}\n                    placeholder=\"Enter text to translate...\"\n                    className=\"min-h-[200px] text-base border-2 border-gray-200 focus:border-blue-500 transition-colors resize-none\"\n                  />\n                  <div className=\"absolute bottom-2 right-2 text-xs text-gray-400\">\n                    {sourceText.length} / 5000\n                  </div>\n                </div>\n              </div>\n\n              {/* Translated Text */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-base font-semibold text-gray-700 flex items-center space-x-2\">\n                    <Sparkles className=\"h-4 w-4\" />\n                    <span>{getLanguageName(targetLang)}</span>\n                  </Label>\n                  <div className=\"flex items-center space-x-2\">\n                    {translatedText && (\n                      <>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => playAudio(translatedText, targetLang)}\n                          className=\"text-gray-500 hover:text-blue-600\"\n                        >\n                          <Volume2 className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(translatedText)}\n                          className=\"text-gray-500 hover:text-blue-600\"\n                        >\n                          {copySuccess ? <Check className=\"h-4 w-4 text-green-600\" /> : <Copy className=\"h-4 w-4\" />}\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <Textarea\n                    value={translatedText}\n                    readOnly\n                    placeholder={isTranslating ? \"Translating...\" : \"Translation will appear here\"}\n                    className=\"min-h-[200px] text-base bg-gradient-to-br from-blue-50/50 to-indigo-50/50 border-2 border-gray-200 focus:border-blue-500 transition-colors resize-none\"\n                  />\n                  {isTranslating && translationProgress > 0 && (\n                    <div className=\"absolute bottom-2 left-2 right-2\">\n                      <div className=\"bg-white/80 rounded-full p-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Sparkles className=\"h-3 w-3 text-blue-500 animate-pulse\" />\n                          <div className=\"flex-1 bg-gray-200 rounded-full h-1\">\n                            <div \n                              className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-1 rounded-full transition-all duration-300\"\n                              style={{ width: `${translationProgress}%` }}\n                            />\n                          </div>\n                          <span className=\"text-xs text-gray-600\">{Math.round(translationProgress)}%</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Manual Translate Button for non-realtime mode */}\n            {!realTimeEnabled && sourceText.trim() && (\n              <div className=\"text-center\">\n                <Button \n                  onClick={() => translateText(sourceText, sourceLang, targetLang)}\n                  disabled={isTranslating}\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n                >\n                  {isTranslating ? (\n                    <>\n                      <Sparkles className=\"h-5 w-5 mr-2 animate-spin\" />\n                      Translating...\n                    </>\n                  ) : (\n                    <>\n                      <Sparkles className=\"h-5 w-5 mr-2\" />\n                      Translate\n                    </>\n                  )}\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <div className=\"flex justify-center space-x-4\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"shadow-lg\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem onClick={() => {\n                if (!translatedText) return toast.error(\"No translation to export\")\n                const content = `${sourceText}\\n\\n→ ${translatedText}`\n                const blob = new Blob([content], { type: 'text/plain' })\n                const url = URL.createObjectURL(blob)\n                const a = document.createElement('a')\n                a.href = url\n                a.download = 'linguala-translation.txt'\n                a.click()\n                URL.revokeObjectURL(url)\n                toast.success(\"Translation exported!\")\n              }}>\n                Export as TXT\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => {\n                if (!translatedText) return toast.error(\"No translation to export\")\n                const data = {\n                  source: { text: sourceText, language: sourceLang },\n                  target: { text: translatedText, language: targetLang },\n                  domain: selectedDomain,\n                  timestamp: new Date().toISOString()\n                }\n                const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })\n                const url = URL.createObjectURL(blob)\n                const a = document.createElement('a')\n                a.href = url\n                a.download = 'linguala-translation.json'\n                a.click()\n                URL.revokeObjectURL(url)\n                toast.success(\"Translation exported!\")\n              }}>\n                Export as JSON\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"shadow-lg\">\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                Share\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem onClick={async () => {\n                if (!translatedText) return toast.error(\"No translation to share\")\n                const params = new URLSearchParams({\n                  text: sourceText,\n                  from: sourceLang,\n                  to: targetLang\n                })\n                const shareUrl = `https://linguala.eu?${params.toString()}`\n                await copyToClipboard(shareUrl)\n                toast.success(\"Share link copied!\")\n              }}>\n                Copy Share Link\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={async () => {\n                if (!translatedText) return toast.error(\"No translation to share\")\n                const shareText = `${sourceText} → ${translatedText}\\n\\nTranslated with Linguala.eu`\n                if (navigator.share) {\n                  await navigator.share({ title: 'Linguala Translation', text: shareText })\n                } else {\n                  await copyToClipboard(shareText)\n                }\n              }}>\n                Share Translation\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </main>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/linguala-translator.tsx",
      "exists": false
    },
    "title": "components/linguala-translator.tsx",
    "time": {
      "start": 1759405741739,
      "end": 1759405741741
    }
  }
}
{
  "id": "prt_9a4ec37fd0015gpF6Gj7aOekUi",
  "messageID": "msg_9a4e9582b001t1FIJrQURl1bRK",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01QZAS1hA14zX56oWQqF51Te",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/linguala-translator.tsx",
      "content": "\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { useSession } from \"next-auth/react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  ArrowUpDown, Copy, Download, Share2, Sparkles,\n  Check, BookOpen, History, Volume2, Globe,\n  TrendingUp, Brain, Target, AlertCircle\n} from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { LingualaLogo } from \"@/components/ui/linguala-logo\"\nimport { UserProfile } from \"@/components/user-profile\"\n\n// European-focused language data\nconst LANGUAGES = [\n  { code: \"auto\", name: \"Detect language\", region: \"auto\", popular: true },\n  { code: \"en\", name: \"English\", region: \"European Standard\", popular: true },\n  { code: \"de\", name: \"German\", region: \"Central Europe\", popular: true },\n  { code: \"fr\", name: \"French\", region: \"Western Europe\", popular: true },\n  { code: \"es\", name: \"Spanish\", region: \"Southern Europe\", popular: true },\n  { code: \"it\", name: \"Italian\", region: \"Southern Europe\", popular: true },\n  { code: \"pt\", name: \"Portuguese\", region: \"Southern Europe\", popular: true },\n  { code: \"ru\", name: \"Russian\", region: \"Eastern Europe\", popular: true },\n  { code: \"pl\", name: \"Polish\", region: \"Eastern Europe\", popular: true },\n  { code: \"nl\", name: \"Dutch\", region: \"Western Europe\", popular: true }\n]\n\nexport default function LingualaTranslator() {\n  const { data: session, status } = useSession()\n  \n  // Core translation state\n  const [sourceText, setSourceText] = useState(\"\")\n  const [translatedText, setTranslatedText] = useState(\"\")\n  const [sourceLang, setSourceLang] = useState(\"auto\")\n  const [targetLang, setTargetLang] = useState(\"en\")\n  const [isTranslating, setIsTranslating] = useState(false)\n  \n  // UI state\n  const [copySuccess, setCopySuccess] = useState(false)\n\n  // Helper functions\n  const getLanguageName = (code: string) => {\n    return LANGUAGES.find(lang => lang.code === code)?.name || code\n  }\n\n  const handleSourceTextChange = (text: string) => {\n    setSourceText(text)\n    if (text.trim()) {\n      translateText(text, sourceLang, targetLang)\n    }\n  }\n\n  const translateText = async (text: string, from: string, to: string) => {\n    if (!text.trim()) return\n    \n    setIsTranslating(true)\n    try {\n      const response = await fetch('/api/translate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text, from, to })\n      })\n      \n      if (response.ok) {\n        const data = await response.json()\n        setTranslatedText(data.translatedText)\n      } else {\n        throw new Error('Translation failed')\n      }\n    } catch (error) {\n      console.error('Translation error:', error)\n      toast.error(\"Translation failed. Please try again.\")\n    } finally {\n      setIsTranslating(false)\n    }\n  }\n\n  const swapLanguages = () => {\n    if (sourceLang === \"auto\") return\n    \n    setSourceLang(targetLang)\n    setTargetLang(sourceLang)\n    setSourceText(translatedText)\n    setTranslatedText(sourceText)\n  }\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopySuccess(true)\n      toast.success(\"Copied to clipboard!\")\n      setTimeout(() => setCopySuccess(false), 2000)\n    } catch (error) {\n      toast.error(\"Failed to copy to clipboard\")\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/50\">\n      {/* Premium Header */}\n      <header className=\"bg-white/80 backdrop-blur-lg border-b border-gray-200/50 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <LingualaLogo size=\"lg\" />\n            <UserProfile />\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Main Translation Interface */}\n        <Card className=\"shadow-2xl border-0 bg-white/95 backdrop-blur-sm mb-8\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"text-center\">\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">European Translation Platform</h1>\n              <p className=\"text-gray-600\">Professional translation tools for European languages</p>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            {/* Language Selection */}\n            <div className=\"flex items-center justify-center space-x-4\">\n              <Select value={sourceLang} onValueChange={(value) => {\n                setSourceLang(value)\n                if (sourceText.trim()) translateText(sourceText, value, targetLang)\n              }}>\n                <SelectTrigger className=\"w-48 h-12 border-2 border-gray-200 hover:border-blue-400 focus:border-blue-500 transition-colors\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {LANGUAGES.map(lang => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      <div className=\"flex items-center space-x-2\">\n                        <span>{lang.name}</span>\n                        {lang.region !== \"auto\" && (\n                          <Badge variant=\"outline\" className=\"text-xs\">{lang.region}</Badge>\n                        )}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Button\n                variant=\"ghost\"\n                size=\"lg\"\n                onClick={swapLanguages}\n                disabled={sourceLang === \"auto\"}\n                className=\"p-3 rounded-full hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 hover:scale-110 disabled:opacity-50\"\n              >\n                <ArrowUpDown className=\"h-5 w-5\" />\n              </Button>\n\n              <Select value={targetLang} onValueChange={(value) => {\n                setTargetLang(value)\n                if (sourceText.trim()) translateText(sourceText, sourceLang, value)\n              }}>\n                <SelectTrigger className=\"w-48 h-12 border-2 border-gray-200 hover:border-blue-400 focus:border-blue-500 transition-colors\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {LANGUAGES.filter(lang => lang.code !== \"auto\").map(lang => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      <div className=\"flex items-center space-x-2\">\n                        <span>{lang.name}</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">{lang.region}</Badge>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Translation Areas */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Source Text */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-base font-semibold text-gray-700 flex items-center space-x-2\">\n                  <Globe className=\"h-4 w-4\" />\n                  <span>{getLanguageName(sourceLang)}</span>\n                </Label>\n                <div className=\"relative\">\n                  <Textarea\n                    value={sourceText}\n                    onChange={(e) => handleSourceTextChange(e.target.value)}\n                    placeholder=\"Enter text to translate...\"\n                    className=\"min-h-[200px] text-base border-2 border-gray-200 focus:border-blue-500 transition-colors resize-none\"\n                  />\n                  <div className=\"absolute bottom-2 right-2 flex items-center space-x-2\">\n                    <div className={`text-xs ${\n                      sourceText.length > 4500 ? 'text-red-500 font-semibold' : \n                      sourceText.length > 4000 ? 'text-orange-500' :\n                      'text-gray-400'\n                    }`}>\n                      {sourceText.length} / 5000\n                    </div>\n                    {sourceText.length > 4500 && (\n                      <AlertCircle className=\"h-4 w-4 text-red-500\" />\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Translated Text */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-base font-semibold text-gray-700 flex items-center space-x-2\">\n                    <Sparkles className=\"h-4 w-4\" />\n                    <span>{getLanguageName(targetLang)}</span>\n                  </Label>\n                  <div className=\"flex items-center space-x-2\">\n                    {translatedText && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(translatedText)}\n                        className=\"text-gray-500 hover:text-blue-600\"\n                      >\n                        {copySuccess ? <Check className=\"h-4 w-4 text-green-600\" /> : <Copy className=\"h-4 w-4\" />}\n                      </Button>\n                    )}\n                  </div>\n                </div>\n                <Textarea\n                  value={translatedText}\n                  readOnly\n                  placeholder={isTranslating ? \"Translating...\" : \"Translation will appear here\"}\n                  className=\"min-h-[200px] text-base bg-gradient-to-br from-blue-50/50 to-indigo-50/50 border-2 border-gray-200 focus:border-blue-500 transition-colors resize-none\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Features showcase for anonymous users */}\n        {!session?.user && (\n          <div className=\"max-w-4xl mx-auto mb-8\">\n            <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-8\">\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n                    Unlock Professional European Translation\n                  </h2>\n                  <p className=\"text-lg text-gray-600\">\n                    Join thousands of European professionals using advanced translation tools\n                  </p>\n                </div>\n                \n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n                  {/* Domain Expertise */}\n                  <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-200 hover:shadow-md transition-shadow\">\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"p-3 rounded-full bg-purple-500\">\n                        <Brain className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 ml-4\">Domain Expertise</h3>\n                    </div>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      7 specialized domains: Technology, Medical, Legal, Business, Academic, Creative\n                    </p>\n                  </div>\n\n                  {/* Custom Glossaries */}\n                  <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-200 hover:shadow-md transition-shadow\">\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"p-3 rounded-full bg-green-500\">\n                        <BookOpen className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 ml-4\">Custom Glossaries</h3>\n                    </div>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Build personal terminology databases for consistent professional translations\n                    </p>\n                  </div>\n\n                  {/* Translation History */}\n                  <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-200 hover:shadow-md transition-shadow\">\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"p-3 rounded-full bg-blue-500\">\n                        <History className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 ml-4\">Translation History</h3>\n                    </div>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Search and manage all your translations across devices with cloud sync\n                    </p>\n                  </div>\n\n                  {/* Export & Share */}\n                  <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-200 hover:shadow-md transition-shadow\">\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"p-3 rounded-full bg-orange-500\">\n                        <Download className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 ml-4\">Export & Share</h3>\n                    </div>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Download in multiple formats and create shareable translation links\n                    </p>\n                  </div>\n\n                  {/* Usage Analytics */}\n                  <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-200 hover:shadow-md transition-shadow\">\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"p-3 rounded-full bg-indigo-500\">\n                        <TrendingUp className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 ml-4\">Usage Analytics</h3>\n                    </div>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Track your translation patterns and improve your multilingual workflow\n                    </p>\n                  </div>\n\n                  {/* European Focus */}\n                  <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-200 hover:shadow-md transition-shadow\">\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"p-3 rounded-full bg-red-500\">\n                        <Globe className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 ml-4\">European Focus</h3>\n                    </div>\n                    <p className=\"text-gray-600 text-sm leading-relaxed\">\n                      Optimized for European languages, culture, and business contexts\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <Button \n                    onClick={() => window.location.href = '/auth/signin'}\n                    size=\"lg\"\n                    className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-8 py-4 text-lg font-semibold\"\n                  >\n                    Join Europe's Translation Platform - Free\n                  </Button>\n                  <p className=\"text-sm text-gray-500 mt-3\">\n                    Sign in to access European domain expertise, multilingual glossaries, and professional tools built for European languages.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </main>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/linguala-translator.tsx",
      "exists": true
    },
    "title": "components/linguala-translator.tsx",
    "time": {
      "start": 1759408616295,
      "end": 1759408616296
    }
  }
}
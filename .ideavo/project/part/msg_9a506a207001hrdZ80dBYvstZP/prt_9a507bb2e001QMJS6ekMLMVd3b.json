{
  "id": "prt_9a507bb2e001QMJS6ekMLMVd3b",
  "messageID": "msg_9a506a207001hrdZ80dBYvstZP",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "edit",
  "callID": "toolu_01MZAbcTXCxFi3oBekyAvits",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/auth.ts",
      "oldString": "import { NextAuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"@/lib/prisma\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport GitHubProvider from \"next-auth/providers/github\"\nimport EmailProvider from \"next-auth/providers/email\"\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    // Email provider for magic link authentication\n    EmailProvider({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST,\n        port: process.env.EMAIL_SERVER_PORT,\n        auth: {\n          user: process.env.EMAIL_SERVER_USER,\n          pass: process.env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: process.env.EMAIL_FROM,\n    }),\n    \n    // Google OAuth provider - only enable if credentials are configured\n    ...(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET ? [\n      GoogleProvider({\n        clientId: process.env.GOOGLE_CLIENT_ID,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      })\n    ] : []),\n    \n    // GitHub OAuth provider - only enable if credentials are configured\n    ...(process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET ? [\n      GitHubProvider({\n        clientId: process.env.GITHUB_CLIENT_ID,\n        clientSecret: process.env.GITHUB_CLIENT_SECRET,\n      })\n    ] : []),\n  ],",
      "newString": "import { NextAuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"@/lib/prisma\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport GitHubProvider from \"next-auth/providers/github\"\nimport EmailProvider from \"next-auth/providers/email\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    // Simple demo credentials provider for development\n    CredentialsProvider({\n      name: \"Demo Account\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\", placeholder: \"demo@linguala.eu\" }\n      },\n      async authorize(credentials) {\n        // For demo purposes, accept any email\n        if (credentials?.email) {\n          return {\n            id: \"demo-user\",\n            email: credentials.email,\n            name: credentials.email.split('@')[0],\n            image: null,\n          }\n        }\n        return null\n      }\n    }),\n    \n    // Email provider - only enable if SMTP is configured\n    ...(process.env.EMAIL_SERVER_HOST ? [\n      EmailProvider({\n        server: {\n          host: process.env.EMAIL_SERVER_HOST,\n          port: process.env.EMAIL_SERVER_PORT,\n          auth: {\n            user: process.env.EMAIL_SERVER_USER,\n            pass: process.env.EMAIL_SERVER_PASSWORD,\n          },\n        },\n        from: process.env.EMAIL_FROM,\n      })\n    ] : []),\n    \n    // Google OAuth provider - only enable if credentials are configured\n    ...(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET ? [\n      GoogleProvider({\n        clientId: process.env.GOOGLE_CLIENT_ID,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      })\n    ] : []),\n    \n    // GitHub OAuth provider - only enable if credentials are configured\n    ...(process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET ? [\n      GitHubProvider({\n        clientId: process.env.GITHUB_CLIENT_ID,\n        clientSecret: process.env.GITHUB_CLIENT_SECRET,\n      })\n    ] : []),\n  ],"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "diff": "Index: /home/user/project/lib/auth.ts\n===================================================================\n--- /home/user/project/lib/auth.ts\n+++ /home/user/project/lib/auth.ts\n@@ -3,25 +3,48 @@\n import { prisma } from \"@/lib/prisma\"\n import GoogleProvider from \"next-auth/providers/google\"\n import GitHubProvider from \"next-auth/providers/github\"\n import EmailProvider from \"next-auth/providers/email\"\n+import CredentialsProvider from \"next-auth/providers/credentials\"\n \n export const authOptions: NextAuthOptions = {\n   adapter: PrismaAdapter(prisma) as any,\n   providers: [\n-    // Email provider for magic link authentication\n-    EmailProvider({\n-      server: {\n-        host: process.env.EMAIL_SERVER_HOST,\n-        port: process.env.EMAIL_SERVER_PORT,\n-        auth: {\n-          user: process.env.EMAIL_SERVER_USER,\n-          pass: process.env.EMAIL_SERVER_PASSWORD,\n-        },\n+    // Simple demo credentials provider for development\n+    CredentialsProvider({\n+      name: \"Demo Account\",\n+      credentials: {\n+        email: { label: \"Email\", type: \"email\", placeholder: \"demo@linguala.eu\" }\n       },\n-      from: process.env.EMAIL_FROM,\n+      async authorize(credentials) {\n+        // For demo purposes, accept any email\n+        if (credentials?.email) {\n+          return {\n+            id: \"demo-user\",\n+            email: credentials.email,\n+            name: credentials.email.split('@')[0],\n+            image: null,\n+          }\n+        }\n+        return null\n+      }\n     }),\n     \n+    // Email provider - only enable if SMTP is configured\n+    ...(process.env.EMAIL_SERVER_HOST ? [\n+      EmailProvider({\n+        server: {\n+          host: process.env.EMAIL_SERVER_HOST,\n+          port: process.env.EMAIL_SERVER_PORT,\n+          auth: {\n+            user: process.env.EMAIL_SERVER_USER,\n+            pass: process.env.EMAIL_SERVER_PASSWORD,\n+          },\n+        },\n+        from: process.env.EMAIL_FROM,\n+      })\n+    ] : []),\n+    \n     // Google OAuth provider - only enable if credentials are configured\n     ...(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET ? [\n       GoogleProvider({\n         clientId: process.env.GOOGLE_CLIENT_ID,\n"
    },
    "title": "lib/auth.ts",
    "time": {
      "start": 1759410380771,
      "end": 1759410380775
    }
  }
}
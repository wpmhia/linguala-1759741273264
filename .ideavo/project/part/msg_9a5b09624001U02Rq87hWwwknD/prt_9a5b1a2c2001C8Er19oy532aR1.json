{
  "id": "prt_9a5b1a2c2001C8Er19oy532aR1",
  "messageID": "msg_9a5b09624001U02Rq87hWwwknD",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01BzoT48YL9raW8esHZ6oyym",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/linguala-translator.tsx",
      "content": "\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { useSession } from \"next-auth/react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { \n  ArrowUpDown, Copy, Volume2, Star, MoreHorizontal,\n  Check, X, Mic, Settings, History, FileText\n} from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { LingualaLogo } from \"@/components/ui/linguala-logo\"\nimport { UserProfile } from \"@/components/user-profile\"\n\n// Common languages like Google Translate\nconst LANGUAGES = [\n  { code: \"auto\", name: \"Detect language\", flag: \"🌐\" },\n  { code: \"en\", name: \"English\", flag: \"🇺🇸\" },\n  { code: \"es\", name: \"Spanish\", flag: \"🇪🇸\" },\n  { code: \"fr\", name: \"French\", flag: \"🇫🇷\" },\n  { code: \"de\", name: \"German\", flag: \"🇩🇪\" },\n  { code: \"it\", name: \"Italian\", flag: \"🇮🇹\" },\n  { code: \"pt\", name: \"Portuguese\", flag: \"🇵🇹\" },\n  { code: \"ru\", name: \"Russian\", flag: \"🇷🇺\" },\n  { code: \"ja\", name: \"Japanese\", flag: \"🇯🇵\" },\n  { code: \"ko\", name: \"Korean\", flag: \"🇰🇷\" },\n  { code: \"zh\", name: \"Chinese\", flag: \"🇨🇳\" },\n  { code: \"ar\", name: \"Arabic\", flag: \"🇸🇦\" },\n  { code: \"hi\", name: \"Hindi\", flag: \"🇮🇳\" },\n  { code: \"nl\", name: \"Dutch\", flag: \"🇳🇱\" },\n  { code: \"sv\", name: \"Swedish\", flag: \"🇸🇪\" },\n  { code: \"da\", name: \"Danish\", flag: \"🇩🇰\" },\n  { code: \"no\", name: \"Norwegian\", flag: \"🇳🇴\" },\n  { code: \"fi\", name: \"Finnish\", flag: \"🇫🇮\" },\n  { code: \"pl\", name: \"Polish\", flag: \"🇵🇱\" },\n  { code: \"cs\", name: \"Czech\", flag: \"🇨🇿\" },\n  { code: \"hu\", name: \"Hungarian\", flag: \"🇭🇺\" },\n  { code: \"tr\", name: \"Turkish\", flag: \"🇹🇷\" },\n  { code: \"th\", name: \"Thai\", flag: \"🇹🇭\" },\n  { code: \"vi\", name: \"Vietnamese\", flag: \"🇻🇳\" }\n]\n\nexport default function LingualaTranslator() {\n  const { data: session, status } = useSession()\n  \n  // Core translation state\n  const [sourceText, setSourceText] = useState(\"\")\n  const [translatedText, setTranslatedText] = useState(\"\")\n  const [sourceLang, setSourceLang] = useState(\"auto\")\n  const [targetLang, setTargetLang] = useState(\"en\")\n  const [isTranslating, setIsTranslating] = useState(false)\n  \n  // UI state\n  const [copySuccess, setCopySuccess] = useState(false)\n  const [focusedArea, setFocusedArea] = useState<'source' | 'target' | null>(null)\n\n  // Helper functions\n  const getLanguage = (code: string) => {\n    return LANGUAGES.find(lang => lang.code === code) || LANGUAGES[1]\n  }\n\n  const handleSourceTextChange = (text: string) => {\n    setSourceText(text)\n    if (text.trim()) {\n      translateText(text, sourceLang, targetLang)\n    } else {\n      setTranslatedText(\"\")\n    }\n  }\n\n  const translateText = async (text: string, from: string, to: string) => {\n    if (!text.trim()) return\n    \n    setIsTranslating(true)\n    try {\n      const response = await fetch('/api/translate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text, sourceLang: from, targetLang: to })\n      })\n      \n      if (response.ok) {\n        const data = await response.json()\n        setTranslatedText(data.translatedText)\n      } else {\n        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }))\n        console.error('Translation API error:', errorData)\n        throw new Error(errorData.error || 'Translation failed')\n      }\n    } catch (error) {\n      console.error('Translation error:', error)\n      setTranslatedText(\"Translation service temporarily unavailable. Please try again later.\")\n    } finally {\n      setIsTranslating(false)\n    }\n  }\n\n  const swapLanguages = () => {\n    if (sourceLang === \"auto\") return\n    \n    setSourceLang(targetLang)\n    setTargetLang(sourceLang)\n    setSourceText(translatedText)\n    setTranslatedText(sourceText)\n  }\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopySuccess(true)\n      toast.success(\"Copied to clipboard!\")\n      setTimeout(() => setCopySuccess(false), 2000)\n    } catch (error) {\n      toast.error(\"Failed to copy to clipboard\")\n    }\n  }\n\n  const clearText = () => {\n    setSourceText(\"\")\n    setTranslatedText(\"\")\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Google-style Header */}\n      <header className=\"border-b border-gray-200\">\n        <div className=\"max-w-screen-xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-8\">\n              <LingualaLogo size=\"md\" />\n              <nav className=\"hidden md:flex items-center space-x-6\">\n                <button className=\"text-sm text-gray-600 hover:text-gray-900 px-3 py-2 rounded hover:bg-gray-100 transition-colors\">\n                  Text\n                </button>\n                <button className=\"text-sm text-gray-600 hover:text-gray-900 px-3 py-2 rounded hover:bg-gray-100 transition-colors\">\n                  Documents\n                </button>\n                <button className=\"text-sm text-gray-600 hover:text-gray-900 px-3 py-2 rounded hover:bg-gray-100 transition-colors\">\n                  Website\n                </button>\n              </nav>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {session?.user && (\n                <button className=\"p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-full transition-colors\">\n                  <History className=\"h-5 w-5\" />\n                </button>\n              )}\n              <UserProfile />\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-screen-xl mx-auto px-6 py-8\">\n        {/* Main Translation Interface */}\n        <div className=\"bg-white\">\n          {/* Language Selection Bar */}\n          <div className=\"flex items-center justify-between mb-6 bg-gray-50 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Select value={sourceLang} onValueChange={(value) => {\n                setSourceLang(value)\n                if (sourceText.trim()) translateText(sourceText, value, targetLang)\n              }}>\n                <SelectTrigger className=\"min-w-[140px] border-0 bg-transparent hover:bg-gray-100 focus:ring-0 focus:ring-offset-0\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm\">{getLanguage(sourceLang).flag}</span>\n                    <span className=\"font-medium text-sm\">{getLanguage(sourceLang).name}</span>\n                  </div>\n                </SelectTrigger>\n                <SelectContent>\n                  {LANGUAGES.map(lang => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      <div className=\"flex items-center space-x-2\">\n                        <span>{lang.flag}</span>\n                        <span>{lang.name}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={swapLanguages}\n              disabled={sourceLang === \"auto\"}\n              className=\"p-2 rounded-full hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <ArrowUpDown className=\"h-4 w-4\" />\n            </Button>\n\n            <div className=\"flex items-center space-x-4\">\n              <Select value={targetLang} onValueChange={(value) => {\n                setTargetLang(value)\n                if (sourceText.trim()) translateText(sourceText, sourceLang, value)\n              }}>\n                <SelectTrigger className=\"min-w-[140px] border-0 bg-transparent hover:bg-gray-100 focus:ring-0 focus:ring-offset-0\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm\">{getLanguage(targetLang).flag}</span>\n                    <span className=\"font-medium text-sm\">{getLanguage(targetLang).name}</span>\n                  </div>\n                </SelectTrigger>\n                <SelectContent>\n                  {LANGUAGES.filter(lang => lang.code !== \"auto\").map(lang => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      <div className=\"flex items-center space-x-2\">\n                        <span>{lang.flag}</span>\n                        <span>{lang.name}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Translation Areas */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-0 border border-gray-200 rounded-lg overflow-hidden\">\n            {/* Source Text */}\n            <div className=\"relative\">\n              <div className=\"border-b border-gray-200 lg:border-b-0 lg:border-r\">\n                <Textarea\n                  value={sourceText}\n                  onChange={(e) => handleSourceTextChange(e.target.value)}\n                  onFocus={() => setFocusedArea('source')}\n                  onBlur={() => setFocusedArea(null)}\n                  placeholder=\"Enter text\"\n                  className=\"min-h-[300px] text-lg border-0 rounded-none resize-none focus:ring-0 focus-visible:ring-0 p-6\"\n                  style={{ fontSize: '16px', lineHeight: '1.5' }}\n                />\n                \n                {/* Source Text Controls */}\n                <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    {sourceText && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={clearText}\n                        className=\"p-2 hover:bg-gray-100 rounded-full\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    {session?.user && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"p-2 hover:bg-gray-100 rounded-full\"\n                      >\n                        <Mic className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                  \n                  <div className=\"text-xs text-gray-400\">\n                    {sourceText.length} / 5000\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Translated Text */}\n            <div className=\"relative bg-gray-50\">\n              <Textarea\n                value={translatedText}\n                readOnly\n                placeholder={isTranslating ? \"Translating...\" : \"Translation\"}\n                className=\"min-h-[300px] text-lg border-0 rounded-none resize-none focus:ring-0 focus-visible:ring-0 p-6 bg-gray-50\"\n                style={{ fontSize: '16px', lineHeight: '1.5' }}\n              />\n              \n              {/* Translation Controls */}\n              {translatedText && (\n                <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(translatedText)}\n                      className=\"p-2 hover:bg-gray-200 rounded-full\"\n                    >\n                      {copySuccess ? <Check className=\"h-4 w-4 text-green-600\" /> : <Copy className=\"h-4 w-4\" />}\n                    </Button>\n                    {session?.user && (\n                      <>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"p-2 hover:bg-gray-200 rounded-full\"\n                        >\n                          <Volume2 className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"p-2 hover:bg-gray-200 rounded-full\"\n                        >\n                          <Star className=\"h-4 w-4\" />\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                  \n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"p-2 hover:bg-gray-200 rounded-full\"\n                  >\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bottom Actions */}\n          {session?.user && (\n            <div className=\"mt-6 flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Translate a document\n                </Button>\n              </div>\n              \n              <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                <span>Powered by Linguala Translate</span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Sign-in CTA for anonymous users */}\n        {!session?.user && (\n          <div className=\"mt-12 text-center\">\n            <div className=\"bg-blue-50 rounded-lg p-8 max-w-2xl mx-auto\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n                Get more with Linguala Translate\n              </h2>\n              <p className=\"text-gray-600 mb-6\">\n                Save translations, access more languages, and get personalized suggestions.\n              </p>\n              <Button \n                onClick={() => window.location.href = '/auth/signin'}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2\"\n              >\n                Sign in\n              </Button>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/linguala-translator.tsx",
      "exists": true
    },
    "title": "components/linguala-translator.tsx",
    "time": {
      "start": 1759421555177,
      "end": 1759421555181
    }
  }
}
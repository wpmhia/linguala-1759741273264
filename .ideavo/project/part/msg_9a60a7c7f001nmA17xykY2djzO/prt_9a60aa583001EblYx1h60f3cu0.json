{
  "id": "prt_9a60aa583001EblYx1h60f3cu0",
  "messageID": "msg_9a60a7c7f001nmA17xykY2djzO",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01LyAJ89sbtDY2YjmgLaXDBA",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/auth.ts"
    },
    "output": "<file>\n00001| import { NextAuthOptions } from \"next-auth\"\n00002| import { PrismaAdapter } from \"@auth/prisma-adapter\"\n00003| import { prisma } from \"@/lib/prisma\"\n00004| import GoogleProvider from \"next-auth/providers/google\"\n00005| import EmailProvider from \"next-auth/providers/email\"\n00006| import CredentialsProvider from \"next-auth/providers/credentials\"\n00007| \n00008| export const authOptions: NextAuthOptions = {\n00009|   // Comment out adapter for JWT session strategy\n00010|   // adapter: PrismaAdapter(prisma) as any,\n00011|   providers: [\n00012|     // Email-based account creation (no password needed)\n00013|     CredentialsProvider({\n00014|       name: \"Email Account\",\n00015|       credentials: {\n00016|         email: { label: \"Email\", type: \"email\", placeholder: \"your@email.com\" }\n00017|       },\n00018|       async authorize(credentials) {\n00019|         // Accept any valid email and create account automatically\n00020|         if (credentials?.email && credentials.email.includes('@')) {\n00021|           const emailParts = credentials.email.split('@')\n00022|           const username = emailParts[0]\n00023|           const domain = emailParts[1]\n00024|           \n00025|           return {\n00026|             id: `email_${credentials.email.replace(/[^a-zA-Z0-9]/g, '_')}`,\n00027|             email: credentials.email,\n00028|             name: username.charAt(0).toUpperCase() + username.slice(1),\n00029|             image: null,\n00030|           }\n00031|         }\n00032|         return null\n00033|       }\n00034|     }),\n00035|     \n00036|     // Email provider - only enable if SMTP is configured\n00037|     ...(process.env.EMAIL_SERVER_HOST ? [\n00038|       EmailProvider({\n00039|         server: {\n00040|           host: process.env.EMAIL_SERVER_HOST,\n00041|           port: process.env.EMAIL_SERVER_PORT,\n00042|           auth: {\n00043|             user: process.env.EMAIL_SERVER_USER,\n00044|             pass: process.env.EMAIL_SERVER_PASSWORD,\n00045|           },\n00046|         },\n00047|         from: process.env.EMAIL_FROM,\n00048|       })\n00049|     ] : []),\n00050|     \n00051|     // Google OAuth provider - only enable if credentials are configured\n00052|     ...(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET ? [\n00053|       GoogleProvider({\n00054|         clientId: process.env.GOOGLE_CLIENT_ID,\n00055|         clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n00056|       })\n00057|     ] : []),\n00058|   ],\n00059|   \n00060|   session: {\n00061|     strategy: \"jwt\",\n00062|     maxAge: 30 * 24 * 60 * 60, // 30 days\n00063|   },\n00064|   \n00065|   pages: {\n00066|     signIn: '/auth/signin',\n00067|     signOut: '/auth/signout',\n00068|     error: '/auth/error',\n00069|     verifyRequest: '/auth/verify-request',\n00070|   },\n00071|   \n00072|   callbacks: {\n00073|     async jwt({ token, user, account }) {\n00074|       if (user) {\n00075|         // For new OAuth users, generate a consistent ID\n00076|         if (account?.provider === 'google') {\n00077|           token.id = `google_${user.id}`\n00078|         } else if (account?.provider === 'credentials') {\n00079|           token.id = user.id\n00080|         } else {\n00081|           token.id = user.id || `user_${Date.now()}`\n00082|         }\n00083|         token.email = user.email\n00084|         token.name = user.name\n00085|         token.image = user.image\n00086|       }\n00087|       return token\n00088|     },\n00089|     async session({ session, token }) {\n00090|       if (session?.user && token) {\n00091|         session.user.id = token.id as string\n00092|         session.user.email = token.email as string\n00093|         session.user.name = token.name as string\n00094|         session.user.image = token.image as string\n00095|       }\n00096|       return session\n00097|     },\n00098|   },\n00099|   \n00100|   events: {\n00101|     async createUser({ user }) {\n00102|       console.log(`New user created: ${user.email}`)\n00103|     },\n00104|   },\n00105| }\n</file>",
    "metadata": {
      "preview": "import { NextAuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"@/lib/prisma\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport EmailProvider from \"next-auth/providers/email\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\n\nexport const authOptions: NextAuthOptions = {\n  // Comment out adapter for JWT session strategy\n  // adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    // Email-based account creation (no password needed)\n    CredentialsProvider({\n      name: \"Email Account\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\", placeholder: \"your@email.com\" }\n      },\n      async authorize(credentials) {\n        // Accept any valid email and create account automatically\n        if (credentials?.email && credentials.email.includes('@')) {"
    },
    "title": "lib/auth.ts",
    "time": {
      "start": 1759427340057,
      "end": 1759427340059
    }
  }
}
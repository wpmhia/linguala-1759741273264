{
  "id": "prt_9a65a5af7001g2EieWHHm9TNxG",
  "messageID": "msg_9a658f325001nRPtF1CaNSll60",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01QTAYHjpN4tGtidDe6ibENz",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/auth.ts"
    },
    "output": "<file>\n00001| import { NextAuthOptions } from \"next-auth\"\n00002| import { PrismaAdapter } from \"@auth/prisma-adapter\"\n00003| import { prisma } from \"@/lib/prisma\"\n00004| import GoogleProvider from \"next-auth/providers/google\"\n00005| import EmailProvider from \"next-auth/providers/email\"\n00006| import CredentialsProvider from \"next-auth/providers/credentials\"\n00007| \n00008| export const authOptions: NextAuthOptions = {\n00009|   // Comment out adapter for JWT session strategy\n00010|   // adapter: PrismaAdapter(prisma) as any,\n00011|   providers: [\n00012|     // Email-based account creation (no password needed)\n00013|     CredentialsProvider({\n00014|       name: \"Email Account\",\n00015|       credentials: {\n00016|         email: { label: \"Email\", type: \"email\", placeholder: \"your@email.com\" }\n00017|       },\n00018|       async authorize(credentials) {\n00019|         console.log(\"Credentials provider called with:\", credentials)\n00020|         \n00021|         // Accept any valid email and create account automatically\n00022|         if (credentials?.email && credentials.email.includes('@')) {\n00023|           const emailParts = credentials.email.split('@')\n00024|           const username = emailParts[0]\n00025|           const domain = emailParts[1]\n00026|           \n00027|           const user = {\n00028|             id: `email_${credentials.email.replace(/[^a-zA-Z0-9]/g, '_')}`,\n00029|             email: credentials.email,\n00030|             name: username.charAt(0).toUpperCase() + username.slice(1),\n00031|             image: null,\n00032|           }\n00033|           \n00034|           console.log(\"Creating user:\", user)\n00035|           return user\n00036|         }\n00037|         \n00038|         console.log(\"Invalid email provided:\", credentials?.email)\n00039|         return null\n00040|       }\n00041|     }),\n00042|     \n00043|     // Email provider - only enable if SMTP is configured\n00044|     ...(process.env.EMAIL_SERVER_HOST ? [\n00045|       EmailProvider({\n00046|         server: {\n00047|           host: process.env.EMAIL_SERVER_HOST,\n00048|           port: process.env.EMAIL_SERVER_PORT,\n00049|           auth: {\n00050|             user: process.env.EMAIL_SERVER_USER,\n00051|             pass: process.env.EMAIL_SERVER_PASSWORD,\n00052|           },\n00053|         },\n00054|         from: process.env.EMAIL_FROM,\n00055|       })\n00056|     ] : []),\n00057|     \n00058|     // Google OAuth provider - only enable if credentials are configured\n00059|     ...(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET ? [\n00060|       GoogleProvider({\n00061|         clientId: process.env.GOOGLE_CLIENT_ID,\n00062|         clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n00063|       })\n00064|     ] : []),\n00065|   ],\n00066|   \n00067|   session: {\n00068|     strategy: \"jwt\",\n00069|     maxAge: 30 * 24 * 60 * 60, // 30 days\n00070|   },\n00071|   \n00072|   pages: {\n00073|     signIn: '/auth/signin',\n00074|     signOut: '/auth/signout',\n00075|     error: '/auth/error',\n00076|     verifyRequest: '/auth/verify-request',\n00077|   },\n00078|   \n00079|   callbacks: {\n00080|     async jwt({ token, user, account }) {\n00081|       if (user) {\n00082|         // For new OAuth users, generate a consistent ID\n00083|         if (account?.provider === 'google') {\n00084|           token.id = `google_${user.id}`\n00085|         } else if (account?.provider === 'credentials') {\n00086|           token.id = user.id\n00087|         } else {\n00088|           token.id = user.id || `user_${Date.now()}`\n00089|         }\n00090|         token.email = user.email\n00091|         token.name = user.name\n00092|         token.image = user.image\n00093|       }\n00094|       return token\n00095|     },\n00096|     async session({ session, token }) {\n00097|       if (session?.user && token) {\n00098|         session.user.id = token.id as string\n00099|         session.user.email = token.email as string\n00100|         session.user.name = token.name as string\n00101|         session.user.image = token.image as string\n00102|       }\n00103|       return session\n00104|     },\n00105|   },\n00106|   \n00107|   events: {\n00108|     async createUser({ user }) {\n00109|       console.log(`New user created: ${user.email}`)\n00110|     },\n00111|   },\n00112| }\n</file>",
    "metadata": {
      "preview": "import { NextAuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"@/lib/prisma\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport EmailProvider from \"next-auth/providers/email\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\n\nexport const authOptions: NextAuthOptions = {\n  // Comment out adapter for JWT session strategy\n  // adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    // Email-based account creation (no password needed)\n    CredentialsProvider({\n      name: \"Email Account\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\", placeholder: \"your@email.com\" }\n      },\n      async authorize(credentials) {\n        console.log(\"Credentials provider called with:\", credentials)\n        "
    },
    "title": "lib/auth.ts",
    "time": {
      "start": 1759432563738,
      "end": 1759432563740
    }
  }
}
{
  "id": "prt_9a65a68ec001EU9vChaIJRVykj",
  "messageID": "msg_9a658f325001nRPtF1CaNSll60",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01Qh2WW6mjXbWsThNJgPPqdt",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/auth.ts",
      "content": "import { NextAuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"@/lib/prisma\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\nimport bcrypt from \"bcryptjs\"\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    // Email/Password authentication\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email\n          }\n        })\n\n        if (!user || !user.password) {\n          return null\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password\n        )\n\n        if (!isPasswordValid) {\n          return null\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          image: user.image,\n        }\n      }\n    }),\n    \n    // Google OAuth provider\n    ...(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET ? [\n      GoogleProvider({\n        clientId: process.env.GOOGLE_CLIENT_ID,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      })\n    ] : []),\n  ],\n  \n  session: {\n    strategy: \"database\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  \n  pages: {\n    signIn: '/auth/signin',\n    signOut: '/auth/signout',\n    error: '/auth/error',\n  },\n  \n  callbacks: {\n    async session({ session, user }) {\n      if (session?.user && user) {\n        // Fetch fresh user data including premium status\n        const dbUser = await prisma.user.findUnique({\n          where: { id: user.id },\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            image: true,\n            isPremium: true,\n            premiumExpiresAt: true,\n          }\n        })\n\n        if (dbUser) {\n          session.user.id = dbUser.id\n          session.user.email = dbUser.email\n          session.user.name = dbUser.name\n          session.user.image = dbUser.image\n          // Add premium status to session\n          session.user.isPremium = dbUser.isPremium\n          session.user.premiumExpiresAt = dbUser.premiumExpiresAt\n        }\n      }\n      return session\n    },\n  },\n  \n  events: {\n    async createUser({ user }) {\n      console.log(`New user created: ${user.email}`)\n    },\n  },\n}\n\n// Helper function to register new users\nexport async function registerUser(email: string, password: string, name?: string) {\n  try {\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email }\n    })\n\n    if (existingUser) {\n      throw new Error(\"User already exists\")\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12)\n\n    // Create user\n    const user = await prisma.user.create({\n      data: {\n        email,\n        password: hashedPassword,\n        name: name || email.split('@')[0],\n        isPremium: false, // New users start with free tier\n      }\n    })\n\n    return { success: true, user: { id: user.id, email: user.email, name: user.name } }\n  } catch (error) {\n    console.error(\"Registration error:\", error)\n    return { success: false, error: error instanceof Error ? error.message : \"Registration failed\" }\n  }\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/lib/auth.ts",
      "exists": true
    },
    "title": "lib/auth.ts",
    "time": {
      "start": 1759432578093,
      "end": 1759432578095
    }
  }
}
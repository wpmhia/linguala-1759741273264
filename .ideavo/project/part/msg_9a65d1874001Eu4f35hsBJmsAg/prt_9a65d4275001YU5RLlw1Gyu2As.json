{
  "id": "prt_9a65d4275001YU5RLlw1Gyu2As",
  "messageID": "msg_9a65d1874001Eu4f35hsBJmsAg",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01PnMsZR7fEXc6hiJTmAQdoH",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/auth/signin/page.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect, Suspense } from \"react\"\nimport { signIn, getProviders } from \"next-auth/react\"\nimport { useRouter, useSearchParams } from \"next/navigation\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Mail, Chrome, AlertTriangle, CheckCircle, Eye, EyeOff } from \"lucide-react\"\nimport { LingualaLogo } from \"@/components/ui/linguala-logo\"\nimport Link from \"next/link\"\n\nfunction SignInForm() {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\"\n  })\n  const [isLoading, setIsLoading] = useState(false)\n  const [showPassword, setShowPassword] = useState(false)\n  const [showSuccess, setShowSuccess] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [providers, setProviders] = useState<any>(null)\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const urlError = searchParams.get(\"error\")\n  const message = searchParams.get(\"message\")\n  const callbackUrl = searchParams.get(\"callbackUrl\") || \"/\"\n\n  useEffect(() => {\n    const fetchProviders = async () => {\n      const res = await getProviders()\n      setProviders(res)\n    }\n    fetchProviders()\n  }, [])\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }))\n    setError(\"\") // Clear errors when user types\n  }\n\n  const handleEmailSignIn = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!formData.email || !formData.password) return\n\n    setIsLoading(true)\n    setError(\"\")\n\n    try {\n      const result = await signIn(\"credentials\", {\n        email: formData.email,\n        password: formData.password,\n        callbackUrl,\n        redirect: false,\n      })\n      \n      if (result?.ok) {\n        setShowSuccess(true)\n        setTimeout(() => {\n          router.push(callbackUrl)\n        }, 1500)\n      } else {\n        console.error(\"Authentication failed:\", result?.error)\n        setError(\"Invalid email or password\")\n      }\n    } catch (error) {\n      console.error(\"Sign in error:\", error)\n      setError(\"Something went wrong. Please try again.\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleOAuthSignIn = async (providerId: string) => {\n    setIsLoading(true)\n    try {\n      const result = await signIn(providerId, { \n        callbackUrl,\n        redirect: false \n      })\n      \n      if (result?.ok) {\n        setShowSuccess(true)\n        setTimeout(() => {\n          window.location.href = callbackUrl\n        }, 1500)\n      } else if (result?.url) {\n        // OAuth redirect\n        window.location.href = result.url\n      }\n    } catch (error) {\n      console.error(\"OAuth sign in error:\", error)\n      setIsLoading(false)\n    }\n  }\n\n  const getErrorMessage = (error: string) => {\n    switch (error) {\n      case \"OAuthSignin\":\n      case \"OAuthCallback\":\n      case \"OAuthCreateAccount\":\n      case \"EmailCreateAccount\":\n        return \"Error creating account. Please try again.\"\n      case \"OAuthAccountNotLinked\":\n        return \"Account not linked. Please sign in with the same method you used before.\"\n      case \"EmailSignin\":\n        return \"Error sending email. Please check your email address.\"\n      case \"CredentialsSignin\":\n        return \"Invalid credentials. Please check your details.\"\n      case \"SessionRequired\":\n        return \"Please sign in to access this page.\"\n      default:\n        return \"An error occurred during sign in. Please try again.\"\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <LingualaLogo size=\"lg\" />\n          </div>\n          <CardTitle className=\"text-2xl font-semibold\">Sign In to Linguala</CardTitle>\n          <CardDescription>\n            Access your translation history, custom glossaries, and premium features\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {showSuccess && (\n            <Alert className=\"border-green-200 bg-green-50\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription className=\"text-green-700\">\n                Success! Welcome back to Linguala. Redirecting...\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {message && !showSuccess && (\n            <Alert className=\"border-blue-200 bg-blue-50\">\n              <CheckCircle className=\"h-4 w-4 text-blue-600\" />\n              <AlertDescription className=\"text-blue-700\">\n                {message}\n              </AlertDescription>\n            </Alert>\n          )}\n          \n          {(error || urlError) && !showSuccess && (\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n              <AlertDescription className=\"text-red-700\">\n                {error || (urlError ? getErrorMessage(urlError) : \"\")}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* OAuth Providers */}\n          {providers && providers.google && (\n            <>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleOAuthSignIn(\"google\")}\n                disabled={isLoading || showSuccess}\n                className=\"w-full\"\n              >\n                <Chrome className=\"h-4 w-4 mr-2\" />\n                Continue with Google\n              </Button>\n\n              <div className=\"relative\">\n                <Separator />\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"bg-white px-2 text-xs text-gray-500\">or continue with email</span>\n                </div>\n              </div>\n            </>\n          )}\n\n          {/* Email/Password Sign In */}\n          <form onSubmit={handleEmailSignIn} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Email address\n              </label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                placeholder=\"Enter your email\"\n                required\n                disabled={isLoading || showSuccess}\n                className=\"w-full\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter your password\"\n                  required\n                  disabled={isLoading || showSuccess}\n                  className=\"w-full pr-10\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </button>\n              </div>\n            </div>\n            \n            <Button\n              type=\"submit\"\n              disabled={!formData.email || !formData.password || isLoading || showSuccess}\n              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n            >\n              <Mail className=\"h-4 w-4 mr-2\" />\n              {showSuccess ? \"Success!\" : isLoading ? \"Signing In...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Don't have an account?{\" \"}\n              <Link href=\"/auth/signup\" className=\"text-blue-600 hover:text-blue-500 font-medium\">\n                Sign up\n              </Link>\n            </p>\n          </div>\n\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-4\">\n            <p className=\"text-xs text-blue-800 text-center\">\n              <strong>New to Linguala?</strong> Create a free account to access premium translation features and custom glossaries!\n            </p>\n          </div>\n          \n          <div className=\"text-center text-xs text-gray-500 mt-2\">\n            By continuing, you agree to our terms of service and privacy policy.\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default function SignInPage() {\n  return (\n    <Suspense fallback={\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n            <p className=\"text-gray-600 mt-4\">Loading...</p>\n          </CardContent>\n        </Card>\n      </div>\n    }>\n      <SignInForm />\n    </Suspense>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/app/auth/signin/page.tsx",
      "exists": true
    },
    "title": "app/auth/signin/page.tsx",
    "time": {
      "start": 1759432782021,
      "end": 1759432782024
    }
  }
}
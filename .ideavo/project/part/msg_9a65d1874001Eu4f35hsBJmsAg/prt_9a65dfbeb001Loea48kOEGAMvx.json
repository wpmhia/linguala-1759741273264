{
  "id": "prt_9a65dfbeb001Loea48kOEGAMvx",
  "messageID": "msg_9a65d1874001Eu4f35hsBJmsAg",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01QkkuyQxFrR6SNF3SD4bWrZ",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/premium.ts",
      "content": "import { prisma } from \"@/lib/prisma\"\nimport { Session } from \"next-auth\"\n\n/**\n * Check if a user has active premium access\n */\nexport function isPremiumUser(session: Session | null): boolean {\n  if (!session?.user) return false\n  \n  const user = session.user\n  if (!user.isPremium) return false\n  \n  // If no expiration date, assume permanent premium\n  if (!user.premiumExpiresAt) return true\n  \n  // Check if premium hasn't expired\n  return new Date(user.premiumExpiresAt) > new Date()\n}\n\n/**\n * Get user's premium status with detailed information\n */\nexport async function getPremiumStatus(userId: string) {\n  try {\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      select: {\n        isPremium: true,\n        premiumExpiresAt: true,\n      }\n    })\n\n    if (!user) return { isPremium: false, daysRemaining: 0 }\n\n    const isPremium = user.isPremium && (!user.premiumExpiresAt || user.premiumExpiresAt > new Date())\n    const daysRemaining = user.premiumExpiresAt \n      ? Math.max(0, Math.ceil((user.premiumExpiresAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24)))\n      : isPremium ? Infinity : 0\n\n    return { isPremium, daysRemaining }\n  } catch (error) {\n    console.error(\"Error fetching premium status:\", error)\n    return { isPremium: false, daysRemaining: 0 }\n  }\n}\n\n/**\n * Grant premium access to a user\n */\nexport async function grantPremiumAccess(userId: string, durationDays?: number) {\n  try {\n    const premiumExpiresAt = durationDays \n      ? new Date(Date.now() + durationDays * 24 * 60 * 60 * 1000)\n      : null // null means permanent\n\n    await prisma.user.update({\n      where: { id: userId },\n      data: {\n        isPremium: true,\n        premiumExpiresAt,\n      }\n    })\n\n    return { success: true }\n  } catch (error) {\n    console.error(\"Error granting premium access:\", error)\n    return { success: false, error: \"Failed to grant premium access\" }\n  }\n}\n\n/**\n * Revoke premium access from a user\n */\nexport async function revokePremiumAccess(userId: string) {\n  try {\n    await prisma.user.update({\n      where: { id: userId },\n      data: {\n        isPremium: false,\n        premiumExpiresAt: null,\n      }\n    })\n\n    return { success: true }\n  } catch (error) {\n    console.error(\"Error revoking premium access:\", error)\n    return { success: false, error: \"Failed to revoke premium access\" }\n  }\n}\n\n/**\n * Premium feature limits\n */\nexport const PREMIUM_LIMITS = {\n  FREE: {\n    TRANSLATIONS_PER_DAY: 50,\n    GLOSSARY_ENTRIES: 100,\n    TRANSLATION_HISTORY_DAYS: 7,\n    BULK_TRANSLATION_MAX: 10,\n  },\n  PREMIUM: {\n    TRANSLATIONS_PER_DAY: Infinity,\n    GLOSSARY_ENTRIES: Infinity,\n    TRANSLATION_HISTORY_DAYS: Infinity,\n    BULK_TRANSLATION_MAX: 1000,\n  }\n}\n\n/**\n * Check if user can perform an action based on their premium status\n */\nexport function canPerformAction(session: Session | null, action: keyof typeof PREMIUM_LIMITS.FREE): boolean {\n  const limits = isPremiumUser(session) ? PREMIUM_LIMITS.PREMIUM : PREMIUM_LIMITS.FREE\n  return limits[action] === Infinity // For now, just check if it's unlimited\n}\n\n/**\n * Get usage limits for a user\n */\nexport function getUserLimits(session: Session | null) {\n  return isPremiumUser(session) ? PREMIUM_LIMITS.PREMIUM : PREMIUM_LIMITS.FREE\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/lib/premium.ts",
      "exists": false
    },
    "title": "lib/premium.ts",
    "time": {
      "start": 1759432814277,
      "end": 1759432814278
    }
  }
}
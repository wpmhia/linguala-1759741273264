{
  "id": "prt_9a6681ff10016A8G5Nq6EoJ2vo",
  "messageID": "msg_9a6680466001MICKQ0eec3mZKu",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01SYJr42AHGwWYFxXAdeEBWY",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/api/translate/route.ts"
    },
    "output": "<file>\n00001| import { NextRequest, NextResponse } from 'next/server'\n00002| \n00003| // Fallback translation for common phrases\n00004| function getFallbackTranslation(text: string, targetLanguage: string): string | null {\n00005|   const lowerText = text.toLowerCase().trim()\n00006|   \n00007|   const commonPhrases: Record<string, Record<string, string>> = {\n00008|     'hello': {\n00009|       'Danish': 'Hej',\n00010|       'Swedish': 'Hej', \n00011|       'Norwegian': 'Hei',\n00012|       'Finnish': 'Hei',\n00013|       'German': 'Hallo',\n00014|       'French': 'Bonjour',\n00015|       'Spanish': 'Hola',\n00016|       'Italian': 'Ciao',\n00017|       'Portuguese': 'Olá',\n00018|       'Dutch': 'Hallo',\n00019|       'Polish': 'Cześć',\n00020|       'Russian': 'Привет'\n00021|     },\n00022|     'good morning': {\n00023|       'Danish': 'God morgen',\n00024|       'Swedish': 'God morgon',\n00025|       'Norwegian': 'God morgen', \n00026|       'Finnish': 'Hyvää huomenta',\n00027|       'German': 'Guten Morgen',\n00028|       'French': 'Bonjour',\n00029|       'Spanish': 'Buenos días',\n00030|       'Dutch': 'Goedemorgen'\n00031|     },\n00032|     'thank you': {\n00033|       'Danish': 'Tak',\n00034|       'Swedish': 'Tack',\n00035|       'Norwegian': 'Takk',\n00036|       'Finnish': 'Kiitos',\n00037|       'German': 'Danke',\n00038|       'French': 'Merci',\n00039|       'Spanish': 'Gracias',\n00040|       'Dutch': 'Dank je'\n00041|     },\n00042|     'wat gaan we vanavond eten': {\n00043|       'Danish': 'Hvad skal vi spise i aften?',\n00044|       'Swedish': 'Vad ska vi äta ikväll?',\n00045|       'Finnish': 'Mitä syömme tänä iltana?',\n00046|       'German': 'Was essen wir heute Abend?',\n00047|       'French': 'Que mangeons-nous ce soir?',\n00048|       'Spanish': '¿Qué vamos a cenar esta noche?',\n00049|       'English': 'What are we going to eat tonight?',\n00050|       'Italian': 'Cosa mangiamo stasera?',\n00051|       'Portuguese': 'O que vamos comer hoje à noite?',\n00052|       'Polish': 'Co będziemy jeść dziś wieczorem?'\n00053|     },\n00054|     'wat eten we': {\n00055|       'Danish': 'Hvad spiser vi?',\n00056|       'Swedish': 'Vad äter vi?',\n00057|       'Finnish': 'Mitä syömme?',\n00058|       'German': 'Was essen wir?',\n00059|       'French': 'Que mangeons-nous?',\n00060|       'Spanish': '¿Qué comemos?',\n00061|       'English': 'What are we eating?'\n00062|     }\n00063|   }\n00064|   \n00065|   for (const [phrase, translations] of Object.entries(commonPhrases)) {\n00066|     if (lowerText.includes(phrase)) {\n00067|       return translations[targetLanguage] || null\n00068|     }\n00069|   }\n00070|   \n00071|   return null\n00072| }\n00073| \n00074| // Official EU Languages (24 languages) - Language mapping for translation API\n00075| const LANGUAGE_MAP: Record<string, string> = {\n00076|   auto: 'auto',\n00077|   \n00078|   // Popular EU Languages\n00079|   en: 'English',\n00080|   de: 'German', \n00081|   fr: 'French',\n00082|   es: 'Spanish',\n00083|   it: 'Italian',\n00084|   pt: 'Portuguese',\n00085|   pl: 'Polish',\n00086|   nl: 'Dutch',\n00087|   \n00088|   // Nordic EU Languages\n00089|   da: 'Danish',\n00090|   sv: 'Swedish',\n00091|   fi: 'Finnish',\n00092|   \n00093|   // Western EU Languages\n00094|   ga: 'Irish',\n00095|   mt: 'Maltese',\n00096|   \n00097|   // Central EU Languages\n00098|   cs: 'Czech',\n00099|   sk: 'Slovak',\n00100|   hu: 'Hungarian',\n00101|   sl: 'Slovenian',\n00102|   hr: 'Croatian',\n00103|   \n00104|   // Eastern EU Languages\n00105|   bg: 'Bulgarian',\n00106|   ro: 'Romanian',\n00107|   lt: 'Lithuanian',\n00108|   lv: 'Latvian',\n00109|   et: 'Estonian',\n00110|   \n00111|   // Southern EU Languages\n00112|   el: 'Greek',\n00113| }\n00114| \n00115| export async function POST(request: NextRequest) {\n00116|   try {\n00117|     const body = await request.json()\n00118|     console.log('Translation request body:', body)\n00119|     \n00120|     const { text, sourceLang, targetLang, domain, glossary } = body\n00121| \n00122|     if (!text || !targetLang) {\n00123|       console.log('Missing required fields:', { text: !!text, targetLang: !!targetLang })\n00124|       return NextResponse.json(\n00125|         { error: 'Text and target language are required' },\n00126|         { status: 400 }\n00127|       )\n00128|     }\n00129| \n00130|     const apiKey = process.env.DASHSCOPE_API_KEY\n00131|     if (!apiKey) {\n00132|       return NextResponse.json(\n00133|         { error: 'API key not configured. Please set DASHSCOPE_API_KEY environment variable.' },\n00134|         { status: 500 }\n00135|       )\n00136|     }\n00137| \n00138|     // Prepare the translation options\n00139|     const sourceLanguage = LANGUAGE_MAP[sourceLang] || (sourceLang === 'auto' ? 'auto' : sourceLang)\n00140|     const targetLanguage = LANGUAGE_MAP[targetLang] || targetLang\n00141| \n00142|     // Apply glossary preprocessing if provided\n00143|     let processedText = text\n00144|     if (glossary && Array.isArray(glossary)) {\n00145|       glossary.forEach((entry: any) => {\n00146|         if (entry.source && entry.target) {\n00147|           // Simple case-insensitive replacement\n00148|           const regex = new RegExp(`\\\\b${entry.source.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'gi')\n00149|           processedText = processedText.replace(regex, `[GLOSSARY:${entry.target}]`)\n00150|         }\n00151|       })\n00152|     }\n00153| \n00154|     // Add domain context to improve translation quality\n00155|     const domainContexts: Record<string, string> = {\n00156|       technical: \"This is a technical/IT translation. Focus on accurate technical terminology.\",\n00157|       medical: \"This is a medical translation. Use precise medical terminology.\",\n00158|       legal: \"This is a legal translation. Maintain formal legal language and terminology.\",\n00159|       business: \"This is a business translation. Use professional business terminology.\",\n00160|       academic: \"This is an academic translation. Use scholarly and precise language.\",\n00161|       creative: \"This is a creative translation. Maintain the tone and style of the original.\"\n00162|     }\n00163| \n00164|     // Use a more direct translation prompt approach\n00165|     try {\n00166|       const response = await fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00167|         method: 'POST',\n00168|         headers: {\n00169|           'Authorization': `Bearer ${apiKey}`,\n00170|           'Content-Type': 'application/json',\n00171|         },\n00172|         body: JSON.stringify({\n00173|           model: 'qwen-mt-turbo',\n00174|           messages: [{\n00175|             role: 'user',\n00176|             content: text\n00177|           }],\n00178|           translation_options: {\n00179|             source_lang: sourceLanguage,\n00180|             target_lang: targetLanguage\n00181|           }\n00182|         }),\n00183|       })\n00184| \n00185|       if (!response.ok) {\n00186|         const errorData = await response.text()\n00187|         console.error('Qwen API error:', response.status, errorData)\n00188|         throw new Error(`Translation API error: ${response.status}`)\n00189|       }\n00190| \n00191|       const data = await response.json()\n00192|       const translatedText = data.choices?.[0]?.message?.content?.trim()\n00193| \n00194|       if (!translatedText) {\n00195|         throw new Error('No translation received from API')\n00196|       }\n00197| \n00198|       // Clean up the response (remove quotes if the API added them)\n00199|       const cleanedTranslation = translatedText.replace(/^[\"']|[\"']$/g, '').trim()\n00200|       \n00201|       return NextResponse.json({\n00202|         translatedText: cleanedTranslation,\n00203|         sourceLang,\n00204|         targetLang,\n00205|       })\n00206|       \n00207|     } catch (apiError) {\n00208|       console.error('Translation API failed, using fallback:', apiError)\n00209|       \n00210|       // Fallback to a simple dictionary-based translation for common phrases\n00211|       const fallbackTranslations = getFallbackTranslation(text, targetLanguage)\n00212|       \n00213|       return NextResponse.json({\n00214|         translatedText: fallbackTranslations || `Translation temporarily unavailable for: \"${text}\"`,\n00215|         sourceLang,\n00216|         targetLang,\n00217|         fallback: true\n00218|       })\n00219|     }\n00220| \n00221|   } catch (error) {\n00222|     console.error('Translation error:', error)\n00223|     return NextResponse.json(\n00224|       { error: 'Internal server error' },\n00225|       { status: 500 }\n00226|     )\n00227|   }\n00228| }\n</file>",
    "metadata": {
      "preview": "import { NextRequest, NextResponse } from 'next/server'\n\n// Fallback translation for common phrases\nfunction getFallbackTranslation(text: string, targetLanguage: string): string | null {\n  const lowerText = text.toLowerCase().trim()\n  \n  const commonPhrases: Record<string, Record<string, string>> = {\n    'hello': {\n      'Danish': 'Hej',\n      'Swedish': 'Hej', \n      'Norwegian': 'Hei',\n      'Finnish': 'Hei',\n      'German': 'Hallo',\n      'French': 'Bonjour',\n      'Spanish': 'Hola',\n      'Italian': 'Ciao',\n      'Portuguese': 'Olá',\n      'Dutch': 'Hallo',\n      'Polish': 'Cześć',\n      'Russian': 'Привет'"
    },
    "title": "app/api/translate/route.ts",
    "time": {
      "start": 1759433466299,
      "end": 1759433466311
    }
  }
}
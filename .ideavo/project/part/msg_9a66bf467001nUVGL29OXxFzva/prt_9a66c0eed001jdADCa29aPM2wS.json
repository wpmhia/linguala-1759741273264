{
  "id": "prt_9a66c0eed001jdADCa29aPM2wS",
  "messageID": "msg_9a66bf467001nUVGL29OXxFzva",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01QzsLzF9sYC8T4zwThbjyeG",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/premium.ts"
    },
    "output": "<file>\n00001| import { prisma } from \"@/lib/prisma\"\n00002| import { Session } from \"next-auth\"\n00003| \n00004| /**\n00005|  * Check if a user has active premium access\n00006|  */\n00007| export function isPremiumUser(session: Session | null): boolean {\n00008|   if (!session?.user) return false\n00009|   \n00010|   const user = session.user\n00011|   if (!user.isPremium) return false\n00012|   \n00013|   // If no expiration date, assume permanent premium\n00014|   if (!user.premiumExpiresAt) return true\n00015|   \n00016|   // Check if premium hasn't expired\n00017|   return new Date(user.premiumExpiresAt) > new Date()\n00018| }\n00019| \n00020| /**\n00021|  * Get user's premium status with detailed information\n00022|  */\n00023| export async function getPremiumStatus(userId: string) {\n00024|   try {\n00025|     const user = await prisma.user.findUnique({\n00026|       where: { id: userId },\n00027|       select: {\n00028|         isPremium: true,\n00029|         premiumExpiresAt: true,\n00030|       }\n00031|     })\n00032| \n00033|     if (!user) return { isPremium: false, daysRemaining: 0 }\n00034| \n00035|     const isPremium = user.isPremium && (!user.premiumExpiresAt || user.premiumExpiresAt > new Date())\n00036|     const daysRemaining = user.premiumExpiresAt \n00037|       ? Math.max(0, Math.ceil((user.premiumExpiresAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24)))\n00038|       : isPremium ? Infinity : 0\n00039| \n00040|     return { isPremium, daysRemaining }\n00041|   } catch (error) {\n00042|     console.error(\"Error fetching premium status:\", error)\n00043|     return { isPremium: false, daysRemaining: 0 }\n00044|   }\n00045| }\n00046| \n00047| /**\n00048|  * Grant premium access to a user\n00049|  */\n00050| export async function grantPremiumAccess(userId: string, durationDays?: number) {\n00051|   try {\n00052|     const premiumExpiresAt = durationDays \n00053|       ? new Date(Date.now() + durationDays * 24 * 60 * 60 * 1000)\n00054|       : null // null means permanent\n00055| \n00056|     await prisma.user.update({\n00057|       where: { id: userId },\n00058|       data: {\n00059|         isPremium: true,\n00060|         premiumExpiresAt,\n00061|       }\n00062|     })\n00063| \n00064|     return { success: true }\n00065|   } catch (error) {\n00066|     console.error(\"Error granting premium access:\", error)\n00067|     return { success: false, error: \"Failed to grant premium access\" }\n00068|   }\n00069| }\n00070| \n00071| /**\n00072|  * Revoke premium access from a user\n00073|  */\n00074| export async function revokePremiumAccess(userId: string) {\n00075|   try {\n00076|     await prisma.user.update({\n00077|       where: { id: userId },\n00078|       data: {\n00079|         isPremium: false,\n00080|         premiumExpiresAt: null,\n00081|       }\n00082|     })\n00083| \n00084|     return { success: true }\n00085|   } catch (error) {\n00086|     console.error(\"Error revoking premium access:\", error)\n00087|     return { success: false, error: \"Failed to revoke premium access\" }\n00088|   }\n00089| }\n00090| \n00091| /**\n00092|  * Premium feature limits\n00093|  */\n00094| export const PREMIUM_LIMITS = {\n00095|   FREE: {\n00096|     TRANSLATIONS_PER_DAY: 50,\n00097|     GLOSSARY_ENTRIES: 100,\n00098|     TRANSLATION_HISTORY_DAYS: 7,\n00099|     BULK_TRANSLATION_MAX: 10,\n00100|   },\n00101|   PREMIUM: {\n00102|     TRANSLATIONS_PER_DAY: Infinity,\n00103|     GLOSSARY_ENTRIES: Infinity,\n00104|     TRANSLATION_HISTORY_DAYS: Infinity,\n00105|     BULK_TRANSLATION_MAX: 1000,\n00106|   }\n00107| }\n00108| \n00109| /**\n00110|  * Check if user can perform an action based on their premium status\n00111|  */\n00112| export function canPerformAction(session: Session | null, action: keyof typeof PREMIUM_LIMITS.FREE): boolean {\n00113|   const limits = isPremiumUser(session) ? PREMIUM_LIMITS.PREMIUM : PREMIUM_LIMITS.FREE\n00114|   return limits[action] === Infinity // For now, just check if it's unlimited\n00115| }\n00116| \n00117| /**\n00118|  * Get usage limits for a user\n00119|  */\n00120| export function getUserLimits(session: Session | null) {\n00121|   return isPremiumUser(session) ? PREMIUM_LIMITS.PREMIUM : PREMIUM_LIMITS.FREE\n00122| }\n</file>",
    "metadata": {
      "preview": "import { prisma } from \"@/lib/prisma\"\nimport { Session } from \"next-auth\"\n\n/**\n * Check if a user has active premium access\n */\nexport function isPremiumUser(session: Session | null): boolean {\n  if (!session?.user) return false\n  \n  const user = session.user\n  if (!user.isPremium) return false\n  \n  // If no expiration date, assume permanent premium\n  if (!user.premiumExpiresAt) return true\n  \n  // Check if premium hasn't expired\n  return new Date(user.premiumExpiresAt) > new Date()\n}\n\n/**"
    },
    "title": "lib/premium.ts",
    "time": {
      "start": 1759433724194,
      "end": 1759433724196
    }
  }
}
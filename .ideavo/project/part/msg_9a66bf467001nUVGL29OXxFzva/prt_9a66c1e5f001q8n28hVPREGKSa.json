{
  "id": "prt_9a66c1e5f001q8n28hVPREGKSa",
  "messageID": "msg_9a66bf467001nUVGL29OXxFzva",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01WSoavueB3wvgn1nHCqhzp7",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/auth.ts"
    },
    "output": "<file>\n00001| import { NextAuthOptions } from \"next-auth\"\n00002| import { PrismaAdapter } from \"@auth/prisma-adapter\"\n00003| import { prisma } from \"@/lib/prisma\"\n00004| import GoogleProvider from \"next-auth/providers/google\"\n00005| import CredentialsProvider from \"next-auth/providers/credentials\"\n00006| import bcrypt from \"bcryptjs\"\n00007| \n00008| export const authOptions: NextAuthOptions = {\n00009|   adapter: PrismaAdapter(prisma) as any,\n00010|   providers: [\n00011|     // Email/Password authentication\n00012|     CredentialsProvider({\n00013|       name: \"credentials\",\n00014|       credentials: {\n00015|         email: { label: \"Email\", type: \"email\" },\n00016|         password: { label: \"Password\", type: \"password\" }\n00017|       },\n00018|       async authorize(credentials) {\n00019|         if (!credentials?.email || !credentials?.password) {\n00020|           return null\n00021|         }\n00022| \n00023|         const user = await prisma.user.findUnique({\n00024|           where: {\n00025|             email: credentials.email\n00026|           }\n00027|         })\n00028| \n00029|         if (!user || !user.password) {\n00030|           return null\n00031|         }\n00032| \n00033|         const isPasswordValid = await bcrypt.compare(\n00034|           credentials.password,\n00035|           user.password\n00036|         )\n00037| \n00038|         if (!isPasswordValid) {\n00039|           return null\n00040|         }\n00041| \n00042|         return {\n00043|           id: user.id,\n00044|           email: user.email,\n00045|           name: user.name,\n00046|           image: user.image,\n00047|         }\n00048|       }\n00049|     }),\n00050|     \n00051|     // Google OAuth provider\n00052|     ...(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET ? [\n00053|       GoogleProvider({\n00054|         clientId: process.env.GOOGLE_CLIENT_ID,\n00055|         clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n00056|       })\n00057|     ] : []),\n00058|   ],\n00059|   \n00060|   session: {\n00061|     strategy: \"database\",\n00062|     maxAge: 30 * 24 * 60 * 60, // 30 days\n00063|   },\n00064|   \n00065|   pages: {\n00066|     signIn: '/auth/signin',\n00067|     signOut: '/auth/signout',\n00068|     error: '/auth/error',\n00069|   },\n00070|   \n00071|   callbacks: {\n00072|     async session({ session, user }) {\n00073|       if (session?.user && user) {\n00074|         // Fetch fresh user data including premium status\n00075|         const dbUser = await prisma.user.findUnique({\n00076|           where: { id: user.id },\n00077|           select: {\n00078|             id: true,\n00079|             name: true,\n00080|             email: true,\n00081|             image: true,\n00082|             isPremium: true,\n00083|             premiumExpiresAt: true,\n00084|           }\n00085|         })\n00086| \n00087|         if (dbUser) {\n00088|           session.user.id = dbUser.id\n00089|           session.user.email = dbUser.email\n00090|           session.user.name = dbUser.name\n00091|           session.user.image = dbUser.image\n00092|           // Add premium status to session\n00093|           session.user.isPremium = dbUser.isPremium\n00094|           session.user.premiumExpiresAt = dbUser.premiumExpiresAt\n00095|         }\n00096|       }\n00097|       return session\n00098|     },\n00099|   },\n00100|   \n00101|   events: {\n00102|     async createUser({ user }) {\n00103|       console.log(`New user created: ${user.email}`)\n00104|     },\n00105|   },\n00106| }\n00107| \n00108| // Helper function to register new users\n00109| export async function registerUser(email: string, password: string, name?: string) {\n00110|   try {\n00111|     // Check if user already exists\n00112|     const existingUser = await prisma.user.findUnique({\n00113|       where: { email }\n00114|     })\n00115| \n00116|     if (existingUser) {\n00117|       throw new Error(\"User already exists\")\n00118|     }\n00119| \n00120|     // Hash password\n00121|     const hashedPassword = await bcrypt.hash(password, 12)\n00122| \n00123|     // Create user\n00124|     const user = await prisma.user.create({\n00125|       data: {\n00126|         email,\n00127|         password: hashedPassword,\n00128|         name: name || email.split('@')[0],\n00129|         isPremium: false, // New users start with free tier\n00130|       }\n00131|     })\n00132| \n00133|     return { success: true, user: { id: user.id, email: user.email, name: user.name } }\n00134|   } catch (error) {\n00135|     console.error(\"Registration error:\", error)\n00136|     return { success: false, error: error instanceof Error ? error.message : \"Registration failed\" }\n00137|   }\n00138| }\n</file>",
    "metadata": {
      "preview": "import { NextAuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"@/lib/prisma\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\nimport bcrypt from \"bcryptjs\"\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    // Email/Password authentication\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null"
    },
    "title": "lib/auth.ts",
    "time": {
      "start": 1759433728159,
      "end": 1759433728160
    }
  }
}
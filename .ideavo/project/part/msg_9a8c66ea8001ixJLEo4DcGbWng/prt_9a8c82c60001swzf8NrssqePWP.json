{
  "id": "prt_9a8c82c60001swzf8NrssqePWP",
  "messageID": "msg_9a8c66ea8001ixJLEo4DcGbWng",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01UZDF2UvPLTEKupxnMm4pyU",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/hooks/use-website-scraper.ts",
      "content": "import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport axios from 'axios'\n\ninterface ScrapeWebsiteRequest {\n  url: string\n  extractMethod?: 'readability' | 'basic'\n  timeout?: number\n}\n\ninterface ScrapeWebsiteResponse {\n  success: boolean\n  url: string\n  title: string\n  content: string\n  excerpt: string\n  contentLength: number\n  extractMethod: string\n}\n\nexport function useWebsiteScraper() {\n  const queryClient = useQueryClient()\n\n  return useMutation<ScrapeWebsiteResponse, Error, ScrapeWebsiteRequest>({\n    mutationFn: async (request) => {\n      const response = await axios.post('/api/scrape-website', request, {\n        timeout: (request.timeout || 10000) + 5000, // Add 5s buffer\n      })\n      return response.data\n    },\n    onSuccess: (data) => {\n      // Cache the scraped content\n      queryClient.setQueryData(['website-content', data.url], data)\n    },\n    onError: (error) => {\n      console.error('Website scraping failed:', error)\n    },\n  })\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/hooks/use-website-scraper.ts",
      "exists": false
    },
    "title": "hooks/use-website-scraper.ts",
    "time": {
      "start": 1759473319537,
      "end": 1759473319538
    }
  }
}
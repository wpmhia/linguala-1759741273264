{
  "id": "prt_9a8c84b77001wK06JpkDarowF2",
  "messageID": "msg_9a8c66ea8001ixJLEo4DcGbWng",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01UxcMM3GzdpqsBqtPfMQFQ3",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/hooks/use-translation.ts",
      "content": "import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport axios from 'axios'\n\ninterface TranslationRequest {\n  text: string\n  sourceLang: string\n  targetLang: string\n  domain?: string\n  glossary?: Array<{ source: string; target: string }>\n}\n\ninterface TranslationResponse {\n  translatedText: string\n  sourceLang: string\n  targetLang: string\n  fallback?: boolean\n}\n\nexport function useTranslation() {\n  const queryClient = useQueryClient()\n\n  return useMutation<TranslationResponse, Error, TranslationRequest>({\n    mutationFn: async (request) => {\n      const response = await axios.post('/api/translate', request, {\n        timeout: 30000, // 30 second timeout for translation\n      })\n      return response.data\n    },\n    onSuccess: (data, variables) => {\n      // Cache the translation result\n      const cacheKey = `${variables.text}-${variables.sourceLang}-${variables.targetLang}`\n      queryClient.setQueryData(['translation', cacheKey], data)\n    },\n    onError: (error) => {\n      console.error('Translation failed:', error)\n    },\n  })\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/hooks/use-translation.ts",
      "exists": false
    },
    "title": "hooks/use-translation.ts",
    "time": {
      "start": 1759473326782,
      "end": 1759473326783
    }
  }
}
{
  "id": "prt_9a8c8d83e001jWt81bzQ6bCndZ",
  "messageID": "msg_9a8c66ea8001ixJLEo4DcGbWng",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01D5n9RDrGQfLxXS1rTNKtmz",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/linguala-translator.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { \n  ArrowUpDown, Copy, Volume2, Star, MoreHorizontal,\n  Check, X, Mic, Settings, History, FileText, Globe, AlertTriangle, Loader2\n} from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { LingualaLogo } from \"@/components/ui/linguala-logo\"\nimport { useWebsiteScraper } from \"@/hooks/use-website-scraper\"\nimport { useTranslation } from \"@/hooks/use-translation\"\nimport { validateAndNormalizeUrl } from \"@/lib/url-utils\"\n\n// Common languages like Google Translate\nconst LANGUAGES = [\n  { code: \"auto\", name: \"Detect language\", flag: \"🌐\" },\n  { code: \"en\", name: \"English\", flag: \"🇬🇧\" },\n  { code: \"es\", name: \"Spanish\", flag: \"🇪🇸\" },\n  { code: \"fr\", name: \"French\", flag: \"🇫🇷\" },\n  { code: \"de\", name: \"German\", flag: \"🇩🇪\" },\n  { code: \"it\", name: \"Italian\", flag: \"🇮🇹\" },\n  { code: \"pt\", name: \"Portuguese\", flag: \"🇵🇹\" },\n  { code: \"ru\", name: \"Russian\", flag: \"🇷🇺\" },\n  { code: \"ja\", name: \"Japanese\", flag: \"🇯🇵\" },\n  { code: \"ko\", name: \"Korean\", flag: \"🇰🇷\" },\n  { code: \"zh\", name: \"Chinese\", flag: \"🇨🇳\" },\n  { code: \"ar\", name: \"Arabic\", flag: \"🇸🇦\" },\n  { code: \"hi\", name: \"Hindi\", flag: \"🇮🇳\" },\n  { code: \"nl\", name: \"Dutch\", flag: \"🇳🇱\" },\n  { code: \"sv\", name: \"Swedish\", flag: \"🇸🇪\" },\n  { code: \"da\", name: \"Danish\", flag: \"🇩🇰\" },\n  { code: \"no\", name: \"Norwegian\", flag: \"🇳🇴\" },\n  { code: \"fi\", name: \"Finnish\", flag: \"🇫🇮\" },\n  { code: \"pl\", name: \"Polish\", flag: \"🇵🇱\" },\n  { code: \"cs\", name: \"Czech\", flag: \"🇨🇿\" },\n  { code: \"hu\", name: \"Hungarian\", flag: \"🇭🇺\" },\n  { code: \"tr\", name: \"Turkish\", flag: \"🇹🇷\" },\n  { code: \"th\", name: \"Thai\", flag: \"🇹🇭\" },\n  { code: \"vi\", name: \"Vietnamese\", flag: \"🇻🇳\" }\n]\n\nexport default function LingualaTranslator() {\n  // Core translation state\n  const [sourceText, setSourceText] = useState(\"\")\n  const [translatedText, setTranslatedText] = useState(\"\")\n  const [sourceLang, setSourceLang] = useState(\"auto\")\n  const [targetLang, setTargetLang] = useState(\"en\")\n  \n  // UI state\n  const [copySuccess, setCopySuccess] = useState(false)\n  const [focusedArea, setFocusedArea] = useState<'source' | 'target' | null>(null)\n  const [mode, setMode] = useState<'text' | 'documents' | 'website'>('text')\n  const [websiteUrl, setWebsiteUrl] = useState(\"\")\n  const [urlValidation, setUrlValidation] = useState<{isValid: boolean; error?: string}>({ isValid: true })\n  const [scrapedContent, setScrapedContent] = useState<{title: string; content: string} | null>(null)\n\n  // React Query hooks\n  const websiteScraper = useWebsiteScraper()\n  const translation = useTranslation()\n\n  // Helper functions\n  const getLanguage = (code: string) => {\n    return LANGUAGES.find(lang => lang.code === code) || LANGUAGES[1]\n  }\n\n  const handleSourceTextChange = (text: string) => {\n    setSourceText(text)\n    if (text.trim() && mode === 'text') {\n      handleTranslation(text)\n    } else if (!text.trim()) {\n      setTranslatedText(\"\")\n    }\n  }\n\n  const handleTranslation = (text: string) => {\n    if (!text.trim()) return\n\n    translation.mutate({\n      text,\n      sourceLang,\n      targetLang\n    }, {\n      onSuccess: (data) => {\n        setTranslatedText(data.translatedText)\n        if (data.fallback) {\n          toast.info(\"Using fallback translation\")\n        }\n      },\n      onError: (error) => {\n        console.error('Translation error:', error)\n        setTranslatedText(\"Translation service temporarily unavailable. Please try again later.\")\n        toast.error(\"Translation failed\")\n      }\n    })\n  }\n\n  const handleUrlChange = (url: string) => {\n    setWebsiteUrl(url)\n    \n    if (!url.trim()) {\n      setUrlValidation({ isValid: true })\n      return\n    }\n\n    const validation = validateAndNormalizeUrl(url)\n    setUrlValidation(validation)\n  }\n\n  const handleWebsiteTranslation = () => {\n    if (!websiteUrl.trim()) return\n\n    const validation = validateAndNormalizeUrl(websiteUrl)\n    \n    if (!validation.isValid) {\n      toast.error(validation.error || \"Invalid URL\")\n      return\n    }\n\n    websiteScraper.mutate({\n      url: validation.normalizedUrl!,\n      extractMethod: 'readability',\n      timeout: 15000\n    }, {\n      onSuccess: (data) => {\n        setScrapedContent({\n          title: data.title,\n          content: data.content\n        })\n        setSourceText(data.content)\n        toast.success(`Scraped \"${data.title}\" (${data.contentLength} characters)`)\n        \n        // Auto-translate if content is available\n        if (data.content) {\n          handleTranslation(data.content)\n        }\n      },\n      onError: (error: any) => {\n        console.error('Website scraping error:', error)\n        const errorMessage = error.response?.data?.error || 'Failed to scrape website'\n        toast.error(errorMessage)\n        setScrapedContent(null)\n      }\n    })\n  }\n\n  const swapLanguages = () => {\n    if (sourceLang === \"auto\") return\n    \n    setSourceLang(targetLang)\n    setTargetLang(sourceLang)\n    setSourceText(translatedText)\n    setTranslatedText(sourceText)\n  }\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopySuccess(true)\n      toast.success(\"Copied to clipboard!\")\n      setTimeout(() => setCopySuccess(false), 2000)\n    } catch (error) {\n      toast.error(\"Failed to copy to clipboard\")\n    }\n  }\n\n  const clearText = () => {\n    setSourceText(\"\")\n    setTranslatedText(\"\")\n    setWebsiteUrl(\"\")\n    setScrapedContent(null)\n    setUrlValidation({ isValid: true })\n  }\n\n  // Auto-translate when languages change\n  useEffect(() => {\n    if (sourceText.trim() && mode === 'text') {\n      const timeoutId = setTimeout(() => {\n        handleTranslation(sourceText)\n      }, 300) // Debounce\n      \n      return () => clearTimeout(timeoutId)\n    }\n  }, [sourceLang, targetLang])\n\n  const isLoading = translation.isPending || websiteScraper.isPending\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Google-style Header */}\n      <header className=\"border-b border-gray-200\">\n        <div className=\"max-w-screen-xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-8\">\n              <LingualaLogo size=\"md\" />\n              <nav className=\"hidden md:flex items-center space-x-6\">\n                <button \n                  onClick={() => setMode('text')}\n                  className={`text-sm px-3 py-2 rounded transition-colors ${\n                    mode === 'text' \n                      ? 'text-blue-600 bg-blue-50 font-medium' \n                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                  }`}\n                >\n                  Text\n                </button>\n                <button \n                  onClick={() => {\n                    setMode('documents')\n                    toast.info(\"Document translation coming soon!\")\n                  }}\n                  className={`text-sm px-3 py-2 rounded transition-colors ${\n                    mode === 'documents' \n                      ? 'text-blue-600 bg-blue-50 font-medium' \n                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                  }`}\n                >\n                  Documents\n                </button>\n                <button \n                  onClick={() => setMode('website')}\n                  className={`text-sm px-3 py-2 rounded transition-colors ${\n                    mode === 'website' \n                      ? 'text-blue-600 bg-blue-50 font-medium' \n                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'\n                  }`}\n                >\n                  <Globe className=\"h-4 w-4 mr-1 inline\" />\n                  Website\n                </button>\n              </nav>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-full transition-colors\">\n                <History className=\"h-5 w-5\" />\n              </button>\n              <button className=\"p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-full transition-colors\">\n                <Settings className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-screen-xl mx-auto px-6 py-8\">\n        {/* Main Translation Interface */}\n        <div className=\"bg-white\">\n          {/* Language Selection Bar */}\n          <div className=\"flex items-center justify-between mb-6 bg-gray-50 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Select value={sourceLang} onValueChange={setSourceLang}>\n                <SelectTrigger className=\"min-w-[140px] border-0 bg-transparent hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm\">{getLanguage(sourceLang).flag}</span>\n                    <span className=\"font-medium text-sm\">{getLanguage(sourceLang).name}</span>\n                  </div>\n                </SelectTrigger>\n                <SelectContent>\n                  {LANGUAGES.map(lang => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      <div className=\"flex items-center space-x-2\">\n                        <span>{lang.flag}</span>\n                        <span>{lang.name}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={swapLanguages}\n              disabled={sourceLang === \"auto\"}\n              className=\"p-2 rounded-full hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <ArrowUpDown className=\"h-4 w-4\" />\n            </Button>\n\n            <div className=\"flex items-center space-x-4\">\n              <Select value={targetLang} onValueChange={setTargetLang}>\n                <SelectTrigger className=\"min-w-[140px] border-0 bg-transparent hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm\">{getLanguage(targetLang).flag}</span>\n                    <span className=\"font-medium text-sm\">{getLanguage(targetLang).name}</span>\n                  </div>\n                </SelectTrigger>\n                <SelectContent>\n                  {LANGUAGES.filter(lang => lang.code !== \"auto\").map(lang => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      <div className=\"flex items-center space-x-2\">\n                        <span>{lang.flag}</span>\n                        <span>{lang.name}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Website URL Input (only show in website mode) */}\n          {mode === 'website' && (\n            <div className=\"mb-6\">\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-center space-x-4 mb-3\">\n                  <label className=\"text-sm font-medium text-blue-900 whitespace-nowrap\">\n                    Website URL:\n                  </label>\n                  <div className=\"flex-1 flex space-x-2\">\n                    <Input\n                      type=\"url\"\n                      value={websiteUrl}\n                      onChange={(e) => handleUrlChange(e.target.value)}\n                      placeholder=\"Enter website URL (e.g., example.com or https://example.com)\"\n                      className={`flex-1 ${!urlValidation.isValid ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : 'border-blue-300 focus:border-blue-500 focus:ring-blue-500'}`}\n                      onKeyPress={(e) => {\n                        if (e.key === 'Enter' && urlValidation.isValid) {\n                          handleWebsiteTranslation()\n                        }\n                      }}\n                    />\n                    <Button\n                      onClick={handleWebsiteTranslation}\n                      disabled={!websiteUrl.trim() || !urlValidation.isValid || isLoading}\n                      className=\"bg-blue-600 hover:bg-blue-700 text-white px-6\"\n                    >\n                      {websiteScraper.isPending ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Scraping...\n                        </>\n                      ) : (\n                        \"Translate Site\"\n                      )}\n                    </Button>\n                  </div>\n                </div>\n                \n                {!urlValidation.isValid && urlValidation.error && (\n                  <Alert className=\"mt-2 border-red-200 bg-red-50\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    <AlertDescription className=\"text-red-700\">\n                      {urlValidation.error}\n                    </AlertDescription>\n                  </Alert>\n                )}\n                \n                <p className=\"text-xs text-blue-700 mt-2\">\n                  💡 Professional web scraping with Mozilla Readability for clean content extraction\n                </p>\n              </div>\n\n              {scrapedContent && (\n                <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Check className=\"h-4 w-4 text-green-600\" />\n                    <span className=\"text-sm font-medium text-green-800\">\n                      Successfully scraped: {scrapedContent.title}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-green-700\">\n                    Content extracted and ready for translation ({scrapedContent.content.length} characters)\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Translation Areas */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-0 border border-gray-200 rounded-lg overflow-hidden\">\n            {/* Source Text */}\n            <div className=\"relative\">\n              <div className=\"border-b border-gray-200 lg:border-b-0 lg:border-r\">\n                <Textarea\n                  value={sourceText}\n                  onChange={(e) => handleSourceTextChange(e.target.value)}\n                  onFocus={() => setFocusedArea('source')}\n                  onBlur={() => setFocusedArea(null)}\n                  placeholder={mode === 'website' ? \"Website content will appear here...\" : \"Enter text\"}\n                  className=\"min-h-[300px] text-lg border-0 rounded-none resize-none focus:ring-2 focus:ring-blue-500 focus-visible:ring-2 focus-visible:ring-blue-500 p-6\"\n                  style={{ fontSize: '16px', lineHeight: '1.5' }}\n                  disabled={mode === 'website'}\n                />\n                \n                {/* Source Text Controls */}\n                <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    {sourceText && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={clearText}\n                        className=\"p-2 hover:bg-gray-100 rounded-full\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"p-2 hover:bg-gray-100 rounded-full\"\n                      disabled\n                    >\n                      <Mic className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"text-xs text-gray-600\">\n                    {sourceText.length} / 5000\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Translated Text */}\n            <div className=\"relative bg-gray-50\">\n              <Textarea\n                value={translatedText}\n                readOnly\n                placeholder={\n                  isLoading ? \"Translating...\" : \n                  mode === 'website' ? \"Translated website content will appear here...\" : \n                  \"Translation\"\n                }\n                className=\"min-h-[300px] text-lg border-0 rounded-none resize-none focus:ring-2 focus:ring-blue-500 focus-visible:ring-2 focus-visible:ring-blue-500 p-6 bg-gray-50\"\n                style={{ fontSize: '16px', lineHeight: '1.5' }}\n              />\n              \n              {/* Loading indicator */}\n              {isLoading && (\n                <div className=\"absolute inset-0 bg-gray-50 bg-opacity-75 flex items-center justify-center\">\n                  <div className=\"flex items-center space-x-2 text-blue-600\">\n                    <Loader2 className=\"h-5 w-5 animate-spin\" />\n                    <span className=\"text-sm font-medium\">\n                      {websiteScraper.isPending ? 'Scraping website...' : 'Translating...'}\n                    </span>\n                  </div>\n                </div>\n              )}\n              \n              {/* Translation Controls */}\n              {translatedText && !isLoading && (\n                <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(translatedText)}\n                      className=\"p-2 hover:bg-gray-200 rounded-full\"\n                    >\n                      {copySuccess ? <Check className=\"h-4 w-4 text-green-600\" /> : <Copy className=\"h-4 w-4\" />}\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"p-2 hover:bg-gray-200 rounded-full\"\n                      disabled\n                    >\n                      <Volume2 className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"p-2 hover:bg-gray-200 rounded-full\"\n                      disabled\n                    >\n                      <Star className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"p-2 hover:bg-gray-200 rounded-full\"\n                    disabled\n                  >\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bottom Actions */}\n          <div className=\"mt-6 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              {mode === 'text' && (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => setMode('website')}\n                >\n                  <Globe className=\"h-4 w-4 mr-2\" />\n                  Translate a website\n                </Button>\n              )}\n              {mode === 'website' && (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => setMode('text')}\n                >\n                  Switch to text translation\n                </Button>\n              )}\n            </div>\n            \n            <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n              <span>Powered by Linguala Translate + Puppeteer + Readability</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Enhanced feature showcase */}\n        <div className=\"mt-12\">\n          <div className=\"text-center\">\n            <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-8 max-w-4xl mx-auto\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n                Professional Translation Platform\n              </h2>\n              <p className=\"text-gray-600 mb-6\">\n                Industry-standard web scraping with Puppeteer, intelligent content extraction with Mozilla Readability, \n                and advanced AI translation powered by DashScope.\n              </p>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 text-sm text-gray-700\">\n                <div className=\"text-center\">\n                  <div className=\"font-semibold text-blue-600\">25+</div>\n                  <div>Languages</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-semibold text-green-600\">Smart</div>\n                  <div>Web Scraping</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-semibold text-purple-600\">Real-time</div>\n                  <div>Translation</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-semibold text-orange-600\">Professional</div>\n                  <div>Quality</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/linguala-translator.tsx",
      "exists": true
    },
    "title": "components/linguala-translator.tsx",
    "time": {
      "start": 1759473429396,
      "end": 1759473429399
    }
  }
}
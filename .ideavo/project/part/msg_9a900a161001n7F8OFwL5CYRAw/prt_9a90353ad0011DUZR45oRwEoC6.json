{
  "id": "prt_9a90353ad0011DUZR45oRwEoC6",
  "messageID": "msg_9a900a161001n7F8OFwL5CYRAw",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01Ln74GSpj9FdWcRo8moAyNp",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/documents/document-uploader.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useState } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Button } from '@/components/ui/button'\nimport { Progress } from '@/components/ui/progress'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { \n  Upload, FileText, File, CheckCircle, XCircle, \n  Loader2, Download, Trash2, AlertTriangle \n} from 'lucide-react'\nimport { toast } from 'sonner'\n\ninterface DocumentFile {\n  file: File\n  id: string\n  status: 'uploading' | 'uploaded' | 'processing' | 'translated' | 'error'\n  progress: number\n  error?: string\n  uploadResult?: {\n    fileId: string\n    fileName: string\n    fileType: string\n    fileSize: number\n    wordCount: number\n    pageCount: number\n  }\n  translationResult?: {\n    translatedFileId: string\n    downloadPath: string\n    translatedFileName: string\n  }\n}\n\ninterface DocumentUploaderProps {\n  onFileProcessed?: (result: any) => void\n  sourceLang: string\n  targetLang: string\n}\n\nexport function DocumentUploader({ onFileProcessed, sourceLang, targetLang }: DocumentUploaderProps) {\n  const [files, setFiles] = useState<DocumentFile[]>([])\n  const [isDragActive, setIsDragActive] = useState(false)\n\n  const maxSize = 10 * 1024 * 1024 // 10MB\n  const acceptedTypes = {\n    'application/pdf': ['.pdf'],\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n    'text/plain': ['.txt']\n  }\n\n  const onDrop = useCallback(async (acceptedFiles: File[], rejectedFiles: any[]) => {\n    setIsDragActive(false)\n\n    // Handle rejected files\n    rejectedFiles.forEach(({ file, errors }) => {\n      errors.forEach((error: any) => {\n        if (error.code === 'file-too-large') {\n          toast.error(`${file.name} is too large. Maximum size is 10MB.`)\n        } else if (error.code === 'file-invalid-type') {\n          toast.error(`${file.name} is not a supported file type. Please upload PDF, DOCX, or TXT files.`)\n        } else {\n          toast.error(`Error with ${file.name}: ${error.message}`)\n        }\n      })\n    })\n\n    // Process accepted files\n    const newFiles: DocumentFile[] = acceptedFiles.map(file => ({\n      file,\n      id: `${Date.now()}_${Math.random().toString(36).substring(2)}`,\n      status: 'uploading',\n      progress: 0\n    }))\n\n    setFiles(prev => [...prev, ...newFiles])\n\n    // Upload each file\n    for (const documentFile of newFiles) {\n      await uploadFile(documentFile)\n    }\n  }, [])\n\n  const uploadFile = async (documentFile: DocumentFile) => {\n    try {\n      updateFileStatus(documentFile.id, { status: 'uploading', progress: 10 })\n\n      const formData = new FormData()\n      formData.append('file', documentFile.file)\n\n      const response = await fetch('/api/documents/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      updateFileStatus(documentFile.id, { progress: 50 })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || 'Upload failed')\n      }\n\n      const result = await response.json()\n      updateFileStatus(documentFile.id, { \n        status: 'uploaded', \n        progress: 100,\n        uploadResult: result\n      })\n\n      toast.success(`${documentFile.file.name} uploaded successfully`)\n\n      // Auto-translate if languages are selected\n      if (sourceLang && targetLang && sourceLang !== targetLang) {\n        await translateDocument(documentFile.id, result)\n      }\n\n    } catch (error) {\n      console.error('Upload error:', error)\n      const errorMessage = error instanceof Error ? error.message : 'Upload failed'\n      updateFileStatus(documentFile.id, { \n        status: 'error', \n        error: errorMessage \n      })\n      toast.error(`Failed to upload ${documentFile.file.name}: ${errorMessage}`)\n    }\n  }\n\n  const translateDocument = async (fileId: string, uploadResult: any) => {\n    try {\n      updateFileStatus(fileId, { status: 'processing', progress: 0 })\n\n      const response = await fetch('/api/documents/translate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileId: uploadResult.fileId,\n          sourceLang,\n          targetLang,\n          fileName: uploadResult.fileName,\n          fileType: uploadResult.fileType\n        })\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || 'Translation failed')\n      }\n\n      const result = await response.json()\n      updateFileStatus(fileId, { \n        status: 'translated', \n        progress: 100,\n        translationResult: result\n      })\n\n      toast.success('Document translated successfully!')\n      onFileProcessed?.(result)\n\n    } catch (error) {\n      console.error('Translation error:', error)\n      const errorMessage = error instanceof Error ? error.message : 'Translation failed'\n      updateFileStatus(fileId, { \n        status: 'error', \n        error: errorMessage \n      })\n      toast.error(`Translation failed: ${errorMessage}`)\n    }\n  }\n\n  const updateFileStatus = (fileId: string, updates: Partial<DocumentFile>) => {\n    setFiles(prev => prev.map(file => \n      file.id === fileId ? { ...file, ...updates } : file\n    ))\n  }\n\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(file => file.id !== fileId))\n  }\n\n  const downloadFile = async (file: DocumentFile) => {\n    if (!file.translationResult) return\n\n    try {\n      const response = await fetch(file.translationResult.downloadPath)\n      if (!response.ok) throw new Error('Download failed')\n\n      const blob = await response.blob()\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = file.translationResult.translatedFileName\n      document.body.appendChild(a)\n      a.click()\n      window.URL.revokeObjectURL(url)\n      document.body.removeChild(a)\n\n      toast.success('File downloaded successfully!')\n    } catch (error) {\n      toast.error('Download failed')\n    }\n  }\n\n  const retryTranslation = async (file: DocumentFile) => {\n    if (!file.uploadResult) return\n    await translateDocument(file.id, file.uploadResult)\n  }\n\n  const { getRootProps, getInputProps, isDragActive: dropzoneActive } = useDropzone({\n    onDrop,\n    onDragEnter: () => setIsDragActive(true),\n    onDragLeave: () => setIsDragActive(false),\n    accept: acceptedTypes,\n    maxSize,\n    multiple: true\n  })\n\n  const getFileIcon = (fileName: string) => {\n    const ext = fileName.split('.').pop()?.toLowerCase()\n    if (ext === 'pdf') return <FileText className=\"h-5 w-5 text-red-500\" />\n    if (ext === 'docx') return <File className=\"h-5 w-5 text-blue-500\" />\n    return <File className=\"h-5 w-5 text-gray-500\" />\n  }\n\n  const getStatusIcon = (status: DocumentFile['status']) => {\n    switch (status) {\n      case 'uploading':\n      case 'processing':\n        return <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />\n      case 'uploaded':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />\n      case 'translated':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />\n      case 'error':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />\n      default:\n        return null\n    }\n  }\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes'\n    const k = 1024\n    const sizes = ['Bytes', 'KB', 'MB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n  }\n\n  return (\n    <div className=\"w-full\">\n      {/* Upload Area */}\n      <div\n        {...getRootProps()}\n        className={`\n          border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors\n          ${dropzoneActive || isDragActive\n            ? 'border-blue-500 bg-blue-50' \n            : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'\n          }\n        `}\n      >\n        <input {...getInputProps()} />\n        <Upload className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n        \n        {dropzoneActive ? (\n          <div>\n            <p className=\"text-lg font-medium text-blue-600\">Drop files here</p>\n            <p className=\"text-sm text-blue-500\">PDF, DOCX, or TXT files up to 10MB</p>\n          </div>\n        ) : (\n          <div>\n            <p className=\"text-lg font-medium text-gray-700 mb-2\">\n              Drag & drop documents here, or click to select\n            </p>\n            <p className=\"text-sm text-gray-500 mb-4\">\n              Supports PDF, DOCX, and TXT files up to 10MB\n            </p>\n            <Button variant=\"outline\">\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Choose Files\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Language Warning */}\n      {(!sourceLang || !targetLang || sourceLang === targetLang) && (\n        <Alert className=\"mt-4\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Please select source and target languages to enable automatic translation after upload.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* File List */}\n      {files.length > 0 && (\n        <div className=\"mt-6 space-y-4\">\n          <h3 className=\"text-lg font-medium\">Uploaded Documents</h3>\n          \n          {files.map((file) => (\n            <div key={file.id} className=\"border rounded-lg p-4 bg-white\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-3\">\n                  {getFileIcon(file.file.name)}\n                  <div>\n                    <p className=\"font-medium text-sm\">{file.file.name}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {formatFileSize(file.file.size)}\n                      {file.uploadResult && (\n                        <>\n                          {' • '}\n                          {file.uploadResult.pageCount > 0 && `${file.uploadResult.pageCount} pages • `}\n                          {file.uploadResult.wordCount > 0 && `${file.uploadResult.wordCount} words`}\n                        </>\n                      )}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  {getStatusIcon(file.status)}\n                  <span className=\"text-sm capitalize text-gray-600\">\n                    {file.status === 'processing' ? 'Translating...' : file.status}\n                  </span>\n                  \n                  {file.status === 'translated' && (\n                    <Button\n                      size=\"sm\"\n                      onClick={() => downloadFile(file)}\n                      className=\"ml-2\"\n                    >\n                      <Download className=\"h-4 w-4 mr-1\" />\n                      Download\n                    </Button>\n                  )}\n                  \n                  {file.status === 'error' && file.uploadResult && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => retryTranslation(file)}\n                      className=\"ml-2\"\n                    >\n                      Retry\n                    </Button>\n                  )}\n                  \n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => removeFile(file.id)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Progress Bar */}\n              {(file.status === 'uploading' || file.status === 'processing') && (\n                <Progress value={file.progress} className=\"mt-2\" />\n              )}\n              \n              {/* Error Message */}\n              {file.status === 'error' && file.error && (\n                <Alert className=\"mt-2\" variant=\"destructive\">\n                  <XCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{file.error}</AlertDescription>\n                </Alert>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/documents/document-uploader.tsx",
      "exists": false
    },
    "title": "components/documents/document-uploader.tsx",
    "time": {
      "start": 1759477230541,
      "end": 1759477230543
    }
  }
}
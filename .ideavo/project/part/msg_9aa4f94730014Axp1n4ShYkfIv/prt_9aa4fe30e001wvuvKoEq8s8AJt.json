{
  "id": "prt_9aa4fe30e001wvuvKoEq8s8AJt",
  "messageID": "msg_9aa4f94730014Axp1n4ShYkfIv",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "edit",
  "callID": "toolu_018DS74S2z2S7SMAQuTcXmMx",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/api/translate/route.ts",
      "oldString": "/**\n * Translation API Route\n * \n * Handles text translation requests using DashScope API.\n * ENVIRONMENT: DASHSCOPE_API_KEY must be set (currently: sk-ad9404d1ced5426082b73e685a95ffa3)\n */\nimport { NextRequest, NextResponse } from 'next/server'\nimport { translateText } from '@/lib/translation-service'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    console.log('Translation request body:', body)\n    \n    const { text, sourceLang, targetLang, domain, glossary } = body\n\n    if (!text || !targetLang) {\n      console.log('Missing required fields:', { text: !!text, targetLang: !!targetLang })\n      return NextResponse.json(\n        { error: 'Text and target language are required' },\n        { status: 400 }\n      )\n    }\n\n    // Use the shared translation service\n    const result = await translateText(text, sourceLang, targetLang, {\n      domain,\n      glossary\n    })\n\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Translation error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}",
      "newString": "/**\n * Text Processing API Route\n * \n * Handles text translation, improvement, rephrasing, and summarization using DashScope API.\n * ENVIRONMENT: DASHSCOPE_API_KEY must be set (currently: sk-ad9404d1ced5426082b73e685a95ffa3)\n */\nimport { NextRequest, NextResponse } from 'next/server'\nimport { translateText } from '@/lib/translation-service'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    console.log('Processing request body:', body)\n    \n    const { text, operation = 'translate', sourceLang, targetLang, domain, glossary } = body\n\n    if (!text) {\n      console.log('Missing required field: text')\n      return NextResponse.json(\n        { error: 'Text is required' },\n        { status: 400 }\n      )\n    }\n\n    let result\n\n    switch (operation) {\n      case 'translate':\n        if (!targetLang) {\n          return NextResponse.json(\n            { error: 'Target language is required for translation' },\n            { status: 400 }\n          )\n        }\n        result = await translateText(text, sourceLang, targetLang, { domain, glossary })\n        break\n\n      case 'improve':\n        result = await improveWriting(text)\n        break\n\n      case 'rephrase':\n        result = await rephraseText(text)\n        break\n\n      case 'summarize':\n        result = await summarizeText(text)\n        break\n\n      default:\n        return NextResponse.json(\n          { error: 'Invalid operation. Supported: translate, improve, rephrase, summarize' },\n          { status: 400 }\n        )\n    }\n\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Processing error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\n// Text improvement function\nasync function improveWriting(text: string) {\n  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n  \n  try {\n    const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-turbo',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a professional writing assistant. Improve the given text by enhancing clarity, grammar, style, and readability while maintaining the original meaning. Return only the improved text without explanations.'\n          },\n          {\n            role: 'user',\n            content: text\n          }\n        ]\n      })\n    })\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const improvedText = data.choices[0]?.message?.content?.trim()\n\n    return {\n      originalText: text,\n      improvedText,\n      operation: 'improve'\n    }\n  } catch (error) {\n    console.error('Improve writing error:', error)\n    return {\n      originalText: text,\n      improvedText: text,\n      operation: 'improve',\n      fallback: true\n    }\n  }\n}\n\n// Text rephrasing function\nasync function rephraseText(text: string) {\n  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n  \n  try {\n    const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-turbo',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a professional writing assistant. Rephrase the given text using different words and sentence structures while keeping the same meaning. Make it sound natural and engaging. Return only the rephrased text without explanations.'\n          },\n          {\n            role: 'user',\n            content: text\n          }\n        ]\n      })\n    })\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const rephrasedText = data.choices[0]?.message?.content?.trim()\n\n    return {\n      originalText: text,\n      rephrasedText,\n      operation: 'rephrase'\n    }\n  } catch (error) {\n    console.error('Rephrase text error:', error)\n    return {\n      originalText: text,\n      rephrasedText: text,\n      operation: 'rephrase',\n      fallback: true\n    }\n  }\n}\n\n// Text summarization function\nasync function summarizeText(text: string) {\n  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n  \n  try {\n    const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-turbo',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a professional summarization assistant. Create a concise summary of the given text that captures the main points and key information. Keep it clear and well-structured. Return only the summary without explanations.'\n          },\n          {\n            role: 'user',\n            content: text\n          }\n        ]\n      })\n    })\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const summaryText = data.choices[0]?.message?.content?.trim()\n\n    return {\n      originalText: text,\n      summaryText,\n      operation: 'summarize'\n    }\n  } catch (error) {\n    console.error('Summarize text error:', error)\n    return {\n      originalText: text,\n      summaryText: text.substring(0, Math.min(text.length / 2, 200)) + '...',\n      operation: 'summarize',\n      fallback: true\n    }\n  }\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "diff": "Index: /home/user/project/app/api/translate/route.ts\n===================================================================\n--- /home/user/project/app/api/translate/route.ts\n+++ /home/user/project/app/api/translate/route.ts\n@@ -1,40 +1,213 @@\n /**\n- * Translation API Route\n+ * Text Processing API Route\n  * \n- * Handles text translation requests using DashScope API.\n+ * Handles text translation, improvement, rephrasing, and summarization using DashScope API.\n  * ENVIRONMENT: DASHSCOPE_API_KEY must be set (currently: sk-ad9404d1ced5426082b73e685a95ffa3)\n  */\n import { NextRequest, NextResponse } from 'next/server'\n import { translateText } from '@/lib/translation-service'\n \n export async function POST(request: NextRequest) {\n   try {\n     const body = await request.json()\n-    console.log('Translation request body:', body)\n+    console.log('Processing request body:', body)\n     \n-    const { text, sourceLang, targetLang, domain, glossary } = body\n+    const { text, operation = 'translate', sourceLang, targetLang, domain, glossary } = body\n \n-    if (!text || !targetLang) {\n-      console.log('Missing required fields:', { text: !!text, targetLang: !!targetLang })\n+    if (!text) {\n+      console.log('Missing required field: text')\n       return NextResponse.json(\n-        { error: 'Text and target language are required' },\n+        { error: 'Text is required' },\n         { status: 400 }\n       )\n     }\n \n-    // Use the shared translation service\n-    const result = await translateText(text, sourceLang, targetLang, {\n-      domain,\n-      glossary\n-    })\n+    let result\n \n+    switch (operation) {\n+      case 'translate':\n+        if (!targetLang) {\n+          return NextResponse.json(\n+            { error: 'Target language is required for translation' },\n+            { status: 400 }\n+          )\n+        }\n+        result = await translateText(text, sourceLang, targetLang, { domain, glossary })\n+        break\n+\n+      case 'improve':\n+        result = await improveWriting(text)\n+        break\n+\n+      case 'rephrase':\n+        result = await rephraseText(text)\n+        break\n+\n+      case 'summarize':\n+        result = await summarizeText(text)\n+        break\n+\n+      default:\n+        return NextResponse.json(\n+          { error: 'Invalid operation. Supported: translate, improve, rephrase, summarize' },\n+          { status: 400 }\n+        )\n+    }\n+\n     return NextResponse.json(result)\n \n   } catch (error) {\n-    console.error('Translation error:', error)\n+    console.error('Processing error:', error)\n     return NextResponse.json(\n       { error: 'Internal server error' },\n       { status: 500 }\n     )\n   }\n+}\n+\n+// Text improvement function\n+async function improveWriting(text: string) {\n+  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n+  \n+  try {\n+    const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n+      method: 'POST',\n+      headers: {\n+        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n+        'Content-Type': 'application/json',\n+      },\n+      body: JSON.stringify({\n+        model: 'qwen-turbo',\n+        messages: [\n+          {\n+            role: 'system',\n+            content: 'You are a professional writing assistant. Improve the given text by enhancing clarity, grammar, style, and readability while maintaining the original meaning. Return only the improved text without explanations.'\n+          },\n+          {\n+            role: 'user',\n+            content: text\n+          }\n+        ]\n+      })\n+    })\n+\n+    if (!response.ok) {\n+      throw new Error(`API request failed: ${response.status}`)\n+    }\n+\n+    const data = await response.json()\n+    const improvedText = data.choices[0]?.message?.content?.trim()\n+\n+    return {\n+      originalText: text,\n+      improvedText,\n+      operation: 'improve'\n+    }\n+  } catch (error) {\n+    console.error('Improve writing error:', error)\n+    return {\n+      originalText: text,\n+      improvedText: text,\n+      operation: 'improve',\n+      fallback: true\n+    }\n+  }\n+}\n+\n+// Text rephrasing function\n+async function rephraseText(text: string) {\n+  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n+  \n+  try {\n+    const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n+      method: 'POST',\n+      headers: {\n+        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n+        'Content-Type': 'application/json',\n+      },\n+      body: JSON.stringify({\n+        model: 'qwen-turbo',\n+        messages: [\n+          {\n+            role: 'system',\n+            content: 'You are a professional writing assistant. Rephrase the given text using different words and sentence structures while keeping the same meaning. Make it sound natural and engaging. Return only the rephrased text without explanations.'\n+          },\n+          {\n+            role: 'user',\n+            content: text\n+          }\n+        ]\n+      })\n+    })\n+\n+    if (!response.ok) {\n+      throw new Error(`API request failed: ${response.status}`)\n+    }\n+\n+    const data = await response.json()\n+    const rephrasedText = data.choices[0]?.message?.content?.trim()\n+\n+    return {\n+      originalText: text,\n+      rephrasedText,\n+      operation: 'rephrase'\n+    }\n+  } catch (error) {\n+    console.error('Rephrase text error:', error)\n+    return {\n+      originalText: text,\n+      rephrasedText: text,\n+      operation: 'rephrase',\n+      fallback: true\n+    }\n+  }\n+}\n+\n+// Text summarization function\n+async function summarizeText(text: string) {\n+  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n+  \n+  try {\n+    const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n+      method: 'POST',\n+      headers: {\n+        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n+        'Content-Type': 'application/json',\n+      },\n+      body: JSON.stringify({\n+        model: 'qwen-turbo',\n+        messages: [\n+          {\n+            role: 'system',\n+            content: 'You are a professional summarization assistant. Create a concise summary of the given text that captures the main points and key information. Keep it clear and well-structured. Return only the summary without explanations.'\n+          },\n+          {\n+            role: 'user',\n+            content: text\n+          }\n+        ]\n+      })\n+    })\n+\n+    if (!response.ok) {\n+      throw new Error(`API request failed: ${response.status}`)\n+    }\n+\n+    const data = await response.json()\n+    const summaryText = data.choices[0]?.message?.content?.trim()\n+\n+    return {\n+      originalText: text,\n+      summaryText,\n+      operation: 'summarize'\n+    }\n+  } catch (error) {\n+    console.error('Summarize text error:', error)\n+    return {\n+      originalText: text,\n+      summaryText: text.substring(0, Math.min(text.length / 2, 200)) + '...',\n+      operation: 'summarize',\n+      fallback: true\n+    }\n+  }\n }\n\\ No newline at end of file\n"
    },
    "title": "app/api/translate/route.ts",
    "time": {
      "start": 1759499006358,
      "end": 1759499006382
    }
  }
}
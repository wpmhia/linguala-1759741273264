{
  "id": "prt_9aa5061aa002MMILVISeg9jvAt",
  "messageID": "msg_9aa4f94730014Axp1n4ShYkfIv",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "edit",
  "callID": "toolu_018SnJozCPp9iVi3VenmieBe",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/hooks/use-translation.ts",
      "oldString": "import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport axios from 'axios'\n\ninterface TranslationRequest {\n  text: string\n  sourceLang: string\n  targetLang: string\n  domain?: string\n  glossary?: Array<{ source: string; target: string }>\n}\n\ninterface TranslationResponse {\n  translatedText: string\n  sourceLang: string\n  targetLang: string\n  fallback?: boolean\n}\n\nexport function useTranslation() {\n  const queryClient = useQueryClient()\n\n  return useMutation<TranslationResponse, Error, TranslationRequest>({\n    mutationFn: async (request) => {\n      const response = await axios.post('/api/translate', request, {\n        timeout: 30000, // 30 second timeout for translation\n      })\n      return response.data\n    },\n    onSuccess: (data, variables) => {\n      // Cache the translation result\n      const cacheKey = `${variables.text}-${variables.sourceLang}-${variables.targetLang}`\n      queryClient.setQueryData(['translation', cacheKey], data)\n    },\n    onError: (error) => {\n      console.error('Translation failed:', error)\n    },\n  })\n}",
      "newString": "import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport axios from 'axios'\n\ninterface ProcessingRequest {\n  text: string\n  operation?: 'translate' | 'improve' | 'rephrase' | 'summarize'\n  sourceLang?: string\n  targetLang?: string\n  domain?: string\n  glossary?: Array<{ source: string; target: string }>\n}\n\ninterface ProcessingResponse {\n  operation: string\n  translatedText?: string\n  improvedText?: string\n  rephrasedText?: string\n  summaryText?: string\n  originalText?: string\n  sourceLang?: string\n  targetLang?: string\n  fallback?: boolean\n}\n\nexport function useTextProcessing() {\n  const queryClient = useQueryClient()\n\n  return useMutation<ProcessingResponse, Error, ProcessingRequest>({\n    mutationFn: async (request) => {\n      const response = await axios.post('/api/translate', request, {\n        timeout: 30000, // 30 second timeout for processing\n      })\n      return response.data\n    },\n    onSuccess: (data, variables) => {\n      // Cache the processing result\n      const cacheKey = `${variables.operation}-${variables.text}-${variables.sourceLang || ''}-${variables.targetLang || ''}`\n      queryClient.setQueryData(['processing', cacheKey], data)\n    },\n    onError: (error) => {\n      console.error('Text processing failed:', error)\n    },\n  })\n}\n\n// Keep the old hook for backward compatibility\nexport function useTranslation() {\n  return useTextProcessing()\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "diff": "Index: /home/user/project/hooks/use-translation.ts\n===================================================================\n--- /home/user/project/hooks/use-translation.ts\n+++ /home/user/project/hooks/use-translation.ts\n@@ -1,38 +1,49 @@\n import { useMutation, useQueryClient } from '@tanstack/react-query'\n import axios from 'axios'\n \n-interface TranslationRequest {\n+interface ProcessingRequest {\n   text: string\n-  sourceLang: string\n-  targetLang: string\n+  operation?: 'translate' | 'improve' | 'rephrase' | 'summarize'\n+  sourceLang?: string\n+  targetLang?: string\n   domain?: string\n   glossary?: Array<{ source: string; target: string }>\n }\n \n-interface TranslationResponse {\n-  translatedText: string\n-  sourceLang: string\n-  targetLang: string\n+interface ProcessingResponse {\n+  operation: string\n+  translatedText?: string\n+  improvedText?: string\n+  rephrasedText?: string\n+  summaryText?: string\n+  originalText?: string\n+  sourceLang?: string\n+  targetLang?: string\n   fallback?: boolean\n }\n \n-export function useTranslation() {\n+export function useTextProcessing() {\n   const queryClient = useQueryClient()\n \n-  return useMutation<TranslationResponse, Error, TranslationRequest>({\n+  return useMutation<ProcessingResponse, Error, ProcessingRequest>({\n     mutationFn: async (request) => {\n       const response = await axios.post('/api/translate', request, {\n-        timeout: 30000, // 30 second timeout for translation\n+        timeout: 30000, // 30 second timeout for processing\n       })\n       return response.data\n     },\n     onSuccess: (data, variables) => {\n-      // Cache the translation result\n-      const cacheKey = `${variables.text}-${variables.sourceLang}-${variables.targetLang}`\n-      queryClient.setQueryData(['translation', cacheKey], data)\n+      // Cache the processing result\n+      const cacheKey = `${variables.operation}-${variables.text}-${variables.sourceLang || ''}-${variables.targetLang || ''}`\n+      queryClient.setQueryData(['processing', cacheKey], data)\n     },\n     onError: (error) => {\n-      console.error('Translation failed:', error)\n+      console.error('Text processing failed:', error)\n     },\n   })\n+}\n+\n+// Keep the old hook for backward compatibility\n+export function useTranslation() {\n+  return useTextProcessing()\n }\n\\ No newline at end of file\n"
    },
    "title": "hooks/use-translation.ts",
    "time": {
      "start": 1759499025442,
      "end": 1759499025452
    }
  }
}
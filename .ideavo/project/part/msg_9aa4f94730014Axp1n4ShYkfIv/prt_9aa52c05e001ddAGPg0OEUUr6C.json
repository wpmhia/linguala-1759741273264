{
  "id": "prt_9aa52c05e001ddAGPg0OEUUr6C",
  "messageID": "msg_9aa4f94730014Axp1n4ShYkfIv",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01NQBLBuxXcwAv42i9QxP9bV",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/linguala-translator.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { \n  ArrowUpDown, Copy, Volume2, Star, MoreHorizontal,\n  Check, X, Mic, Settings, History, Loader2\n} from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { LingualaLogo } from \"@/components/ui/linguala-logo\"\nimport { useTextProcessing } from \"@/hooks/use-translation\"\n\n// Common languages like Google Translate\nconst LANGUAGES = [\n  { code: \"auto\", name: \"Detect language\", flag: \"🌐\" },\n  { code: \"en\", name: \"English\", flag: \"🇬🇧\" },\n  { code: \"es\", name: \"Spanish\", flag: \"🇪🇸\" },\n  { code: \"fr\", name: \"French\", flag: \"🇫🇷\" },\n  { code: \"de\", name: \"German\", flag: \"🇩🇪\" },\n  { code: \"it\", name: \"Italian\", flag: \"🇮🇹\" },\n  { code: \"pt\", name: \"Portuguese\", flag: \"🇵🇹\" },\n  { code: \"ru\", name: \"Russian\", flag: \"🇷🇺\" },\n  { code: \"ja\", name: \"Japanese\", flag: \"🇯🇵\" },\n  { code: \"ko\", name: \"Korean\", flag: \"🇰🇷\" },\n  { code: \"zh\", name: \"Chinese\", flag: \"🇨🇳\" },\n  { code: \"ar\", name: \"Arabic\", flag: \"🇸🇦\" },\n  { code: \"hi\", name: \"Hindi\", flag: \"🇮🇳\" },\n  { code: \"nl\", name: \"Dutch\", flag: \"🇳🇱\" },\n  { code: \"sv\", name: \"Swedish\", flag: \"🇸🇪\" },\n  { code: \"da\", name: \"Danish\", flag: \"🇩🇰\" },\n  { code: \"no\", name: \"Norwegian\", flag: \"🇳🇴\" },\n  { code: \"fi\", name: \"Finnish\", flag: \"🇫🇮\" },\n  { code: \"pl\", name: \"Polish\", flag: \"🇵🇱\" },\n  { code: \"cs\", name: \"Czech\", flag: \"🇨🇿\" },\n  { code: \"hu\", name: \"Hungarian\", flag: \"🇭🇺\" },\n  { code: \"tr\", name: \"Turkish\", flag: \"🇹🇷\" },\n  { code: \"th\", name: \"Thai\", flag: \"🇹🇭\" },\n  { code: \"vi\", name: \"Vietnamese\", flag: \"🇻🇳\" }\n]\n\n// Operation types\nconst OPERATIONS = [\n  { id: 'translate', name: 'Translate', icon: '🌐' },\n  { id: 'improve', name: 'Improve Writing', icon: '✍️' },\n  { id: 'rephrase', name: 'Rephrase', icon: '🔄' },\n  { id: 'summarize', name: 'Summarize', icon: '📝' }\n]\n\nexport default function LingualaTranslator() {\n  // Core processing state\n  const [sourceText, setSourceText] = useState(\"\")\n  const [resultText, setResultText] = useState(\"\")\n  const [operation, setOperation] = useState(\"translate\")\n  const [sourceLang, setSourceLang] = useState(\"auto\")\n  const [targetLang, setTargetLang] = useState(\"en\")\n  \n  // UI state\n  const [copySuccess, setCopySuccess] = useState(false)\n  const [focusedArea, setFocusedArea] = useState<'source' | 'target' | null>(null)\n\n  // React Query hook\n  const processing = useTextProcessing()\n\n  // Helper functions\n  const getLanguage = (code: string) => {\n    return LANGUAGES.find(lang => lang.code === code) || LANGUAGES[1]\n  }\n\n  const getPlaceholderText = () => {\n    switch (operation) {\n      case 'translate':\n        return 'Enter text to translate'\n      case 'improve':\n        return 'Enter text to improve'\n      case 'rephrase':\n        return 'Enter text to rephrase'\n      case 'summarize':\n        return 'Enter text to summarize'\n      default:\n        return 'Enter text'\n    }\n  }\n\n  const handleSourceTextChange = (text: string) => {\n    setSourceText(text)\n    if (text.trim()) {\n      handleProcessing(text)\n    } else {\n      setResultText(\"\")\n    }\n  }\n\n  const handleProcessing = (text: string) => {\n    if (!text.trim()) return\n\n    const request: any = {\n      text,\n      operation\n    }\n\n    // Only add language fields for translation\n    if (operation === 'translate') {\n      request.sourceLang = sourceLang\n      request.targetLang = targetLang\n    }\n\n    processing.mutate(request, {\n      onSuccess: (data) => {\n        // Handle different operation results\n        switch (data.operation) {\n          case 'translate':\n            setResultText(data.translatedText || '')\n            break\n          case 'improve':\n            setResultText(data.improvedText || '')\n            break\n          case 'rephrase':\n            setResultText(data.rephrasedText || '')\n            break\n          case 'summarize':\n            setResultText(data.summaryText || '')\n            break\n          default:\n            setResultText('')\n        }\n        \n        if (data.fallback) {\n          toast.info(\"Using fallback processing\")\n        }\n      },\n      onError: (error) => {\n        console.error('Processing error:', error)\n        setResultText(\"Service temporarily unavailable. Please try again later.\")\n        toast.error(\"Processing failed\")\n      }\n    })\n  }\n\n  const handleOperationChange = (newOperation: string) => {\n    setOperation(newOperation)\n    setResultText(\"\")\n    \n    // Re-process if there's source text\n    if (sourceText.trim()) {\n      handleProcessing(sourceText)\n    }\n  }\n\n  const swapLanguages = () => {\n    if (sourceLang === \"auto\" || operation !== 'translate') return\n    \n    setSourceLang(targetLang)\n    setTargetLang(sourceLang)\n    setSourceText(resultText)\n    setResultText(sourceText)\n  }\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopySuccess(true)\n      toast.success(\"Copied to clipboard!\")\n      setTimeout(() => setCopySuccess(false), 2000)\n    } catch (error) {\n      toast.error(\"Failed to copy to clipboard\")\n    }\n  }\n\n  const clearText = () => {\n    setSourceText(\"\")\n    setResultText(\"\")\n  }\n\n  // Auto-process when languages or operation change\n  useEffect(() => {\n    if (sourceText.trim()) {\n      const timeoutId = setTimeout(() => {\n        handleProcessing(sourceText)\n      }, 300) // Debounce\n      \n      return () => clearTimeout(timeoutId)\n    }\n  }, [sourceLang, targetLang, operation])\n\n  const isLoading = processing.isPending\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <header className=\"border-b border-gray-200\">\n        <div className=\"max-w-screen-xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-8\">\n              <LingualaLogo size=\"md\" />\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-full transition-colors\">\n                <History className=\"h-5 w-5\" />\n              </button>\n              <button className=\"p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-full transition-colors\">\n                <Settings className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-screen-xl mx-auto px-6 py-8\">\n        {/* Main Processing Interface */}\n        <div className=\"bg-white\">\n          {/* Operation Selection */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              {OPERATIONS.map((op) => (\n                <button\n                  key={op.id}\n                  onClick={() => handleOperationChange(op.id)}\n                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                    operation === op.id\n                      ? 'bg-blue-100 text-blue-700'\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                  }`}\n                >\n                  <span className=\"mr-2\">{op.icon}</span>\n                  {op.name}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Language Selection Bar - Only show for translation */}\n          {operation === 'translate' && (\n            <div className=\"flex items-center justify-between mb-6 bg-gray-50 rounded-lg p-4\">\n              <div className=\"flex items-center space-x-4\">\n                <Select value={sourceLang} onValueChange={setSourceLang}>\n                  <SelectTrigger className=\"min-w-[140px] border-0 bg-transparent hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm\">{getLanguage(sourceLang).flag}</span>\n                      <span className=\"font-medium text-sm\">{getLanguage(sourceLang).name}</span>\n                    </div>\n                  </SelectTrigger>\n                  <SelectContent>\n                    {LANGUAGES.map(lang => (\n                      <SelectItem key={lang.code} value={lang.code}>\n                        <div className=\"flex items-center space-x-2\">\n                          <span>{lang.flag}</span>\n                          <span>{lang.name}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={swapLanguages}\n                className=\"p-2 hover:bg-gray-200 rounded-full\"\n                disabled={sourceLang === \"auto\"}\n              >\n                <ArrowUpDown className=\"h-4 w-4\" />\n              </Button>\n\n              <div className=\"flex items-center space-x-4\">\n                <Select value={targetLang} onValueChange={setTargetLang}>\n                  <SelectTrigger className=\"min-w-[140px] border-0 bg-transparent hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm\">{getLanguage(targetLang).flag}</span>\n                      <span className=\"font-medium text-sm\">{getLanguage(targetLang).name}</span>\n                    </div>\n                  </SelectTrigger>\n                  <SelectContent>\n                    {LANGUAGES.filter(lang => lang.code !== \"auto\").map(lang => (\n                      <SelectItem key={lang.code} value={lang.code}>\n                        <div className=\"flex items-center space-x-2\">\n                          <span>{lang.flag}</span>\n                          <span>{lang.name}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n\n          {/* Processing Areas */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-0 border border-gray-200 rounded-lg overflow-hidden\">\n            {/* Source Text */}\n            <div className=\"relative\">\n              <div className=\"border-b border-gray-200 lg:border-b-0 lg:border-r\">\n                <Textarea\n                  value={sourceText}\n                  onChange={(e) => handleSourceTextChange(e.target.value)}\n                  onFocus={() => setFocusedArea('source')}\n                  onBlur={() => setFocusedArea(null)}\n                  placeholder={getPlaceholderText()}\n                  className=\"min-h-[300px] text-lg border-0 rounded-none resize-none focus:ring-2 focus:ring-blue-500 focus-visible:ring-2 focus-visible:ring-blue-500 p-6\"\n                  style={{ fontSize: '16px', lineHeight: '1.5' }}\n                />\n                \n                {/* Source Text Controls */}\n                <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    {sourceText && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={clearText}\n                        className=\"p-2 hover:bg-gray-200 rounded-full\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"p-2 hover:bg-gray-200 rounded-full\"\n                      disabled\n                    >\n                      <Mic className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Result Text */}\n            <div className=\"relative\">\n              <div className=\"min-h-[300px] p-6 text-lg\" style={{ fontSize: '16px', lineHeight: '1.5' }}>\n                {isLoading ? (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <Loader2 className=\"h-6 w-6 animate-spin text-blue-500\" />\n                  </div>\n                ) : (\n                  <div \n                    className={`whitespace-pre-wrap ${!resultText ? 'text-gray-400' : 'text-gray-900'}`}\n                    onFocus={() => setFocusedArea('target')}\n                    onBlur={() => setFocusedArea(null)}\n                    tabIndex={0}\n                  >\n                    {resultText || `${operation === 'translate' ? 'Translation' : operation === 'improve' ? 'Improved text' : operation === 'rephrase' ? 'Rephrased text' : 'Summary'} will appear here`}\n                  </div>\n                )}\n              </div>\n\n              {/* Result Text Controls */}\n              {resultText && !isLoading && (\n                <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(resultText)}\n                      className=\"p-2 hover:bg-gray-200 rounded-full\"\n                    >\n                      {copySuccess ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"p-2 hover:bg-gray-200 rounded-full\"\n                      disabled\n                    >\n                      <Volume2 className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"p-2 hover:bg-gray-200 rounded-full\"\n                      disabled\n                    >\n                      <Star className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"p-2 hover:bg-gray-200 rounded-full\"\n                    disabled\n                  >\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Bottom Actions */}\n          <div className=\"mt-6 flex items-center justify-end\">\n            <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n              <span>Powered by Linguala</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Feature showcase */}\n        <div className=\"mt-12\">\n          <div className=\"text-center\">\n            <div className=\"bg-blue-50 rounded-lg p-8 max-w-2xl mx-auto\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n                AI-Powered Text Processing Platform\n              </h2>\n              <p className=\"text-gray-600 mb-6\">\n                Advanced AI tools for translation, writing improvement, rephrasing, and summarization. Professional quality results in seconds.\n              </p>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-700\">\n                <div className=\"text-center\">\n                  <div className=\"font-semibold\">25+</div>\n                  <div>Languages</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-semibold\">4</div>\n                  <div>AI Tools</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-semibold\">Fast</div>\n                  <div>Processing</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-semibold\">Secure</div>\n                  <div>& Private</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/linguala-translator.tsx",
      "exists": true
    },
    "title": "components/linguala-translator.tsx",
    "time": {
      "start": 1759499228988,
      "end": 1759499228991
    }
  }
}
{
  "id": "prt_9ab3c5164001eKk067y9gbOyLH",
  "messageID": "msg_9ab3adab6001q9LUOJxOdX0fFx",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "edit",
  "callID": "toolu_012mr76CuC2NHFdHQaf8ukK1",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/api/translate/route.ts",
      "oldString": "// Text summarization function\nasync function summarizeText(text: string) {\n  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n  \n  try {\n    const controller = new AbortController()\n    const timeoutId = setTimeout(() => controller.abort(), 5000) // 5 second timeout\n    \n    const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-turbo',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a professional summarization assistant. Create a concise summary of the given text that captures the main points and key information. Keep it clear and well-structured. Return only the summary without explanations.'\n          },\n          {\n            role: 'user',\n            content: text\n          }\n        ]\n      }),\n      signal: controller.signal\n    })\n\n    clearTimeout(timeoutId)\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const summaryText = data.choices[0]?.message?.content?.trim()\n\n    return {\n      originalText: text,\n      summaryText: summaryText || text,\n      operation: 'summarize'\n    }\n  } catch (error) {\n    console.error('Summarize text error:', error)\n    // Simple fallback - take first sentences up to ~50% of length\n    const sentences = text.match(/[^\\.!?]+[\\.!?]+/g) || [text]\n    const targetLength = Math.max(Math.floor(text.length * 0.3), 50)\n    let summary = ''\n    \n    for (const sentence of sentences) {\n      if (summary.length + sentence.length <= targetLength) {\n        summary += sentence\n      } else {\n        break\n      }\n    }\n    \n    return {\n      originalText: text,\n      summaryText: summary || text.substring(0, targetLength) + '...',\n      operation: 'summarize',\n      fallback: true\n    }\n  }\n}",
      "newString": "// Fast summarization function with immediate fallback\nasync function summarizeTextFast(text: string) {\n  // For short texts, return as-is\n  if (text.length <= 100) {\n    return {\n      originalText: text,\n      summaryText: text,\n      operation: 'summarize'\n    }\n  }\n\n  try {\n    // Smart sentence-based summarization\n    const sentences = text.match(/[^.!?]+[.!?]+/g) || []\n    \n    if (sentences.length === 0) {\n      // No proper sentences found, use word-based approach\n      const words = text.split(' ')\n      const targetWords = Math.max(Math.floor(words.length * 0.5), 10)\n      const summary = words.slice(0, targetWords).join(' ') + (words.length > targetWords ? '...' : '')\n      \n      return {\n        originalText: text,\n        summaryText: summary,\n        operation: 'summarize',\n        fallback: true\n      }\n    }\n\n    // Take first 1-2 sentences or up to 40% of original length\n    const targetLength = Math.max(Math.floor(text.length * 0.4), 80)\n    let summary = ''\n    let sentenceCount = 0\n    \n    for (const sentence of sentences) {\n      const trimmedSentence = sentence.trim()\n      if (summary.length + trimmedSentence.length <= targetLength && sentenceCount < 3) {\n        summary += (summary ? ' ' : '') + trimmedSentence\n        sentenceCount++\n      } else {\n        break\n      }\n    }\n    \n    return {\n      originalText: text,\n      summaryText: summary || text.substring(0, Math.min(100, text.length)) + '...',\n      operation: 'summarize',\n      fallback: true\n    }\n  } catch (error) {\n    console.error('Summarize text error:', error)\n    \n    return {\n      originalText: text,\n      summaryText: text.substring(0, Math.min(100, text.length)) + '...',\n      operation: 'summarize',\n      fallback: true\n    }\n  }\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "diff": "Index: /home/user/project/app/api/translate/route.ts\n===================================================================\n--- /home/user/project/app/api/translate/route.ts\n+++ /home/user/project/app/api/translate/route.ts\n@@ -223,71 +223,65 @@\n     }\n   }\n }\n \n-// Text summarization function\n-async function summarizeText(text: string) {\n-  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n-  \n-  try {\n-    const controller = new AbortController()\n-    const timeoutId = setTimeout(() => controller.abort(), 5000) // 5 second timeout\n-    \n-    const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n-      method: 'POST',\n-      headers: {\n-        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n-        'Content-Type': 'application/json',\n-      },\n-      body: JSON.stringify({\n-        model: 'qwen-turbo',\n-        messages: [\n-          {\n-            role: 'system',\n-            content: 'You are a professional summarization assistant. Create a concise summary of the given text that captures the main points and key information. Keep it clear and well-structured. Return only the summary without explanations.'\n-          },\n-          {\n-            role: 'user',\n-            content: text\n-          }\n-        ]\n-      }),\n-      signal: controller.signal\n-    })\n-\n-    clearTimeout(timeoutId)\n-\n-    if (!response.ok) {\n-      throw new Error(`API request failed: ${response.status}`)\n-    }\n-\n-    const data = await response.json()\n-    const summaryText = data.choices[0]?.message?.content?.trim()\n-\n+// Fast summarization function with immediate fallback\n+async function summarizeTextFast(text: string) {\n+  // For short texts, return as-is\n+  if (text.length <= 100) {\n     return {\n       originalText: text,\n-      summaryText: summaryText || text,\n+      summaryText: text,\n       operation: 'summarize'\n     }\n-  } catch (error) {\n-    console.error('Summarize text error:', error)\n-    // Simple fallback - take first sentences up to ~50% of length\n-    const sentences = text.match(/[^\\.!?]+[\\.!?]+/g) || [text]\n-    const targetLength = Math.max(Math.floor(text.length * 0.3), 50)\n+  }\n+\n+  try {\n+    // Smart sentence-based summarization\n+    const sentences = text.match(/[^.!?]+[.!?]+/g) || []\n+    \n+    if (sentences.length === 0) {\n+      // No proper sentences found, use word-based approach\n+      const words = text.split(' ')\n+      const targetWords = Math.max(Math.floor(words.length * 0.5), 10)\n+      const summary = words.slice(0, targetWords).join(' ') + (words.length > targetWords ? '...' : '')\n+      \n+      return {\n+        originalText: text,\n+        summaryText: summary,\n+        operation: 'summarize',\n+        fallback: true\n+      }\n+    }\n+\n+    // Take first 1-2 sentences or up to 40% of original length\n+    const targetLength = Math.max(Math.floor(text.length * 0.4), 80)\n     let summary = ''\n+    let sentenceCount = 0\n     \n     for (const sentence of sentences) {\n-      if (summary.length + sentence.length <= targetLength) {\n-        summary += sentence\n+      const trimmedSentence = sentence.trim()\n+      if (summary.length + trimmedSentence.length <= targetLength && sentenceCount < 3) {\n+        summary += (summary ? ' ' : '') + trimmedSentence\n+        sentenceCount++\n       } else {\n         break\n       }\n     }\n     \n     return {\n       originalText: text,\n-      summaryText: summary || text.substring(0, targetLength) + '...',\n+      summaryText: summary || text.substring(0, Math.min(100, text.length)) + '...',\n       operation: 'summarize',\n       fallback: true\n     }\n+  } catch (error) {\n+    console.error('Summarize text error:', error)\n+    \n+    return {\n+      originalText: text,\n+      summaryText: text.substring(0, Math.min(100, text.length)) + '...',\n+      operation: 'summarize',\n+      fallback: true\n+    }\n   }\n }\n\\ No newline at end of file\n"
    },
    "title": "app/api/translate/route.ts",
    "time": {
      "start": 1759514495245,
      "end": 1759514495264
    }
  }
}
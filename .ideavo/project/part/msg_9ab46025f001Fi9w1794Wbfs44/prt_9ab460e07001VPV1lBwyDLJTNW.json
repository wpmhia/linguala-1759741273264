{
  "id": "prt_9ab460e07001VPV1lBwyDLJTNW",
  "messageID": "msg_9ab46025f001Fi9w1794Wbfs44",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01Q4KM1ny3hKo4vhx1CnCCP8",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/api/translate/route.ts"
    },
    "output": "<file>\n00001| /**\n00002|  * Text Processing API Route\n00003|  * \n00004|  * Handles text translation, improvement, rephrasing, and summarization using DashScope API.\n00005|  * ENVIRONMENT: DASHSCOPE_API_KEY must be set (currently: sk-ad9404d1ced5426082b73e685a95ffa3)\n00006|  */\n00007| import { NextRequest, NextResponse } from 'next/server'\n00008| import { translateText } from '@/lib/translation-service'\n00009| \n00010| export async function POST(request: NextRequest) {\n00011|   try {\n00012|     const body = await request.json()\n00013|     console.log('Processing request body:', body)\n00014|     \n00015|     const { text, operation = 'translate', sourceLang, targetLang, domain, glossary } = body\n00016| \n00017|     if (!text) {\n00018|       console.log('Missing required field: text')\n00019|       return NextResponse.json(\n00020|         { error: 'Text is required' },\n00021|         { status: 400 }\n00022|       )\n00023|     }\n00024| \n00025|     let result\n00026| \n00027|     switch (operation) {\n00028|       case 'translate':\n00029|         if (!targetLang) {\n00030|           return NextResponse.json(\n00031|             { error: 'Target language is required for translation' },\n00032|             { status: 400 }\n00033|           )\n00034|         }\n00035|         result = await translateText(text, sourceLang, targetLang, { domain, glossary })\n00036|         break\n00037| \n00038|       case 'improve':\n00039|         result = await improveWritingWithQwen3Max(text)\n00040|         break\n00041| \n00042|       case 'rephrase':\n00043|         // Use fallback for now due to API reliability issues\n00044|         result = {\n00045|           originalText: text,\n00046|           rephrasedText: text\n00047|             .replace(/\\bvery\\b/g, 'extremely')\n00048|             .replace(/\\bgood\\b/g, 'excellent')\n00049|             .replace(/\\bbad\\b/g, 'poor')\n00050|             .replace(/\\bnice\\b/g, 'pleasant')\n00051|             .replace(/\\bbig\\b/g, 'large')\n00052|             .replace(/\\bsmall\\b/g, 'tiny')\n00053|             .replace(/\\bfast\\b/g, 'quick')\n00054|             .replace(/\\bslow\\b/g, 'sluggish'),\n00055|           operation: 'rephrase',\n00056|           fallback: true\n00057|         }\n00058|         break\n00059| \n00060|       case 'summarize':\n00061|         result = await summarizeTextFast(text)\n00062|         break\n00063| \n00064|       default:\n00065|         return NextResponse.json(\n00066|           { error: 'Invalid operation. Supported: translate, improve, rephrase, summarize' },\n00067|           { status: 400 }\n00068|         )\n00069|     }\n00070| \n00071|     return NextResponse.json(result)\n00072| \n00073|   } catch (error) {\n00074|     console.error('Processing error:', error)\n00075|     return NextResponse.json(\n00076|       { error: 'Internal server error' },\n00077|       { status: 500 }\n00078|     )\n00079|   }\n00080| }\n00081| \n00082| // Text improvement function using qwen3-max\n00083| async function improveWritingWithQwen3Max(text: string) {\n00084|   const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n00085|   \n00086|   try {\n00087|     // Create a race condition between the API call and timeout\n00088|     const apiCall = fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00089|       method: 'POST',\n00090|       headers: {\n00091|         'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n00092|         'Content-Type': 'application/json',\n00093|       },\n00094|       body: JSON.stringify({\n00095|         model: 'qwen-max',\n00096|         messages: [\n00097|           {\n00098|             role: 'system',\n00099|             content: 'You are a professional writing assistant. Improve the given text by enhancing clarity, grammar, style, and readability while maintaining the original meaning and tone. Fix any grammatical errors, improve word choice, and enhance sentence structure. Return only the improved text without explanations or quotes.'\n00100|           },\n00101|           {\n00102|             role: 'user',\n00103|             content: text\n00104|           }\n00105|         ],\n00106|         max_tokens: 1000,\n00107|         temperature: 0.3\n00108|       })\n00109|     })\n00110| \n00111|     const timeout = new Promise((_, reject) => \n00112|       setTimeout(() => reject(new Error('Timeout')), 8000)\n00113|     )\n00114| \n00115|     const response = await Promise.race([apiCall, timeout]) as Response\n00116|     \n00117|     if (!response.ok) {\n00118|       throw new Error(`API request failed: ${response.status}`)\n00119|     }\n00120| \n00121|     const data = await response.json()\n00122|     const improvedText = data.choices[0]?.message?.content?.trim()\n00123| \n00124|     if (improvedText && improvedText !== text) {\n00125|       return {\n00126|         originalText: text,\n00127|         improvedText,\n00128|         operation: 'improve'\n00129|       }\n00130|     } else {\n00131|       throw new Error('No improvement received')\n00132|     }\n00133|   } catch (error) {\n00134|     console.error('Improve writing error:', error)\n00135|     // Enhanced fallback - basic grammar and style improvements\n00136|     const basicImprovement = text\n00137|       // Fix common contractions\n00138|       .replace(/\\bi\\b/gi, 'I')\n00139|       .replace(/\\bim\\b/gi, \"I'm\")\n00140|       .replace(/\\bits\\b/gi, \"it's\")\n00141|       .replace(/\\byour\\b(?=\\s+(going|coming|feeling))/gi, \"you're\")\n00142|       .replace(/\\bwont\\b/gi, \"won't\")\n00143|       .replace(/\\bdont\\b/gi, \"don't\")\n00144|       .replace(/\\bcant\\b/gi, \"can't\")\n00145|       .replace(/\\bwere\\b(?=\\s+going)/gi, \"we're\")\n00146|       .replace(/\\btheir\\b(?=\\s+(happy|sad|coming|going))/gi, \"they're\")\n00147|       // Fix double spaces\n00148|       .replace(/\\s+/g, ' ')\n00149|       // Capitalize first letter\n00150|       .replace(/^[a-z]/, match => match.toUpperCase())\n00151|       // Fix sentence endings\n00152|       .replace(/([a-z])\\s*$/i, '$1.')\n00153|       .trim()\n00154|     \n00155|     return {\n00156|       originalText: text,\n00157|       improvedText: basicImprovement,\n00158|       operation: 'improve',\n00159|       fallback: true\n00160|     }\n00161|   }\n00162| }\n00163| \n00164| // Text rephrasing function\n00165| async function rephraseText(text: string) {\n00166|   const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n00167|   \n00168|   try {\n00169|     const controller = new AbortController()\n00170|     const timeoutId = setTimeout(() => controller.abort(), 5000) // 5 second timeout\n00171|     \n00172|     const response = await fetch('https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00173|       method: 'POST',\n00174|       headers: {\n00175|         'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n00176|         'Content-Type': 'application/json',\n00177|       },\n00178|       body: JSON.stringify({\n00179|         model: 'qwen-turbo',\n00180|         messages: [\n00181|           {\n00182|             role: 'system',\n00183|             content: 'You are a professional writing assistant. Rephrase the given text using different words and sentence structures while keeping the same meaning. Make it sound natural and engaging. Return only the rephrased text without explanations.'\n00184|           },\n00185|           {\n00186|             role: 'user',\n00187|             content: text\n00188|           }\n00189|         ]\n00190|       }),\n00191|       signal: controller.signal\n00192|     })\n00193| \n00194|     clearTimeout(timeoutId)\n00195| \n00196|     if (!response.ok) {\n00197|       throw new Error(`API request failed: ${response.status}`)\n00198|     }\n00199| \n00200|     const data = await response.json()\n00201|     const rephrasedText = data.choices[0]?.message?.content?.trim()\n00202| \n00203|     return {\n00204|       originalText: text,\n00205|       rephrasedText: rephrasedText || text,\n00206|       operation: 'rephrase'\n00207|     }\n00208|   } catch (error) {\n00209|     console.error('Rephrase text error:', error)\n00210|     // Simple fallback - basic rephrasing\n00211|     const basicRephrase = text\n00212|       .replace(/\\bvery\\b/g, 'extremely')\n00213|       .replace(/\\bgood\\b/g, 'excellent')\n00214|       .replace(/\\bbad\\b/g, 'poor')\n00215|       .replace(/\\bnice\\b/g, 'pleasant')\n00216|       .replace(/\\bbig\\b/g, 'large')\n00217|     \n00218|     return {\n00219|       originalText: text,\n00220|       rephrasedText: basicRephrase,\n00221|       operation: 'rephrase',\n00222|       fallback: true\n00223|     }\n00224|   }\n00225| }\n00226| \n00227| // Fast summarization function with immediate fallback\n00228| async function summarizeTextFast(text: string) {\n00229|   // For short texts, return as-is\n00230|   if (text.length <= 100) {\n00231|     return {\n00232|       originalText: text,\n00233|       summaryText: text,\n00234|       operation: 'summarize'\n00235|     }\n00236|   }\n00237| \n00238|   try {\n00239|     // Smart sentence-based summarization\n00240|     const sentences = text.match(/[^.!?]+[.!?]+/g) || []\n00241|     \n00242|     if (sentences.length === 0) {\n00243|       // No proper sentences found, use word-based approach\n00244|       const words = text.split(' ')\n00245|       const targetWords = Math.max(Math.floor(words.length * 0.5), 10)\n00246|       const summary = words.slice(0, targetWords).join(' ') + (words.length > targetWords ? '...' : '')\n00247|       \n00248|       return {\n00249|         originalText: text,\n00250|         summaryText: summary,\n00251|         operation: 'summarize',\n00252|         fallback: true\n00253|       }\n00254|     }\n00255| \n00256|     // Take first 1-2 sentences or up to 40% of original length\n00257|     const targetLength = Math.max(Math.floor(text.length * 0.4), 80)\n00258|     let summary = ''\n00259|     let sentenceCount = 0\n00260|     \n00261|     for (const sentence of sentences) {\n00262|       const trimmedSentence = sentence.trim()\n00263|       if (summary.length + trimmedSentence.length <= targetLength && sentenceCount < 3) {\n00264|         summary += (summary ? ' ' : '') + trimmedSentence\n00265|         sentenceCount++\n00266|       } else {\n00267|         break\n00268|       }\n00269|     }\n00270|     \n00271|     return {\n00272|       originalText: text,\n00273|       summaryText: summary || text.substring(0, Math.min(100, text.length)) + '...',\n00274|       operation: 'summarize',\n00275|       fallback: true\n00276|     }\n00277|   } catch (error) {\n00278|     console.error('Summarize text error:', error)\n00279|     \n00280|     return {\n00281|       originalText: text,\n00282|       summaryText: text.substring(0, Math.min(100, text.length)) + '...',\n00283|       operation: 'summarize',\n00284|       fallback: true\n00285|     }\n00286|   }\n00287| }\n</file>",
    "metadata": {
      "preview": "/**\n * Text Processing API Route\n * \n * Handles text translation, improvement, rephrasing, and summarization using DashScope API.\n * ENVIRONMENT: DASHSCOPE_API_KEY must be set (currently: sk-ad9404d1ced5426082b73e685a95ffa3)\n */\nimport { NextRequest, NextResponse } from 'next/server'\nimport { translateText } from '@/lib/translation-service'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    console.log('Processing request body:', body)\n    \n    const { text, operation = 'translate', sourceLang, targetLang, domain, glossary } = body\n\n    if (!text) {\n      console.log('Missing required field: text')\n      return NextResponse.json(\n        { error: 'Text is required' },"
    },
    "title": "app/api/translate/route.ts",
    "time": {
      "start": 1759515119668,
      "end": 1759515119676
    }
  }
}
{
  "id": "prt_9ab4b95ee001TPeYg4GIRMmp6O",
  "messageID": "msg_9ab49513f001BlOVM5F69FFUHk",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "multiedit",
  "callID": "toolu_016eV56G9ojBgnRWUqxfjW7i",
  "state": {
    "status": "error",
    "input": {
      "filePath": "/home/user/project/app/api/translate/route.ts",
      "edits": [
        {
          "oldString": "    const timeout = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Timeout')), 8000)\n    )\n\n    const response = await Promise.race([apiCall, timeout]) as Response",
          "newString": "    const timeout = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Timeout')), 2000)\n    )\n\n    const response = await Promise.race([apiCall, timeout]) as Response"
        },
        {
          "oldString": "    const timeout = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Timeout')), 8000)\n    )\n\n    const response = await Promise.race([apiCall, timeout]) as Response\n    \n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const summaryText = data.choices[0]?.message?.content?.trim()",
          "newString": "    const timeout = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Timeout')), 2000)\n    )\n\n    const response = await Promise.race([apiCall, timeout]) as Response\n    \n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const summaryText = data.choices[0]?.message?.content?.trim()"
        }
      ]
    },
    "error": "Error: oldString found multiple times and requires more code context to uniquely identify the intended match",
    "time": {
      "start": 1759515486041,
      "end": 1759515486048
    }
  }
}
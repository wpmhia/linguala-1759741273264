{
  "id": "prt_9b569d212001imbMvN5ykT9VJT",
  "messageID": "msg_9b569c76a001DSJV91TjGmqgu8",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_018YVpLyVG3VnG8oo9FMfdna",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/linguala-translator.tsx"
    },
    "output": "<file>\n00001| \"use client\"\n00002| \n00003| import { useState, useEffect } from \"react\"\n00004| import { Button } from \"@/components/ui/button\"\n00005| import { Textarea } from \"@/components/ui/textarea\"\n00006| import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n00007| import { Switch } from \"@/components/ui/switch\"\n00008| import { Label } from \"@/components/ui/label\"\n00009| import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\n00010| import { \n00011|   ArrowUpDown, Copy, Volume2, Star, MoreHorizontal,\n00012|   Check, X, Mic, Settings, History, Loader2, Languages, FileText\n00013| } from \"lucide-react\"\n00014| import { toast } from \"sonner\"\n00015| import { LingualaLogo } from \"@/components/ui/linguala-logo\"\n00016| import { useTextProcessing } from \"@/hooks/use-translation\"\n00017| \n00018| // Common languages like Google Translate\n00019| const LANGUAGES = [\n00020|   { code: \"auto\", name: \"Detect language\", flag: \"🌐\" },\n00021|   { code: \"en\", name: \"English\", flag: \"🇬🇧\" },\n00022|   { code: \"es\", name: \"Spanish\", flag: \"🇪🇸\" },\n00023|   { code: \"fr\", name: \"French\", flag: \"🇫🇷\" },\n00024|   { code: \"de\", name: \"German\", flag: \"🇩🇪\" },\n00025|   { code: \"it\", name: \"Italian\", flag: \"🇮🇹\" },\n00026|   { code: \"pt\", name: \"Portuguese\", flag: \"🇵🇹\" },\n00027|   { code: \"ru\", name: \"Russian\", flag: \"🇷🇺\" },\n00028|   { code: \"ja\", name: \"Japanese\", flag: \"🇯🇵\" },\n00029|   { code: \"ko\", name: \"Korean\", flag: \"🇰🇷\" },\n00030|   { code: \"zh\", name: \"Chinese\", flag: \"🇨🇳\" },\n00031|   { code: \"ar\", name: \"Arabic\", flag: \"🇸🇦\" },\n00032|   { code: \"hi\", name: \"Hindi\", flag: \"🇮🇳\" },\n00033|   { code: \"nl\", name: \"Dutch\", flag: \"🇳🇱\" },\n00034|   { code: \"sv\", name: \"Swedish\", flag: \"🇸🇪\" },\n00035|   { code: \"da\", name: \"Danish\", flag: \"🇩🇰\" },\n00036|   { code: \"no\", name: \"Norwegian\", flag: \"🇳🇴\" },\n00037|   { code: \"fi\", name: \"Finnish\", flag: \"🇫🇮\" },\n00038|   { code: \"pl\", name: \"Polish\", flag: \"🇵🇱\" },\n00039|   { code: \"cs\", name: \"Czech\", flag: \"🇨🇿\" },\n00040|   { code: \"hu\", name: \"Hungarian\", flag: \"🇭🇺\" },\n00041|   { code: \"tr\", name: \"Turkish\", flag: \"🇹🇷\" },\n00042|   { code: \"th\", name: \"Thai\", flag: \"🇹🇭\" },\n00043|   { code: \"vi\", name: \"Vietnamese\", flag: \"🇻🇳\" }\n00044| ]\n00045| \n00046| // Writing styles\n00047| const WRITING_STYLES = [\n00048|   { value: 'simple', label: 'Simple' },\n00049|   { value: 'business', label: 'Business' },\n00050|   { value: 'casual', label: 'Casual' },\n00051|   { value: 'academic', label: 'Academic' }\n00052| ]\n00053| \n00054| const TONES = [\n00055|   { value: 'enthusiastic', label: 'Enthusiastic' },\n00056|   { value: 'friendly', label: 'Friendly' },\n00057|   { value: 'confident', label: 'Confident' },\n00058|   { value: 'diplomatic', label: 'Diplomatic' }\n00059| ]\n00060| \n00061| export default function LingualaTranslator() {\n00062|   // Core processing state\n00063|   const [sourceText, setSourceText] = useState(\"\")\n00064|   const [resultText, setResultText] = useState(\"\")\n00065|   const [activeTab, setActiveTab] = useState(\"translate\")\n00066|   const [sourceLang, setSourceLang] = useState(\"auto\")\n00067|   const [targetLang, setTargetLang] = useState(\"en\")\n00068|   \n00069|   // Write mode settings\n00070|   const [correctionsOnly, setCorrectionsOnly] = useState(false)\n00071|   const [writingStyle, setWritingStyle] = useState(\"simple\")\n00072|   const [tone, setTone] = useState(\"friendly\")\n00073|   \n00074|   // UI state\n00075|   const [copySuccess, setCopySuccess] = useState(false)\n00076|   const [focusedArea, setFocusedArea] = useState<'source' | 'target' | null>(null)\n00077| \n00078|   // React Query hook\n00079|   const processing = useTextProcessing()\n00080| \n00081|   // Helper functions\n00082|   const getLanguage = (code: string) => {\n00083|     return LANGUAGES.find(lang => lang.code === code) || LANGUAGES[1]\n00084|   }\n00085| \n00086|   const getPlaceholderText = () => {\n00087|     if (activeTab === 'translate') {\n00088|       return 'Enter text to translate'\n00089|     } else {\n00090|       return 'Type or paste text to see ideas for improvement.\\n\\nClick any word for alternatives or to rephrase a sentence.'\n00091|     }\n00092|   }\n00093| \n00094|   const handleSourceTextChange = (text: string) => {\n00095|     setSourceText(text)\n00096|     if (text.trim()) {\n00097|       handleProcessing(text)\n00098|     } else {\n00099|       setResultText(\"\")\n00100|     }\n00101|   }\n00102| \n00103|   const handleProcessing = (text: string) => {\n00104|     const request: any = {\n00105|       text,\n00106|       operation: activeTab === 'translate' ? 'translate' : 'improve'\n00107|     }\n00108| \n00109|     // Only add language fields for translation\n00110|     if (activeTab === 'translate') {\n00111|       request.sourceLang = sourceLang\n00112|       request.targetLang = targetLang\n00113|     } else {\n00114|       // Add write mode settings\n00115|       request.correctionsOnly = correctionsOnly\n00116|       request.writingStyle = writingStyle\n00117|       request.tone = tone\n00118|     }\n00119| \n00120|     // Only add language fields for translation\n00121|     if (operation === 'translate') {\n00122|       request.sourceLang = sourceLang\n00123|       request.targetLang = targetLang\n00124|     }\n00125| \n00126|     processing.mutate(request, {\n00127|       onSuccess: (data) => {\n00128|         // Handle different operation results\n00129|         if (data.operation === 'translate') {\n00130|           setResultText(data.translatedText || '')\n00131|         } else if (data.operation === 'improve') {\n00132|           setResultText(data.improvedText || '')\n00133|         } else {\n00134|           setResultText('')\n00135|         }\n00136|         \n00137|         if (data.fallback) {\n00138|           toast.info(\"Using fallback processing\")\n00139|         }\n00140|       },\n00141|       onError: (error) => {\n00142|         console.error('Processing error:', error)\n00143|         setResultText(\"Service temporarily unavailable. Please try again later.\")\n00144|         toast.error(\"Processing failed\")\n00145|       }\n00146|     })\n00147|   }\n00148| \n00149| \n00150| \n00151|   const swapLanguages = () => {\n00152|     if (sourceLang === \"auto\" || activeTab !== 'translate') return\n00153|     \n00154|     setSourceLang(targetLang)\n00155|     setTargetLang(sourceLang)\n00156|     setSourceText(resultText)\n00157|     setResultText(sourceText)\n00158|   }\n00159| \n00160|   const copyToClipboard = async (text: string) => {\n00161|     try {\n00162|       await navigator.clipboard.writeText(text)\n00163|       setCopySuccess(true)\n00164|       toast.success(\"Copied to clipboard!\")\n00165|       setTimeout(() => setCopySuccess(false), 2000)\n00166|     } catch (error) {\n00167|       toast.error(\"Failed to copy to clipboard\")\n00168|     }\n00169|   }\n00170| \n00171|   const clearText = () => {\n00172|     setSourceText(\"\")\n00173|     setResultText(\"\")\n00174|   }\n00175| \n00176|   // Auto-process when languages or tab change\n00177|   useEffect(() => {\n00178|     if (sourceText.trim()) {\n00179|       const timeoutId = setTimeout(() => {\n00180|         handleProcessing(sourceText)\n00181|       }, 300) // Debounce\n00182|       \n00183|       return () => clearTimeout(timeoutId)\n00184|     }\n00185|   }, [sourceLang, targetLang, activeTab, correctionsOnly, writingStyle, tone])\n00186| \n00187|   const isLoading = processing.isPending\n00188| \n00189|   return (\n00190|     <div className=\"min-h-screen bg-white\">\n00191|       {/* Header */}\n00192|       <header className=\"border-b border-gray-200\">\n00193|         <div className=\"max-w-screen-xl mx-auto px-6 py-4\">\n00194|           <div className=\"flex items-center justify-between\">\n00195|             <div className=\"flex items-center space-x-8\">\n00196|               <LingualaLogo size=\"md\" />\n00197|             </div>\n00198|             <div className=\"flex items-center space-x-4\">\n00199|               <button className=\"p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-full transition-colors\">\n00200|                 <History className=\"h-5 w-5\" />\n00201|               </button>\n00202|               <button className=\"p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-full transition-colors\">\n00203|                 <Settings className=\"h-5 w-5\" />\n00204|               </button>\n00205|             </div>\n00206|           </div>\n00207|         </div>\n00208|       </header>\n00209| \n00210|       <main className=\"max-w-screen-xl mx-auto px-6 py-8\">\n00211|         {/* Tab Navigation */}\n00212|         <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n00213|           <TabsList className=\"grid w-full max-w-md grid-cols-2 mb-8\">\n00214|             <TabsTrigger value=\"translate\" className=\"flex items-center gap-2\">\n00215|               <Languages className=\"h-4 w-4\" />\n00216|               Translate text\n00217|               <div className=\"text-xs text-gray-500\">35 languages</div>\n00218|             </TabsTrigger>\n00219|             <TabsTrigger value=\"write\" className=\"flex items-center gap-2\">\n00220|               <FileText className=\"h-4 w-4\" />\n00221|               Write\n00222|               <div className=\"text-xs text-gray-500\">AI-powered edits</div>\n00223|             </TabsTrigger>\n00224|           </TabsList>\n00225| \n00226|           <TabsContent value=\"translate\" className=\"space-y-6\">\n00227|             {/* Language Selection Bar */}\n00228|             <div className=\"flex items-center justify-between bg-gray-50 rounded-lg p-4\">\n00229|               <Select value={sourceLang} onValueChange={setSourceLang}>\n00230|                 <SelectTrigger className=\"min-w-[160px] border-0 bg-transparent hover:bg-gray-100\">\n00231|                   <div className=\"flex items-center space-x-2\">\n00232|                     <span className=\"text-sm\">{getLanguage(sourceLang).flag}</span>\n00233|                     <span className=\"font-medium text-sm\">{getLanguage(sourceLang).name}</span>\n00234|                   </div>\n00235|                 </SelectTrigger>\n00236|                 <SelectContent>\n00237|                   {LANGUAGES.map(lang => (\n00238|                     <SelectItem key={lang.code} value={lang.code}>\n00239|                       <div className=\"flex items-center space-x-2\">\n00240|                         <span>{lang.flag}</span>\n00241|                         <span>{lang.name}</span>\n00242|                       </div>\n00243|                     </SelectItem>\n00244|                   ))}\n00245|                 </SelectContent>\n00246|               </Select>\n00247| \n00248|               <Button\n00249|                 variant=\"ghost\"\n00250|                 size=\"sm\"\n00251|                 onClick={swapLanguages}\n00252|                 className=\"p-2 hover:bg-gray-200 rounded-full\"\n00253|                 disabled={sourceLang === \"auto\"}\n00254|               >\n00255|                 <ArrowUpDown className=\"h-4 w-4\" />\n00256|               </Button>\n00257| \n00258|               <Select value={targetLang} onValueChange={setTargetLang}>\n00259|                 <SelectTrigger className=\"min-w-[160px] border-0 bg-transparent hover:bg-gray-100\">\n00260|                   <div className=\"flex items-center space-x-2\">\n00261|                     <span className=\"text-sm\">{getLanguage(targetLang).flag}</span>\n00262|                     <span className=\"font-medium text-sm\">{getLanguage(targetLang).name}</span>\n00263|                   </div>\n00264|                 </SelectTrigger>\n00265|                 <SelectContent>\n00266|                   {LANGUAGES.filter(lang => lang.code !== \"auto\").map(lang => (\n00267|                     <SelectItem key={lang.code} value={lang.code}>\n00268|                       <div className=\"flex items-center space-x-2\">\n00269|                         <span>{lang.flag}</span>\n00270|                         <span>{lang.name}</span>\n00271|                       </div>\n00272|                     </SelectItem>\n00273|                   ))}\n00274|                 </SelectContent>\n00275|               </Select>\n00276|             </div>\n00277|           </TabsContent>\n00278| \n00279|           <TabsContent value=\"write\" className=\"space-y-6\">\n00280|             {/* Write Mode Settings */}\n00281|             <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n00282|               <div className=\"space-y-4\">\n00283|                 <div className=\"flex items-center justify-between\">\n00284|                   <Label htmlFor=\"corrections-only\" className=\"text-sm font-medium\">Corrections only</Label>\n00285|                   <Switch\n00286|                     id=\"corrections-only\"\n00287|                     checked={correctionsOnly}\n00288|                     onCheckedChange={setCorrectionsOnly}\n00289|                   />\n00290|                 </div>\n00291|               </div>\n00292|               \n00293|               <div className=\"space-y-4\">\n00294|                 <div className=\"grid grid-cols-2 gap-4\">\n00295|                   <div>\n00296|                     <Label className=\"text-sm font-medium mb-2 block\">Style</Label>\n00297|                     <Select value={writingStyle} onValueChange={setWritingStyle}>\n00298|                       <SelectTrigger>\n00299|                         <SelectValue />\n00300|                       </SelectTrigger>\n00301|                       <SelectContent>\n00302|                         {WRITING_STYLES.map(style => (\n00303|                           <SelectItem key={style.value} value={style.value}>\n00304|                             {style.label}\n00305|                           </SelectItem>\n00306|                         ))}\n00307|                       </SelectContent>\n00308|                     </Select>\n00309|                   </div>\n00310|                   \n00311|                   <div>\n00312|                     <Label className=\"text-sm font-medium mb-2 block\">Tone</Label>\n00313|                     <Select value={tone} onValueChange={setTone}>\n00314|                       <SelectTrigger>\n00315|                         <SelectValue />\n00316|                       </SelectTrigger>\n00317|                       <SelectContent>\n00318|                         {TONES.map(toneOption => (\n00319|                           <SelectItem key={toneOption.value} value={toneOption.value}>\n00320|                             {toneOption.label}\n00321|                           </SelectItem>\n00322|                         ))}\n00323|                       </SelectContent>\n00324|                     </Select>\n00325|                   </div>\n00326|                 </div>\n00327|               </div>\n00328|             </div>\n00329|           </TabsContent>\n00330| \n00331|           {/* Processing Areas */}\n00332|           <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-0 border border-gray-200 rounded-lg overflow-hidden\">\n00333|             {/* Source Text */}\n00334|             <div className=\"relative\">\n00335|               <div className=\"border-b border-gray-200 lg:border-b-0 lg:border-r\">\n00336|                 <Textarea\n00337|                   value={sourceText}\n00338|                   onChange={(e) => handleSourceTextChange(e.target.value)}\n00339|                   onFocus={() => setFocusedArea('source')}\n00340|                   onBlur={() => setFocusedArea(null)}\n00341|                   placeholder={getPlaceholderText()}\n00342|                   className=\"min-h-[400px] text-lg border-0 rounded-none resize-none focus:ring-2 focus:ring-blue-500 focus-visible:ring-2 focus-visible:ring-blue-500 p-6\"\n00343|                   style={{ fontSize: '16px', lineHeight: '1.5' }}\n00344|                 />\n00345|                 \n00346|                 {/* Source Text Controls */}\n00347|                 <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n00348|                   <div className=\"flex items-center space-x-2\">\n00349|                     {sourceText && (\n00350|                       <Button\n00351|                         variant=\"ghost\"\n00352|                         size=\"sm\"\n00353|                         onClick={clearText}\n00354|                         className=\"p-2 hover:bg-gray-200 rounded-full\"\n00355|                       >\n00356|                         <X className=\"h-4 w-4\" />\n00357|                       </Button>\n00358|                     )}\n00359|                   </div>\n00360|                   \n00361|                   <div className=\"flex items-center space-x-2\">\n00362|                     <Button\n00363|                       variant=\"ghost\"\n00364|                       size=\"sm\"\n00365|                       className=\"p-2 hover:bg-gray-200 rounded-full\"\n00366|                       disabled\n00367|                     >\n00368|                       <Mic className=\"h-4 w-4\" />\n00369|                     </Button>\n00370|                   </div>\n00371|                 </div>\n00372|               </div>\n00373|             </div>\n00374| \n00375|             {/* Result Text */}\n00376|             <div className=\"relative\">\n00377|               {/* Editing Tools Sidebar */}\n00378|               {activeTab === 'write' && (\n00379|                 <div className=\"absolute top-0 right-0 w-64 h-full bg-gray-50 border-l border-gray-200 p-4\">\n00380|                   <div className=\"text-sm font-medium text-gray-700 mb-4\">Editing tools</div>\n00381|                   \n00382|                   <div className=\"space-y-4\">\n00383|                     <div className=\"flex items-center justify-between\">\n00384|                       <div className=\"flex items-center gap-2\">\n00385|                         <Check className=\"h-4 w-4 text-green-500\" />\n00386|                         <span className=\"text-sm\">Corrections only</span>\n00387|                       </div>\n00388|                       <Switch checked={correctionsOnly} onCheckedChange={setCorrectionsOnly} />\n00389|                     </div>\n00390|                     \n00391|                     <div className=\"space-y-2\">\n00392|                       <div className=\"flex items-center gap-2\">\n00393|                         <FileText className=\"h-4 w-4\" />\n00394|                         <span className=\"text-sm font-medium\">Styles</span>\n00395|                       </div>\n00396|                       <Select value={`${writingStyle}-${tone}`} onValueChange={(value) => {\n00397|                         const [style, toneValue] = value.split('-')\n00398|                         setWritingStyle(style)\n00399|                         setTone(toneValue)\n00400|                       }}>\n00401|                         <SelectTrigger className=\"text-sm\">\n00402|                           <SelectValue placeholder=\"None set\" />\n00403|                         </SelectTrigger>\n00404|                         <SelectContent>\n00405|                           <SelectItem value=\"simple-friendly\">Simple & Friendly</SelectItem>\n00406|                           <SelectItem value=\"business-confident\">Business & Confident</SelectItem>\n00407|                           <SelectItem value=\"casual-enthusiastic\">Casual & Enthusiastic</SelectItem>\n00408|                           <SelectItem value=\"academic-diplomatic\">Academic & Diplomatic</SelectItem>\n00409|                         </SelectContent>\n00410|                       </Select>\n00411|                     </div>\n00412|                     \n00413|                     <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n00414|                       <Settings className=\"h-4 w-4\" />\n00415|                       <span>Show changes</span>\n00416|                       <Switch disabled />\n00417|                     </div>\n00418|                   </div>\n00419|                   \n00420|                   <div className=\"mt-8\">\n00421|                     <div className=\"text-sm font-medium text-gray-700 mb-2\">Customizations</div>\n00422|                     <Button variant=\"outline\" className=\"w-full text-sm\">\n00423|                       <Settings className=\"h-4 w-4 mr-2\" />\n00424|                       Custom rules\n00425|                       <span className=\"ml-auto bg-blue-600 text-white text-xs px-2 py-1 rounded\">Pro</span>\n00426|                     </Button>\n00427|                   </div>\n00428|                 </div>\n00429|               )}\n00430|               \n00431|               <div className={`min-h-[400px] p-6 text-lg ${activeTab === 'write' ? 'mr-64' : ''}`} style={{ fontSize: '16px', lineHeight: '1.5' }}>\n00432|                 {isLoading ? (\n00433|                   <div className=\"flex items-center justify-center h-full\">\n00434|                     <Loader2 className=\"h-6 w-6 animate-spin text-blue-500\" />\n00435|                   </div>\n00436|                 ) : (\n00437|                   <div \n00438|                     className={`whitespace-pre-wrap ${!resultText ? 'text-gray-400' : 'text-gray-900'}`}\n00439|                     onFocus={() => setFocusedArea('target')}\n00440|                     onBlur={() => setFocusedArea(null)}\n00441|                     tabIndex={0}\n00442|                   >\n00443|                     {resultText || (activeTab === 'translate' ? 'Translation will appear here' : 'Improved text will appear here')}\n00444|                   </div>\n00445|                 )}\n00446|               </div>\n00447| \n00448|               {/* Result Text Controls */}\n00449|               {resultText && !isLoading && (\n00450|                 <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n00451|                   <div className=\"flex items-center space-x-2\">\n00452|                     <Button\n00453|                       variant=\"ghost\"\n00454|                       size=\"sm\"\n00455|                       onClick={() => copyToClipboard(resultText)}\n00456|                       className=\"p-2 hover:bg-gray-200 rounded-full\"\n00457|                     >\n00458|                       {copySuccess ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n00459|                     </Button>\n00460|                     <Button\n00461|                       variant=\"ghost\"\n00462|                       size=\"sm\"\n00463|                       className=\"p-2 hover:bg-gray-200 rounded-full\"\n00464|                       disabled\n00465|                     >\n00466|                       <Volume2 className=\"h-4 w-4\" />\n00467|                     </Button>\n00468|                     <Button\n00469|                       variant=\"ghost\"\n00470|                       size=\"sm\"\n00471|                       className=\"p-2 hover:bg-gray-200 rounded-full\"\n00472|                       disabled\n00473|                     >\n00474|                       <Star className=\"h-4 w-4\" />\n00475|                     </Button>\n00476|                   </div>\n00477|                   \n00478|                   <Button\n00479|                     variant=\"ghost\"\n00480|                     size=\"sm\"\n00481|                     className=\"p-2 hover:bg-gray-200 rounded-full\"\n00482|                     disabled\n00483|                   >\n00484|                     <MoreHorizontal className=\"h-4 w-4\" />\n00485|                   </Button>\n00486|                 </div>\n00487|               )}\n00488|             </div>\n00489|           </div>\n00490|         </Tabs>\n00491|       </main>\n00492|     </div>\n00493|   )\n00494| }\n</file>",
    "metadata": {
      "preview": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { \n  ArrowUpDown, Copy, Volume2, Star, MoreHorizontal,\n  Check, X, Mic, Settings, History, Loader2, Languages, FileText\n} from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { LingualaLogo } from \"@/components/ui/linguala-logo\"\nimport { useTextProcessing } from \"@/hooks/use-translation\"\n\n// Common languages like Google Translate\nconst LANGUAGES = [\n  { code: \"auto\", name: \"Detect language\", flag: \"🌐\" },"
    },
    "title": "components/linguala-translator.tsx",
    "time": {
      "start": 1759685235598,
      "end": 1759685235616
    }
  }
}
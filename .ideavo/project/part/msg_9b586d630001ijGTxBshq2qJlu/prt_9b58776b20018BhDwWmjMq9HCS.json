{
  "id": "prt_9b58776b20018BhDwWmjMq9HCS",
  "messageID": "msg_9b586d630001ijGTxBshq2qJlu",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01JBjJk9boehUFF4qLFiDecA",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/settings-modal.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Slider } from \"@/components/ui/slider\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { toast } from \"sonner\"\nimport { \n  Palette, Languages, FileText, Zap, Bell, Shield, \n  Download, Upload, Trash2, RotateCcw, Check, AlertTriangle \n} from \"lucide-react\"\nimport { useSettings } from \"@/components/providers/settings-provider\"\nimport { useTheme } from \"@/components/providers/theme-provider\"\n\ninterface SettingsModalProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\nexport function SettingsModal({ open, onOpenChange }: SettingsModalProps) {\n  const { settings, updateSetting, resetSettings, exportSettings, importSettings, clearAllData } = useSettings()\n  const { theme, setTheme } = useTheme()\n  const [activeTab, setActiveTab] = useState(\"appearance\")\n  const [showResetConfirm, setShowResetConfirm] = useState(false)\n  const [showClearDataConfirm, setShowClearDataConfirm] = useState(false)\n\n  const handleExportSettings = () => {\n    const data = exportSettings()\n    const blob = new Blob([data], { type: 'application/json' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = 'linguala-settings.json'\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    URL.revokeObjectURL(url)\n    toast.success(\"Settings exported successfully!\")\n  }\n\n  const handleImportSettings = () => {\n    const input = document.createElement('input')\n    input.type = 'file'\n    input.accept = '.json'\n    input.onchange = (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0]\n      if (file) {\n        const reader = new FileReader()\n        reader.onload = (e) => {\n          const data = e.target?.result as string\n          if (importSettings(data)) {\n            toast.success(\"Settings imported successfully!\")\n          } else {\n            toast.error(\"Failed to import settings. Please check the file format.\")\n          }\n        }\n        reader.readAsText(file)\n      }\n    }\n    input.click()\n  }\n\n  const handleResetSettings = () => {\n    resetSettings()\n    setShowResetConfirm(false)\n    toast.success(\"Settings reset to defaults!\")\n  }\n\n  const handleClearAllData = () => {\n    clearAllData()\n    setShowClearDataConfirm(false)\n    toast.success(\"All data cleared successfully!\")\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden linguala-glass\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold linguala-text-gradient flex items-center gap-2\">\n            ⚙️ Settings\n          </DialogTitle>\n          <DialogDescription>\n            Customize your Linguala experience with these preferences\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full h-full\">\n          <TabsList className=\"grid w-full grid-cols-5 mb-6 linguala-glass\">\n            <TabsTrigger value=\"appearance\" className=\"flex items-center gap-2\">\n              <Palette className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Theme</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"translation\" className=\"flex items-center gap-2\">\n              <Languages className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Translation</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"writing\" className=\"flex items-center gap-2\">\n              <FileText className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Writing</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"performance\" className=\"flex items-center gap-2\">\n              <Zap className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Performance</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"privacy\" className=\"flex items-center gap-2\">\n              <Shield className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Privacy</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <div className=\"max-h-[500px] overflow-y-auto linguala-scrollbar pr-2\">\n            <TabsContent value=\"appearance\" className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  🎨 Appearance & Theme\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label htmlFor=\"theme-select\">Color Theme</Label>\n                      <Select value={theme} onValueChange={(value: \"light\" | \"dark\" | \"system\") => setTheme(value)}>\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"light\">☀️ Light</SelectItem>\n                          <SelectItem value=\"dark\">🌙 Dark</SelectItem>\n                          <SelectItem value=\"system\">🖥️ System</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <Label htmlFor=\"font-size\">Font Size</Label>\n                      <Select value={settings.fontSize} onValueChange={(value: \"small\" | \"medium\" | \"large\") => updateSetting('fontSize', value)}>\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"small\">Small</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"large\">Large</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label htmlFor=\"compact-mode\">Compact Mode</Label>\n                        <p className=\"text-xs text-muted-foreground\">Reduce spacing and padding</p>\n                      </div>\n                      <Switch\n                        id=\"compact-mode\"\n                        checked={settings.compactMode}\n                        onCheckedChange={(checked) => updateSetting('compactMode', checked)}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label htmlFor=\"animations\">Animations</Label>\n                        <p className=\"text-xs text-muted-foreground\">Enable visual transitions</p>\n                      </div>\n                      <Switch\n                        id=\"animations\"\n                        checked={settings.showAnimations}\n                        onCheckedChange={(checked) => updateSetting('showAnimations', checked)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"translation\" className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  🌍 Translation Preferences\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Default Source Language</Label>\n                      <Select value={settings.defaultSourceLang} onValueChange={(value) => updateSetting('defaultSourceLang', value)}>\n                        <SelectTrigger className=\"w-40\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"auto\">🌐 Auto-detect</SelectItem>\n                          <SelectItem value=\"en\">🇬🇧 English</SelectItem>\n                          <SelectItem value=\"es\">🇪🇸 Spanish</SelectItem>\n                          <SelectItem value=\"fr\">🇫🇷 French</SelectItem>\n                          <SelectItem value=\"de\">🇩🇪 German</SelectItem>\n                          <SelectItem value=\"it\">🇮🇹 Italian</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Default Target Language</Label>\n                      <Select value={settings.defaultTargetLang} onValueChange={(value) => updateSetting('defaultTargetLang', value)}>\n                        <SelectTrigger className=\"w-40\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"en\">🇬🇧 English</SelectItem>\n                          <SelectItem value=\"es\">🇪🇸 Spanish</SelectItem>\n                          <SelectItem value=\"fr\">🇫🇷 French</SelectItem>\n                          <SelectItem value=\"de\">🇩🇪 German</SelectItem>\n                          <SelectItem value=\"it\">🇮🇹 Italian</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Auto-detect Language</Label>\n                        <p className=\"text-xs text-muted-foreground\">Automatically detect source language</p>\n                      </div>\n                      <Switch\n                        checked={settings.autoDetectLanguage}\n                        onCheckedChange={(checked) => updateSetting('autoDetectLanguage', checked)}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Show Confidence Score</Label>\n                        <p className=\"text-xs text-muted-foreground\">Display translation confidence</p>\n                      </div>\n                      <Switch\n                        checked={settings.showConfidenceScore}\n                        onCheckedChange={(checked) => updateSetting('showConfidenceScore', checked)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"writing\" className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  ✏️ Writing Assistant\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Default Writing Style</Label>\n                      <Select value={settings.defaultWritingStyle} onValueChange={(value) => updateSetting('defaultWritingStyle', value)}>\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"simple\">Simple</SelectItem>\n                          <SelectItem value=\"business\">Business</SelectItem>\n                          <SelectItem value=\"casual\">Casual</SelectItem>\n                          <SelectItem value=\"academic\">Academic</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Default Tone</Label>\n                      <Select value={settings.defaultTone} onValueChange={(value) => updateSetting('defaultTone', value)}>\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"friendly\">Friendly</SelectItem>\n                          <SelectItem value=\"professional\">Professional</SelectItem>\n                          <SelectItem value=\"enthusiastic\">Enthusiastic</SelectItem>\n                          <SelectItem value=\"diplomatic\">Diplomatic</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Auto Corrections Only</Label>\n                        <p className=\"text-xs text-muted-foreground\">Focus on grammar corrections by default</p>\n                      </div>\n                      <Switch\n                        checked={settings.autoCorrectionsOnly}\n                        onCheckedChange={(checked) => updateSetting('autoCorrectionsOnly', checked)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"performance\" className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  ⚡ Performance & Notifications\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-6\">\n                    <div className=\"space-y-2\">\n                      <Label>Auto-save Interval: {settings.autoSaveInterval}s</Label>\n                      <Slider\n                        value={[settings.autoSaveInterval]}\n                        onValueChange={([value]) => updateSetting('autoSaveInterval', value)}\n                        max={300}\n                        min={10}\n                        step={10}\n                        className=\"w-full\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Processing Timeout: {settings.processingTimeout}s</Label>\n                      <Slider\n                        value={[settings.processingTimeout]}\n                        onValueChange={([value]) => updateSetting('processingTimeout', value)}\n                        max={120}\n                        min={10}\n                        step={5}\n                        className=\"w-full\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Max History Items: {settings.maxHistoryItems}</Label>\n                      <Slider\n                        value={[settings.maxHistoryItems]}\n                        onValueChange={([value]) => updateSetting('maxHistoryItems', value)}\n                        max={1000}\n                        min={10}\n                        step={10}\n                        className=\"w-full\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium flex items-center gap-2\">\n                      🔔 Notifications\n                    </h4>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <Label>Sound Notifications</Label>\n                      <Switch\n                        checked={settings.enableSoundNotifications}\n                        onCheckedChange={(checked) => updateSetting('enableSoundNotifications', checked)}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Processing Toasts</Label>\n                      <Switch\n                        checked={settings.showProcessingToasts}\n                        onCheckedChange={(checked) => updateSetting('showProcessingToasts', checked)}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Success Toasts</Label>\n                      <Switch\n                        checked={settings.showSuccessToasts}\n                        onCheckedChange={(checked) => updateSetting('showSuccessToasts', checked)}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Error Toasts</Label>\n                      <Switch\n                        checked={settings.showErrorToasts}\n                        onCheckedChange={(checked) => updateSetting('showErrorToasts', checked)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"privacy\" className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  🔒 Privacy & Data Management\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Save Translation History</Label>\n                        <p className=\"text-xs text-muted-foreground\">Store translations locally for quick access</p>\n                      </div>\n                      <Switch\n                        checked={settings.saveTranslationHistory}\n                        onCheckedChange={(checked) => updateSetting('saveTranslationHistory', checked)}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Data Retention: {settings.dataRetentionDays} days</Label>\n                      <p className=\"text-xs text-muted-foreground\">Auto-delete old translations</p>\n                      <Slider\n                        value={[settings.dataRetentionDays]}\n                        onValueChange={([value]) => updateSetting('dataRetentionDays', value)}\n                        max={365}\n                        min={1}\n                        step={7}\n                        className=\"w-full\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-0.5\">\n                        <Label>Anonymous Analytics</Label>\n                        <p className=\"text-xs text-muted-foreground\">Help improve Linguala (no personal data)</p>\n                      </div>\n                      <Switch\n                        checked={settings.analyticsEnabled}\n                        onCheckedChange={(checked) => updateSetting('analyticsEnabled', checked)}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium flex items-center gap-2\">\n                      💾 Data Management\n                    </h4>\n                    \n                    <div className=\"space-y-2\">\n                      <Button\n                        onClick={handleExportSettings}\n                        variant=\"outline\"\n                        className=\"w-full justify-start\"\n                      >\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Export Settings\n                      </Button>\n\n                      <Button\n                        onClick={handleImportSettings}\n                        variant=\"outline\"\n                        className=\"w-full justify-start\"\n                      >\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        Import Settings\n                      </Button>\n\n                      <Separator />\n\n                      {!showResetConfirm ? (\n                        <Button\n                          onClick={() => setShowResetConfirm(true)}\n                          variant=\"outline\"\n                          className=\"w-full justify-start text-orange-600 hover:text-orange-700\"\n                        >\n                          <RotateCcw className=\"h-4 w-4 mr-2\" />\n                          Reset to Defaults\n                        </Button>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm text-orange-600 flex items-center gap-2\">\n                            <AlertTriangle className=\"h-4 w-4\" />\n                            This will reset all settings to defaults\n                          </p>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              onClick={handleResetSettings}\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              className=\"flex-1\"\n                            >\n                              <Check className=\"h-4 w-4 mr-1\" />\n                              Confirm\n                            </Button>\n                            <Button\n                              onClick={() => setShowResetConfirm(false)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"flex-1\"\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n\n                      {!showClearDataConfirm ? (\n                        <Button\n                          onClick={() => setShowClearDataConfirm(true)}\n                          variant=\"outline\"\n                          className=\"w-full justify-start text-red-600 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-2\" />\n                          Clear All Data\n                        </Button>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm text-red-600 flex items-center gap-2\">\n                            <AlertTriangle className=\"h-4 w-4\" />\n                            This will permanently delete all data\n                          </p>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              onClick={handleClearAllData}\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              className=\"flex-1\"\n                            >\n                              <Check className=\"h-4 w-4 mr-1\" />\n                              Confirm\n                            </Button>\n                            <Button\n                              onClick={() => setShowClearDataConfirm(false)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"flex-1\"\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n          </div>\n\n          <Separator className=\"my-4\" />\n          \n          <div className=\"flex justify-between items-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Settings are automatically saved locally\n            </p>\n            <Button onClick={() => onOpenChange(false)} className=\"linguala-button\">\n              Close\n            </Button>\n          </div>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/settings-modal.tsx",
      "exists": false
    },
    "title": "components/settings-modal.tsx",
    "time": {
      "start": 1759687235177,
      "end": 1759687235178
    }
  }
}
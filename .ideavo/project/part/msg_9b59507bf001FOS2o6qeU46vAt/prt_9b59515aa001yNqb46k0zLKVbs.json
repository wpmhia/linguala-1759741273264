{
  "id": "prt_9b59515aa001yNqb46k0zLKVbs",
  "messageID": "msg_9b59507bf001FOS2o6qeU46vAt",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01PJNhEF6fKNjm2VcSMfnuDV",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/providers/settings-provider.tsx"
    },
    "output": "<file>\n00001| \"use client\"\n00002| \n00003| import { createContext, useContext, useEffect, useState } from \"react\"\n00004| \n00005| // Settings interface\n00006| interface AppSettings {\n00007|   // Appearance\n00008|   fontSize: 'small' | 'medium' | 'large'\n00009|   compactMode: boolean\n00010|   showAnimations: boolean\n00011|   \n00012|   // Translation defaults\n00013|   defaultSourceLang: string\n00014|   defaultTargetLang: string\n00015|   autoDetectLanguage: boolean\n00016|   showConfidenceScore: boolean\n00017|   \n00018|   // Writing preferences\n00019|   defaultWritingStyle: string\n00020|   defaultTone: string\n00021|   autoCorrectionsOnly: boolean\n00022|   \n00023|   // Performance\n00024|   autoSaveInterval: number // in seconds\n00025|   processingTimeout: number // in seconds\n00026|   maxHistoryItems: number\n00027|   \n00028|   // Notifications\n00029|   enableSoundNotifications: boolean\n00030|   showProcessingToasts: boolean\n00031|   showSuccessToasts: boolean\n00032|   showErrorToasts: boolean\n00033|   \n00034|   // Data & Privacy\n00035|   saveTranslationHistory: boolean\n00036|   dataRetentionDays: number\n00037|   analyticsEnabled: boolean\n00038| }\n00039| \n00040| const defaultSettings: AppSettings = {\n00041|   // Appearance\n00042|   fontSize: 'medium',\n00043|   compactMode: false,\n00044|   showAnimations: true,\n00045|   \n00046|   // Translation defaults\n00047|   defaultSourceLang: 'auto',\n00048|   defaultTargetLang: 'en',\n00049|   autoDetectLanguage: true,\n00050|   showConfidenceScore: false,\n00051|   \n00052|   // Writing preferences\n00053|   defaultWritingStyle: 'simple',\n00054|   defaultTone: 'friendly',\n00055|   autoCorrectionsOnly: false,\n00056|   \n00057|   // Performance\n00058|   autoSaveInterval: 30,\n00059|   processingTimeout: 30,\n00060|   maxHistoryItems: 100,\n00061|   \n00062|   // Notifications\n00063|   enableSoundNotifications: false,\n00064|   showProcessingToasts: true,\n00065|   showSuccessToasts: true,\n00066|   showErrorToasts: true,\n00067|   \n00068|   // Data & Privacy\n00069|   saveTranslationHistory: true,\n00070|   dataRetentionDays: 30,\n00071|   analyticsEnabled: false,\n00072| }\n00073| \n00074| type SettingsContextType = {\n00075|   settings: AppSettings\n00076|   updateSetting: <K extends keyof AppSettings>(key: K, value: AppSettings[K]) => void\n00077|   resetSettings: () => void\n00078|   exportSettings: () => string\n00079|   importSettings: (data: string) => boolean\n00080|   clearAllData: () => void\n00081| }\n00082| \n00083| const SettingsContext = createContext<SettingsContextType | undefined>(undefined)\n00084| \n00085| const STORAGE_KEY = 'linguala-settings'\n00086| \n00087| export function SettingsProvider({ children }: { children: React.ReactNode }) {\n00088|   const [settings, setSettings] = useState<AppSettings>(defaultSettings)\n00089| \n00090|   // Load settings from localStorage on mount\n00091|   useEffect(() => {\n00092|     try {\n00093|       const stored = localStorage.getItem(STORAGE_KEY)\n00094|       if (stored) {\n00095|         const parsedSettings = JSON.parse(stored)\n00096|         setSettings({ ...defaultSettings, ...parsedSettings })\n00097|       }\n00098|     } catch (error) {\n00099|       console.warn('Failed to load settings from localStorage:', error)\n00100|     }\n00101|   }, [])\n00102| \n00103|   // Save settings to localStorage whenever they change\n00104|   useEffect(() => {\n00105|     try {\n00106|       localStorage.setItem(STORAGE_KEY, JSON.stringify(settings))\n00107|     } catch (error) {\n00108|       console.warn('Failed to save settings to localStorage:', error)\n00109|     }\n00110|   }, [settings])\n00111| \n00112|   const updateSetting = <K extends keyof AppSettings>(key: K, value: AppSettings[K]) => {\n00113|     setSettings(prev => ({ ...prev, [key]: value }))\n00114|   }\n00115| \n00116|   const resetSettings = () => {\n00117|     setSettings(defaultSettings)\n00118|     localStorage.removeItem(STORAGE_KEY)\n00119|   }\n00120| \n00121|   const exportSettings = () => {\n00122|     return JSON.stringify(settings, null, 2)\n00123|   }\n00124| \n00125|   const importSettings = (data: string): boolean => {\n00126|     try {\n00127|       const importedSettings = JSON.parse(data)\n00128|       const validatedSettings = { ...defaultSettings, ...importedSettings }\n00129|       setSettings(validatedSettings)\n00130|       return true\n00131|     } catch (error) {\n00132|       console.error('Failed to import settings:', error)\n00133|       return false\n00134|     }\n00135|   }\n00136| \n00137|   const clearAllData = () => {\n00138|     // Clear settings\n00139|     resetSettings()\n00140|     \n00141|     // Clear other localStorage data (translation history, etc.)\n00142|     const keysToRemove = []\n00143|     for (let i = 0; i < localStorage.length; i++) {\n00144|       const key = localStorage.key(i)\n00145|       if (key && key.startsWith('linguala-')) {\n00146|         keysToRemove.push(key)\n00147|       }\n00148|     }\n00149|     keysToRemove.forEach(key => localStorage.removeItem(key))\n00150|   }\n00151| \n00152|   const value: SettingsContextType = {\n00153|     settings,\n00154|     updateSetting,\n00155|     resetSettings,\n00156|     exportSettings,\n00157|     importSettings,\n00158|     clearAllData,\n00159|   }\n00160| \n00161|   return (\n00162|     <SettingsContext.Provider value={value}>\n00163|       {children}\n00164|     </SettingsContext.Provider>\n00165|   )\n00166| }\n00167| \n00168| export function useSettings() {\n00169|   const context = useContext(SettingsContext)\n00170|   if (!context) {\n00171|     throw new Error('useSettings must be used within a SettingsProvider')\n00172|   }\n00173|   return context\n00174| }\n</file>",
    "metadata": {
      "preview": "\"use client\"\n\nimport { createContext, useContext, useEffect, useState } from \"react\"\n\n// Settings interface\ninterface AppSettings {\n  // Appearance\n  fontSize: 'small' | 'medium' | 'large'\n  compactMode: boolean\n  showAnimations: boolean\n  \n  // Translation defaults\n  defaultSourceLang: string\n  defaultTargetLang: string\n  autoDetectLanguage: boolean\n  showConfidenceScore: boolean\n  \n  // Writing preferences\n  defaultWritingStyle: string\n  defaultTone: string"
    },
    "title": "components/providers/settings-provider.tsx",
    "time": {
      "start": 1759688070853,
      "end": 1759688070856
    }
  }
}
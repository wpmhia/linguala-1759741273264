{
  "id": "prt_9b5a76ee4001bt2N1TudFHksxh",
  "messageID": "msg_9b5a6a979001Phdce5MG7N4MVI",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "edit",
  "callID": "toolu_01LnhK9A8C6FDubJZLLveEcU",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/translation-service.ts",
      "oldString": "    // Prepare the translation options\n    const targetLanguage = LANGUAGE_MAP[targetLang] || targetLang\n    \n    // Try fallback first for better reliability\n    const fallbackTranslation = getFallbackTranslation(text, targetLanguage)\n    if (fallbackTranslation) {\n      return {\n        translatedText: fallbackTranslation,\n        sourceLang,\n        targetLang,\n        fallback: true\n      }\n    }\n\n    // For now, use a simple pattern-based translation to avoid API hanging issues\n    // This is a temporary solution until the network issue is resolved\n    const simpleTranslations: Record<string, Record<string, string>> = {\n      'test': { 'Spanish': 'prueba', 'French': 'test', 'German': 'Test' },\n      'hello': { 'Spanish': 'hola', 'French': 'bonjour', 'German': 'hallo' },\n      'world': { 'Spanish': 'mundo', 'French': 'monde', 'German': 'Welt' },\n      'document': { 'Spanish': 'documento', 'French': 'document', 'German': 'Dokument' },\n      'translation': { 'Spanish': 'traducción', 'French': 'traduction', 'German': 'Übersetzung' }\n    }\n\n    const lowerText = text.toLowerCase().trim()\n    for (const [key, translations] of Object.entries(simpleTranslations)) {\n      if (lowerText.includes(key)) {\n        return {\n          translatedText: translations[targetLanguage] || text,\n          sourceLang,\n          targetLang,\n          fallback: true\n        }\n      }\n    }\n\n    // If no pattern matches, provide a basic response\n    return {\n      translatedText: `[Translated to ${targetLanguage}] ${text}`,\n      sourceLang,\n      targetLang,\n      fallback: true\n    }",
      "newString": "    // Prepare the translation options\n    const targetLanguage = LANGUAGE_MAP[targetLang] || targetLang\n    const sourceLanguage = sourceLang && sourceLang !== 'auto' ? LANGUAGE_MAP[sourceLang] || sourceLang : 'auto'\n    \n    // Try Qwen3 translation first\n    try {\n      const result = await translateWithQwen3Max(text, sourceLanguage, targetLanguage)\n      return result\n    } catch (error) {\n      console.error('Qwen3 translation failed, using fallback:', error)\n      \n      // Try fallback translation for common phrases\n      const fallbackTranslation = getFallbackTranslation(text, targetLanguage)\n      if (fallbackTranslation) {\n        return {\n          translatedText: fallbackTranslation,\n          sourceLang,\n          targetLang,\n          fallback: true\n        }\n      }\n\n      // Enhanced pattern-based translation fallback\n      const result = getPatternBasedTranslation(text, targetLanguage)\n      return {\n        translatedText: result,\n        sourceLang,\n        targetLang,\n        fallback: true\n      }\n    }"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "diff": "Index: /home/user/project/lib/translation-service.ts\n===================================================================\n--- /home/user/project/lib/translation-service.ts\n+++ /home/user/project/lib/translation-service.ts\n@@ -134,48 +134,36 @@\n   }\n \n   // Prepare the translation options\n   const targetLanguage = LANGUAGE_MAP[targetLang] || targetLang\n+  const sourceLanguage = sourceLang && sourceLang !== 'auto' ? LANGUAGE_MAP[sourceLang] || sourceLang : 'auto'\n   \n-  // Try fallback first for better reliability\n-  const fallbackTranslation = getFallbackTranslation(text, targetLanguage)\n-  if (fallbackTranslation) {\n-    return {\n-      translatedText: fallbackTranslation,\n-      sourceLang,\n-      targetLang,\n-      fallback: true\n-    }\n-  }\n-\n-  // For now, use a simple pattern-based translation to avoid API hanging issues\n-  // This is a temporary solution until the network issue is resolved\n-  const simpleTranslations: Record<string, Record<string, string>> = {\n-    'test': { 'Spanish': 'prueba', 'French': 'test', 'German': 'Test' },\n-    'hello': { 'Spanish': 'hola', 'French': 'bonjour', 'German': 'hallo' },\n-    'world': { 'Spanish': 'mundo', 'French': 'monde', 'German': 'Welt' },\n-    'document': { 'Spanish': 'documento', 'French': 'document', 'German': 'Dokument' },\n-    'translation': { 'Spanish': 'traducción', 'French': 'traduction', 'German': 'Übersetzung' }\n-  }\n-\n-  const lowerText = text.toLowerCase().trim()\n-  for (const [key, translations] of Object.entries(simpleTranslations)) {\n-    if (lowerText.includes(key)) {\n+  // Try Qwen3 translation first\n+  try {\n+    const result = await translateWithQwen3Max(text, sourceLanguage, targetLanguage)\n+    return result\n+  } catch (error) {\n+    console.error('Qwen3 translation failed, using fallback:', error)\n+    \n+    // Try fallback translation for common phrases\n+    const fallbackTranslation = getFallbackTranslation(text, targetLanguage)\n+    if (fallbackTranslation) {\n       return {\n-        translatedText: translations[targetLanguage] || text,\n+        translatedText: fallbackTranslation,\n         sourceLang,\n         targetLang,\n         fallback: true\n       }\n     }\n-  }\n \n-  // If no pattern matches, provide a basic response\n-  return {\n-    translatedText: `[Translated to ${targetLanguage}] ${text}`,\n-    sourceLang,\n-    targetLang,\n-    fallback: true\n+    // Enhanced pattern-based translation fallback\n+    const result = getPatternBasedTranslation(text, targetLanguage)\n+    return {\n+      translatedText: result,\n+      sourceLang,\n+      targetLang,\n+      fallback: true\n+    }\n   }\n   \n } catch (error) {\n   console.error('Translation error:', error)\n"
    },
    "title": "lib/translation-service.ts",
    "time": {
      "start": 1759689281750,
      "end": 1759689281767
    }
  }
}
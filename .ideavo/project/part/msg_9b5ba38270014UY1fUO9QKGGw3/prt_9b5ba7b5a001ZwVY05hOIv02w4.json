{
  "id": "prt_9b5ba7b5a001ZwVY05hOIv02w4",
  "messageID": "msg_9b5ba38270014UY1fUO9QKGGw3",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01EbV3igRx2Qf9ENXYDZk4hZ",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/api/translate/route.ts",
      "offset": 1,
      "limit": 60
    },
    "output": "<file>\n00002|  * Text Processing API Route\n00003|  * \n00004|  * Handles text translation, improvement, rephrasing, and summarization using DashScope API.\n00005|  * ENVIRONMENT: DASHSCOPE_API_KEY must be set (currently: sk-ad9404d1ced5426082b73e685a95ffa3)\n00006|  */\n00007| import { NextRequest, NextResponse } from 'next/server'\n00008| import { translateText } from '@/lib/translation-service'\n00009| \n00010| export async function POST(request: NextRequest) {\n00011|   try {\n00012|     const body = await request.json()\n00013|     console.log('Processing request body:', body)\n00014|     \n00015|     const { text, word, context, operation = 'translate', sourceLang, targetLang, domain, glossary, mode } = body\n00016| \n00017|     // Validate required fields based on operation\n00018|     if (operation === 'alternatives' && !word) {\n00019|       return NextResponse.json(\n00020|         { error: 'Word is required for alternatives operation' },\n00021|         { status: 400 }\n00022|       )\n00023|     }\n00024| \n00025|     if ((operation === 'translate' || operation === 'improve' || operation === 'rephrase') && !text) {\n00026|       console.log('Missing required field: text')\n00027|       return NextResponse.json(\n00028|         { error: 'Text is required' },\n00029|         { status: 400 }\n00030|       )\n00031|     }\n00032| \n00033|     let result\n00034| \n00035|     switch (operation) {\n00036|       case 'translate':\n00037|         if (!targetLang) {\n00038|           return NextResponse.json(\n00039|             { error: 'Target language is required for translation' },\n00040|             { status: 400 }\n00041|           )\n00042|         }\n00043|         result = await translateText(text, sourceLang, targetLang, { domain, glossary })\n00044|         break\n00045| \n00046|       case 'improve':\n00047|         const { correctionsOnly, writingStyle, tone } = body\n00048|         result = await improveWritingWithQwen3Max(text, { correctionsOnly, writingStyle, tone })\n00049|         break\n00050| \n00051|       case 'alternatives':\n00052|         result = await getWordAlternativesWithQwen3Max(word, context, { mode, sourceLang, targetLang })\n00053|         break\n00054| \n00055|       case 'rephrase':\n00056|         result = await rephraseTextWithQwen3Max(text)\n00057|         break\n00058| \n00059|       default:\n00060|         return NextResponse.json(\n00061|           { error: 'Invalid operation. Supported: translate, improve, alternatives, rephrase' },\n\n(File has more lines. Use 'offset' parameter to read beyond line 61)\n</file>",
    "metadata": {
      "preview": " * Text Processing API Route\n * \n * Handles text translation, improvement, rephrasing, and summarization using DashScope API.\n * ENVIRONMENT: DASHSCOPE_API_KEY must be set (currently: sk-ad9404d1ced5426082b73e685a95ffa3)\n */\nimport { NextRequest, NextResponse } from 'next/server'\nimport { translateText } from '@/lib/translation-service'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    console.log('Processing request body:', body)\n    \n    const { text, word, context, operation = 'translate', sourceLang, targetLang, domain, glossary, mode } = body\n\n    // Validate required fields based on operation\n    if (operation === 'alternatives' && !word) {\n      return NextResponse.json(\n        { error: 'Word is required for alternatives operation' },\n        { status: 400 }"
    },
    "title": "app/api/translate/route.ts",
    "time": {
      "start": 1759690522517,
      "end": 1759690522520
    }
  }
}
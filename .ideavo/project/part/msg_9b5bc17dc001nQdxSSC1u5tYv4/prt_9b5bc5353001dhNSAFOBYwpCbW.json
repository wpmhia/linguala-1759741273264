{
  "id": "prt_9b5bc5353001dhNSAFOBYwpCbW",
  "messageID": "msg_9b5bc17dc001nQdxSSC1u5tYv4",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01KKjT3g4T4UxZW1cDdgR54a",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/writing-service.ts",
      "content": "/**\n * Writing Service for Linguala Platform\n * \n * This service uses Alibaba Cloud DashScope's qwen-flash model for writing assistance.\n * Handles text improvement, word alternatives, and sentence rephrasing.\n * \n * REQUIRED ENVIRONMENT VARIABLE:\n * - DASHSCOPE_API_KEY: Alibaba Cloud API key (format: sk-xxxxxxxxxxxxxxxxx)\n */\n\nexport interface WritingResult {\n  originalText: string\n  improvedText: string\n  operation: string\n  fallback?: boolean\n}\n\nexport interface AlternativesResult {\n  word: string\n  alternatives: string[]\n  operation: string\n  fallback?: boolean\n}\n\nexport interface RephraseResult {\n  originalText: string\n  rephrasedText: string\n  rephraseOptions: string[]\n  operation: string\n  fallback?: boolean\n}\n\n// Text improvement function using qwen-flash\nexport async function improveText(text: string, options: { correctionsOnly?: boolean, writingStyle?: string, tone?: string } = {}): Promise<WritingResult> {\n  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n  console.log('Starting qwen-flash API call for text:', text.substring(0, 50))\n  \n  // Build dynamic system prompt based on options\n  let systemPrompt = 'You are a professional writing assistant. '\n  \n  if (options.correctionsOnly) {\n    systemPrompt += 'Focus ONLY on correcting grammar, spelling, and punctuation errors. Do not change the style, tone, or meaning of the text. '\n  } else {\n    systemPrompt += 'Improve the text for clarity, readability, and engagement while maintaining the original meaning. '\n    \n    // Add writing style guidance\n    if (options.writingStyle) {\n      switch (options.writingStyle) {\n        case 'simple':\n          systemPrompt += 'Use simple, clear language that is easy to understand. Avoid complex words and long sentences. '\n          break\n        case 'business':\n          systemPrompt += 'Use professional, business-appropriate language. Be concise and direct. '\n          break\n        case 'casual':\n          systemPrompt += 'Use a relaxed, conversational tone. Make it sound natural and friendly. '\n          break\n        case 'academic':\n          systemPrompt += 'Use formal, academic language with precise terminology and structured arguments. '\n          break\n      }\n    }\n    \n    // Add tone guidance\n    if (options.tone) {\n      switch (options.tone) {\n        case 'friendly':\n          systemPrompt += 'Maintain a warm and approachable tone. '\n          break\n        case 'professional':\n          systemPrompt += 'Keep a professional and authoritative tone. '\n          break\n        case 'enthusiastic':\n          systemPrompt += 'Add energy and enthusiasm to the text. '\n          break\n        case 'diplomatic':\n          systemPrompt += 'Use diplomatic and tactful language. '\n          break\n      }\n    }\n  }\n  \n  systemPrompt += 'Return only the improved text without explanations, quotes, or additional commentary.'\n  \n  // Add timeout wrapper\n  const timeoutPromise = new Promise((_, reject) => {\n    setTimeout(() => reject(new Error('API call timeout after 10 seconds')), 10000)\n  })\n  \n  try {\n    const fetchPromise = fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-flash',\n        messages: [\n          {\n            role: 'system',\n            content: systemPrompt\n          },\n          {\n            role: 'user',\n            content: text\n          }\n        ],\n        max_tokens: 1000,\n        temperature: options.correctionsOnly ? 0.1 : 0.3\n      })\n    })\n    \n    const response = await Promise.race([fetchPromise, timeoutPromise]) as Response\n    \n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const improvedText = data.choices[0]?.message?.content?.trim()\n\n    if (improvedText && improvedText !== text) {\n      return {\n        originalText: text,\n        improvedText,\n        operation: 'improve'\n      }\n    } else {\n      throw new Error('No improvement received')\n    }\n  } catch (error) {\n    console.error('Improve writing error:', error)\n    // Enhanced fallback - basic grammar and style improvements\n    const basicImprovement = text\n      // Dutch grammar fixes\n      .replace(/\\bik leest\\b/gi, 'ik lees')\n      .replace(/\\bIk leest\\b/g, 'Ik lees')\n      .replace(/\\bjij heeft\\b/gi, 'jij hebt')\n      .replace(/\\bJij heeft\\b/g, 'Jij hebt')\n      .replace(/\\bhij hebben\\b/gi, 'hij heeft')\n      .replace(/\\bHij hebben\\b/g, 'Hij heeft')\n      .replace(/\\bzij hebben\\b/gi, 'zij heeft')\n      .replace(/\\bZij hebben\\b/g, 'Zij heeft')\n      // English grammar fixes\n      .replace(/\\bi\\b/gi, 'I')\n      .replace(/\\bI\\s+am\\s+going\\s+to\\s+went\\b/gi, 'I am going to go')\n      .replace(/\\bYou\\s+was\\b/gi, 'You were')\n      .replace(/\\bHe\\s+don't\\b/gi, 'He doesn\\'t')\n      .replace(/\\bShe\\s+don't\\b/gi, 'She doesn\\'t')\n      .replace(/\\bthere\\s+house\\b/gi, 'their house')\n      .replace(/\\byour\\s+welcome\\b/gi, 'you\\'re welcome')\n      .replace(/\\bits\\s+a\\s+beautiful\\s+day\\b/gi, 'it\\'s a beautiful day')\n      // German basic improvements\n      .replace(/\\bich\\s+sind\\b/gi, 'ich bin')\n      .replace(/\\bdu\\s+sind\\b/gi, 'du bist')\n      .replace(/\\ber\\s+sind\\b/gi, 'er ist')\n      // French basic improvements\n      .replace(/\\bje\\s+suis\\s+aller\\b/gi, 'je suis allé')\n      .replace(/\\btu\\s+es\\s+aller\\b/gi, 'tu es allé')\n      // Spanish basic improvements\n      .replace(/\\byo\\s+son\\b/gi, 'yo soy')\n      .replace(/\\btú\\s+son\\b/gi, 'tú eres')\n      // Capitalization\n      .replace(/^[a-z]/, match => match.toUpperCase())\n      .replace(/\\.\\s+[a-z]/g, match => match.toUpperCase())\n      // Double spaces\n      .replace(/\\s{2,}/g, ' ')\n      .trim()\n\n    return {\n      originalText: text,\n      improvedText: basicImprovement || text,\n      operation: 'improve',\n      fallback: true\n    }\n  }\n}\n\n// Get word alternatives using qwen-flash\nexport async function getWordAlternatives(word: string, context: string, options: { mode?: string, sourceLang?: string, targetLang?: string } = {}): Promise<AlternativesResult> {\n  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n  console.log('Getting alternatives for word:', word)\n  \n  try {\n    let systemPrompt = 'You are a professional writing assistant. '\n    \n    if (options.mode === 'translate') {\n      systemPrompt += `Provide 5 alternative translations or synonyms for the word \"${word}\" in the context: \"${context}\". `\n      if (options.targetLang) {\n        systemPrompt += `Focus on translations that work well in ${options.targetLang}. `\n      }\n    } else {\n      systemPrompt += `Provide 5 alternative words or synonyms for \"${word}\" in the context: \"${context}\". Focus on words that improve clarity, style, and readability. `\n    }\n    \n    systemPrompt += 'Return only a JSON array of alternative words, like: [\"alternative1\", \"alternative2\", \"alternative3\", \"alternative4\", \"alternative5\"]'\n    \n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('API call timeout after 8 seconds')), 8000)\n    })\n    \n    const fetchPromise = fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-flash',\n        messages: [\n          {\n            role: 'system',\n            content: systemPrompt\n          },\n          {\n            role: 'user',\n            content: `Word: \"${word}\"\\nContext: \"${context}\"`\n          }\n        ],\n        max_tokens: 200,\n        temperature: 0.7\n      })\n    })\n    \n    const response = await Promise.race([fetchPromise, timeoutPromise]) as Response\n    \n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const content = data.choices[0]?.message?.content?.trim()\n    \n    // Try to parse JSON response\n    let alternatives: string[] = []\n    try {\n      alternatives = JSON.parse(content)\n    } catch {\n      // Fallback: extract words from text response\n      const words = content.match(/[\\w']+/g) || []\n      alternatives = words.slice(0, 5)\n    }\n    \n    return {\n      word,\n      alternatives: alternatives.filter(alt => alt.toLowerCase() !== word.toLowerCase()).slice(0, 5),\n      operation: 'alternatives'\n    }\n  } catch (error) {\n    console.error('Get alternatives error:', error)\n    \n    // Enhanced fallback alternatives\n    const fallbackAlternatives = getFallbackAlternatives(word)\n    \n    return {\n      word,\n      alternatives: fallbackAlternatives,\n      operation: 'alternatives',\n      fallback: true\n    }\n  }\n}\n\n// Rephrase text using qwen-flash\nexport async function rephraseText(text: string): Promise<RephraseResult> {\n  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n  \n  try {\n    const controller = new AbortController()\n    const timeoutId = setTimeout(() => controller.abort(), 2000) // 2 second timeout\n    \n    const response = await fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-flash',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a professional writing assistant. Provide 3 different ways to rephrase the given text using different words and sentence structures while keeping the same meaning. Make them sound natural and engaging. Return only a JSON array of rephrased options, like: [\"option1\", \"option2\", \"option3\"]'\n          },\n          {\n            role: 'user',\n            content: text\n          }\n        ]\n      }),\n      signal: controller.signal\n    })\n\n    clearTimeout(timeoutId)\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const content = data.choices[0]?.message?.content?.trim()\n    \n    // Try to parse JSON response\n    let rephraseOptions: string[] = []\n    try {\n      rephraseOptions = JSON.parse(content)\n    } catch {\n      // Fallback: treat as single option\n      rephraseOptions = [content]\n    }\n\n    return {\n      originalText: text,\n      rephrasedText: rephraseOptions[0] || text,\n      rephraseOptions: rephraseOptions.filter(option => option && option !== text),\n      operation: 'rephrase'\n    }\n  } catch (error) {\n    console.error('Rephrase text error:', error)\n    // Enhanced fallback - multiple rephrase options\n    const option1 = text\n      .replace(/\\bvery\\b/g, 'extremely')\n      .replace(/\\bgood\\b/g, 'excellent')\n      .replace(/\\bbad\\b/g, 'poor')\n      .replace(/\\bnice\\b/g, 'pleasant')\n      .replace(/\\bbig\\b/g, 'large')\n    \n    const option2 = text\n      .replace(/I think/g, 'I believe')\n      .replace(/It is important/g, 'It is essential')\n      .replace(/In my opinion/g, 'From my perspective')\n      .replace(/very important/g, 'crucial')\n      \n    const option3 = text\n      .replace(/\\breally\\b/g, 'truly')\n      .replace(/\\bshould\\b/g, 'ought to')\n      .replace(/\\bwant to\\b/g, 'wish to')\n      .replace(/\\bneed to\\b/g, 'must')\n    \n    const rephraseOptions = [option1, option2, option3].filter(option => option !== text)\n    \n    return {\n      originalText: text,\n      rephrasedText: rephraseOptions[0] || text,\n      rephraseOptions: rephraseOptions,\n      operation: 'rephrase',\n      fallback: true\n    }\n  }\n}\n\n// Enhanced fallback alternatives\nfunction getFallbackAlternatives(word: string): string[] {\n  const alternatives: Record<string, string[]> = {\n    'good': ['great', 'excellent', 'wonderful', 'fantastic', 'superb'],\n    'bad': ['poor', 'terrible', 'awful', 'horrible', 'dreadful'],\n    'big': ['large', 'huge', 'massive', 'enormous', 'gigantic'],\n    'small': ['tiny', 'little', 'compact', 'miniature', 'petite'],\n    'fast': ['quick', 'rapid', 'swift', 'speedy', 'brisk'],\n    'slow': ['gradual', 'leisurely', 'sluggish', 'unhurried', 'steady'],\n    'important': ['crucial', 'vital', 'essential', 'significant', 'critical'],\n    'beautiful': ['gorgeous', 'stunning', 'lovely', 'attractive', 'magnificent'],\n    'happy': ['joyful', 'cheerful', 'delighted', 'pleased', 'elated'],\n    'sad': ['unhappy', 'sorrowful', 'melancholy', 'dejected', 'gloomy'],\n    'very': ['extremely', 'incredibly', 'remarkably', 'exceptionally', 'tremendously'],\n    'really': ['truly', 'genuinely', 'actually', 'indeed', 'certainly'],\n    'said': ['stated', 'mentioned', 'declared', 'expressed', 'remarked'],\n    'make': ['create', 'produce', 'build', 'construct', 'generate'],\n    'think': ['believe', 'consider', 'suppose', 'assume', 'reckon'],\n    'know': ['understand', 'realize', 'recognize', 'comprehend', 'grasp'],\n    'help': ['assist', 'support', 'aid', 'guide', 'facilitate'],\n    'work': ['function', 'operate', 'perform', 'labor', 'serve'],\n    'easy': ['simple', 'effortless', 'straightforward', 'uncomplicated', 'manageable'],\n    'hard': ['difficult', 'challenging', 'tough', 'demanding', 'complex']\n  }\n  \n  return alternatives[word.toLowerCase()] || []\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/lib/writing-service.ts",
      "exists": false
    },
    "title": "lib/writing-service.ts",
    "time": {
      "start": 1759690697029,
      "end": 1759690697032
    }
  }
}
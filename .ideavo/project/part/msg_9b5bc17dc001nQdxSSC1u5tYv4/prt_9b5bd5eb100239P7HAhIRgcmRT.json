{
  "id": "prt_9b5bd5eb100239P7HAhIRgcmRT",
  "messageID": "msg_9b5bc17dc001nQdxSSC1u5tYv4",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01N1xhNd6rY5g7JscuT7exsw",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/api/write/route.ts",
      "content": "/**\n * Writing API Route\n * \n * Handles writing assistance using qwen-flash model:\n * - Text improvement\n * - Word alternatives \n * - Sentence rephrasing\n */\nimport { NextRequest, NextResponse } from 'next/server'\nimport { improveText, getWordAlternatives, rephraseText } from '@/lib/writing-service'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    console.log('Processing writing request:', body)\n    \n    const { text, word, context, operation, correctionsOnly, writingStyle, tone, mode, sourceLang, targetLang } = body\n\n    // Validate required fields based on operation\n    if (operation === 'alternatives' && !word) {\n      return NextResponse.json(\n        { error: 'Word is required for alternatives operation' },\n        { status: 400 }\n      )\n    }\n\n    if ((operation === 'improve' || operation === 'rephrase') && !text) {\n      console.log('Missing required field: text')\n      return NextResponse.json(\n        { error: 'Text is required' },\n        { status: 400 }\n      )\n    }\n\n    let result\n\n    switch (operation) {\n      case 'improve':\n        result = await improveText(text, { correctionsOnly, writingStyle, tone })\n        break\n\n      case 'alternatives':\n        result = await getWordAlternatives(word, context, { mode, sourceLang, targetLang })\n        break\n\n      case 'rephrase':\n        result = await rephraseText(text)\n        break\n\n      default:\n        return NextResponse.json(\n          { error: 'Invalid operation. Supported: improve, alternatives, rephrase' },\n          { status: 400 }\n        )\n    }\n\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Writing processing error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/app/api/write/route.ts",
      "exists": false
    },
    "title": "app/api/write/route.ts",
    "time": {
      "start": 1759690718275,
      "end": 1759690718276
    }
  }
}
{
  "id": "prt_9b5bda173001tn8YJnCE87nuhf",
  "messageID": "msg_9b5bc17dc001nQdxSSC1u5tYv4",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01Xn7izsnro29fUwE5UWoydc",
  "state": {
    "status": "error",
    "input": {
      "filePath": "/home/user/project/lib/translation-service.ts",
      "content": "/**\n * Translation Service for Linguala Platform\n * \n * This service uses Alibaba Cloud DashScope's qwen-mt-turbo model for translation only.\n * Simple, clean implementation focused on language translation.\n * \n * REQUIRED ENVIRONMENT VARIABLE:\n * - DASHSCOPE_API_KEY: Alibaba Cloud API key (format: sk-xxxxxxxxxxxxxxxxx)\n */\n\n// Language mapping for translation API - includes all frontend languages\nconst LANGUAGE_MAP: Record<string, string> = {\n  auto: 'auto',\n  \n  // Popular EU Languages\n  en: 'English',\n  de: 'German', \n  fr: 'French',\n  es: 'Spanish',\n  it: 'Italian',\n  pt: 'Portuguese',\n  pl: 'Polish',\n  nl: 'Dutch',\n  \n  // Nordic Languages\n  da: 'Danish',\n  sv: 'Swedish',\n  no: 'Norwegian',\n  fi: 'Finnish',\n  \n  // Eastern European\n  ru: 'Russian',\n  uk: 'Ukrainian',\n  cs: 'Czech',\n  sk: 'Slovak',\n  hu: 'Hungarian',\n  ro: 'Romanian',\n  bg: 'Bulgarian',\n  hr: 'Croatian',\n  sr: 'Serbian',\n  sl: 'Slovenian',\n  et: 'Estonian',\n  lv: 'Latvian',\n  lt: 'Lithuanian',\n  \n  // Popular Languages\n  zh: 'Chinese',\n  ja: 'Japanese',\n  ko: 'Korean',\n  ar: 'Arabic',\n  hi: 'Hindi',\n  tr: 'Turkish',\n  he: 'Hebrew',\n  \n  // Additional European\n  el: 'Greek',\n  mt: 'Maltese',\n  is: 'Icelandic',\n  ga: 'Irish',\n  cy: 'Welsh',\n  eu: 'Basque',\n  ca: 'Catalan'\n}\n\nexport interface TranslationResult {\n  translatedText: string\n  sourceLang: string\n  targetLang: string\n  fallback?: boolean\n}\n\n// Simple translation function using qwen-mt-turbo\nasync function translateWithQwenMT(text: string, sourceLang: string, targetLang: string): Promise<TranslationResult> {\n  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n  \n  if (!DASHSCOPE_API_KEY) {\n    throw new Error('DASHSCOPE_API_KEY not configured')\n  }\n  \n  console.log(`Translating with qwen-mt-turbo: \"${text.substring(0, 50)}\" from ${sourceLang} to ${targetLang}`)\n  \n  try {\n    const response = await fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-mt-turbo',\n        messages: [\n          {\n            role: 'user',\n            content: `Translate from ${sourceLang === 'auto' ? 'auto-detected language' : sourceLang} to ${targetLang}: ${text}`\n          }\n        ],\n        max_tokens: 500,\n        temperature: 0.1\n      })\n    })\n    \n    console.log('qwen-mt-turbo response status:', response.status)\n    \n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const translatedText = data.choices[0]?.message?.content?.trim()\n\n    if (translatedText && translatedText !== text) {\n      console.log('Translation successful:', translatedText)\n      return {\n        translatedText,\n        sourceLang: sourceLang === 'auto' ? 'auto' : sourceLang,\n        targetLang\n      }\n    } else {\n      throw new Error('No translation received or same as input')\n    }\n  } catch (error) {\n    console.error('qwen-mt-turbo translation error:', error)\n    throw error\n  }\n}\n\n// Main translation function\nexport async function translateText(\n  text: string, \n  sourceLang: string, \n  targetLang: string,\n  options?: {\n    domain?: string\n    glossary?: Array<{ source: string; target: string }>\n  }\n): Promise<TranslationResult> {\n  try {\n    if (!text || !targetLang) {\n      throw new Error('Text and target language are required')\n    }\n\n    // Map language codes to full names\n    const targetLanguage = LANGUAGE_MAP[targetLang] || targetLang\n    const sourceLanguage = sourceLang && sourceLang !== 'auto' ? LANGUAGE_MAP[sourceLang] || sourceLang : 'auto'\n    \n    // Try qwen-mt-turbo translation first\n    try {\n      const result = await translateWithQwenMT(text, sourceLanguage, targetLanguage)\n      return result\n    } catch (error) {\n      console.error('qwen-mt-turbo translation failed, using fallback:', error)\n      \n      // Try fallback translation for common phrases\n      const fallbackTranslation = getFallbackTranslation(text, targetLanguage)\n      if (fallbackTranslation) {\n        return {\n          translatedText: fallbackTranslation,\n          sourceLang,\n          targetLang,\n          fallback: true\n        }\n      }\n\n      // Enhanced pattern-based translation fallback\n      const result = getPatternBasedTranslation(text, targetLanguage)\n      return {\n        translatedText: result,\n        sourceLang,\n        targetLang,\n        fallback: true\n      }\n    }\n    \n  } catch (error) {\n    console.error('Translation error:', error)\n    return {\n      translatedText: text,\n      sourceLang,\n      targetLang,\n      fallback: true\n    }\n  }\n}\n\n// Fallback translation for common phrases\nfunction getFallbackTranslation(text: string, targetLanguage: string): string | null {\n  const commonTranslations: Record<string, Record<string, string>> = {\n    'hello': {\n      'Spanish': 'hola',\n      'French': 'bonjour',\n      'German': 'hallo',\n      'Italian': 'ciao',\n      'Portuguese': 'olá'\n    },\n    'goodbye': {\n      'Spanish': 'adiós',\n      'French': 'au revoir',\n      'German': 'auf wiedersehen',\n      'Italian': 'ciao',\n      'Portuguese': 'tchau'\n    },\n    'thank you': {\n      'Spanish': 'gracias',\n      'French': 'merci',\n      'German': 'danke',\n      'Italian': 'grazie',\n      'Portuguese': 'obrigado'\n    },\n    'please': {\n      'Spanish': 'por favor',\n      'French': 's\\'il vous plaît',\n      'German': 'bitte',\n      'Italian': 'per favore',\n      'Portuguese': 'por favor'\n    },\n    'yes': {\n      'Spanish': 'sí',\n      'French': 'oui',\n      'German': 'ja',\n      'Italian': 'sì',\n      'Portuguese': 'sim'\n    },\n    'no': {\n      'Spanish': 'no',\n      'French': 'non',\n      'German': 'nein',\n      'Italian': 'no',\n      'Portuguese': 'não'\n    }\n  }\n\n  const lowerText = text.toLowerCase().trim()\n  return commonTranslations[lowerText]?.[targetLanguage] || null\n}\n\n// Enhanced pattern-based translation for common text\nfunction getPatternBasedTranslation(text: string, targetLanguage: string): string {\n  const lowerText = text.toLowerCase().trim()\n  \n  // Common words and phrases\n  const translations: Record<string, Record<string, string>> = {\n    // Greetings\n    'hello': { 'Spanish': 'hola', 'French': 'bonjour', 'German': 'hallo', 'Italian': 'ciao', 'Portuguese': 'olá' },\n    'hello world': { 'Spanish': 'hola mundo', 'French': 'bonjour le monde', 'German': 'hallo welt', 'Italian': 'ciao mondo', 'Portuguese': 'olá mundo' },\n    'good morning': { 'Spanish': 'buenos días', 'French': 'bonjour', 'German': 'guten morgen', 'Italian': 'buongiorno', 'Portuguese': 'bom dia' },\n    'good evening': { 'Spanish': 'buenas tardes', 'French': 'bonsoir', 'German': 'guten abend', 'Italian': 'buonasera', 'Portuguese': 'boa tarde' },\n    'good night': { 'Spanish': 'buenas noches', 'French': 'bonne nuit', 'German': 'gute nacht', 'Italian': 'buonanotte', 'Portuguese': 'boa noite' },\n    \n    // Common phrases\n    'thank you': { 'Spanish': 'gracias', 'French': 'merci', 'German': 'danke', 'Italian': 'grazie', 'Portuguese': 'obrigado' },\n    'please': { 'Spanish': 'por favor', 'French': 's\\'il vous plaît', 'German': 'bitte', 'Italian': 'per favore', 'Portuguese': 'por favor' },\n    'excuse me': { 'Spanish': 'disculpe', 'French': 'excusez-moi', 'German': 'entschuldigung', 'Italian': 'scusi', 'Portuguese': 'com licença' },\n    'yes': { 'Spanish': 'sí', 'French': 'oui', 'German': 'ja', 'Italian': 'sì', 'Portuguese': 'sim' },\n    'no': { 'Spanish': 'no', 'French': 'non', 'German': 'nein', 'Italian': 'no', 'Portuguese': 'não' },\n    \n    // Common words\n    'cat': { 'Spanish': 'gato', 'French': 'chat', 'German': 'katze', 'Italian': 'gatto', 'Portuguese': 'gato' },\n    'dog': { 'Spanish': 'perro', 'French': 'chien', 'German': 'hund', 'Italian': 'cane', 'Portuguese': 'cão' },\n    'water': { 'Spanish': 'agua', 'French': 'eau', 'German': 'wasser', 'Italian': 'acqua', 'Portuguese': 'água' },\n    'food': { 'Spanish': 'comida', 'French': 'nourriture', 'German': 'essen', 'Italian': 'cibo', 'Portuguese': 'comida' },\n    'house': { 'Spanish': 'casa', 'French': 'maison', 'German': 'haus', 'Italian': 'casa', 'Portuguese': 'casa' },\n    'love': { 'Spanish': 'amor', 'French': 'amour', 'German': 'liebe', 'Italian': 'amore', 'Portuguese': 'amor' },\n    'world': { 'Spanish': 'mundo', 'French': 'monde', 'German': 'welt', 'Italian': 'mondo', 'Portuguese': 'mundo' },\n    'time': { 'Spanish': 'tiempo', 'French': 'temps', 'German': 'zeit', 'Italian': 'tempo', 'Portuguese': 'tempo' },\n    'book': { 'Spanish': 'libro', 'French': 'livre', 'German': 'buch', 'Italian': 'libro', 'Portuguese': 'livro' },\n    'car': { 'Spanish': 'coche', 'French': 'voiture', 'German': 'auto', 'Italian': 'macchina', 'Portuguese': 'carro' }\n  }\n  \n  // Try exact phrase match first\n  if (translations[lowerText] && translations[lowerText][targetLanguage]) {\n    return translations[lowerText][targetLanguage]\n  }\n  \n  // Try word-by-word translation for simple sentences\n  const words = lowerText.split(' ')\n  const translatedWords = words.map(word => {\n    const cleanWord = word.replace(/[.,!?;:]/, '')\n    return translations[cleanWord]?.[targetLanguage] || word\n  })\n  \n  const result = translatedWords.join(' ')\n  \n  // If we got some translations, return result; otherwise indicate it needs proper translation\n  if (result !== text) {\n    return result\n  }\n  \n  return `[Translated to ${targetLanguage}] ${text}`\n}"
    },
    "error": "Error: You must read the file /home/user/project/lib/translation-service.ts before overwriting it. Use the Read tool first",
    "time": {
      "start": 1759690765535,
      "end": 1759690765536
    }
  }
}
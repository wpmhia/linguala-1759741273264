{
  "id": "prt_9b5c34226001zKHiwlyMjouAlW",
  "messageID": "msg_9b5c227f6001cmmaWqnAHI5mLI",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01SgQQbN6hJFVzB8TLXwgQwX",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/public/scripts/iframe-navigation.js"
    },
    "output": "<file>\n00001| // iframe-navigation.js - Add this script to your iframe apps\n00002| \n00003| (function() {\n00004|   const STORAGE_KEY = 'iframeNavigationHistory';\n00005|   \n00006|   // State variables\n00007|   let historyPosition = 0;\n00008|   let historyStack = [];\n00009|   let isInitialized = false;\n00010| \n00011|   // Initialize with default state\n00012|   const initializeState = (url = window.location.href) => {\n00013|     historyStack = [url];\n00014|     historyPosition = 0;\n00015|   };\n00016| \n00017|   // Calculate navigation capabilities\n00018|   const getNavigationState = () => ({\n00019|     canGoBack: historyPosition > 0,\n00020|     canGoForward: historyPosition < historyStack.length - 1,\n00021|     currentUrl: window.location.href\n00022|   });\n00023| \n00024|   // Send navigation state to parent\n00025|   const sendNavigationState = () => {\n00026|     if (window.parent !== window) {\n00027|       window.parent.postMessage({\n00028|         type: 'navigation-state',\n00029|         ...getNavigationState()\n00030|       }, '*');\n00031|     }\n00032|   };\n00033| \n00034|   // Save state to session storage\n00035|   const saveState = () => {\n00036|     try {\n00037|       sessionStorage.setItem(STORAGE_KEY, JSON.stringify({\n00038|         historyStack,\n00039|         historyPosition\n00040|       }));\n00041|     } catch (e) {\n00042|       console.warn('Failed to save navigation state:', e);\n00043|     }\n00044|   };\n00045| \n00046|   // Restore state from session storage\n00047|   const restoreState = () => {\n00048|     try {\n00049|       const savedState = sessionStorage.getItem(STORAGE_KEY);\n00050|       if (!savedState) return false;\n00051| \n00052|       const { historyStack: savedStack, historyPosition: savedPosition } = JSON.parse(savedState);\n00053|       \n00054|       // Validate saved data\n00055|       if (!Array.isArray(savedStack) || typeof savedPosition !== 'number') {\n00056|         return false;\n00057|       }\n00058| \n00059|       const currentUrl = window.location.href;\n00060|       \n00061|       // Find current URL in saved history\n00062|       const urlIndex = savedStack.indexOf(currentUrl);\n00063|       if (urlIndex !== -1) {\n00064|         historyStack = savedStack;\n00065|         historyPosition = urlIndex;\n00066|       } else {\n00067|         // Current URL not in history, append it\n00068|         historyStack = [...savedStack, currentUrl];\n00069|         historyPosition = historyStack.length - 1;\n00070|       }\n00071| \n00072|       // Clear saved state\n00073|       sessionStorage.removeItem(STORAGE_KEY);\n00074|       return true;\n00075|     } catch (e) {\n00076|       console.warn('Failed to restore navigation state:', e);\n00077|       return false;\n00078|     }\n00079|   };\n00080| \n00081|   // Update history state for new navigation\n00082|   const updateHistoryState = () => {\n00083|     const currentUrl = window.location.href;\n00084|     \n00085|     // Skip if URL hasn't changed\n00086|     if (historyStack[historyPosition] === currentUrl) {\n00087|       return;\n00088|     }\n00089| \n00090|     // Remove any forward history and add new URL\n00091|     historyStack = historyStack.slice(0, historyPosition + 1);\n00092|     historyStack.push(currentUrl);\n00093|     historyPosition = historyStack.length - 1;\n00094|     \n00095|     sendNavigationState();\n00096|   };\n00097| \n00098|   // Handle browser back/forward navigation\n00099|   const handlePopState = () => {\n00100|     const currentUrl = window.location.href;\n00101|     const urlIndex = historyStack.indexOf(currentUrl);\n00102|     \n00103|     if (urlIndex !== -1) {\n00104|       historyPosition = urlIndex;\n00105|     } else {\n00106|       // URL not in our history, treat as new navigation\n00107|       updateHistoryState();\n00108|     }\n00109|     \n00110|     sendNavigationState();\n00111|   };\n00112| \n00113|   // Navigation command handlers\n00114|   const navigationHandlers = {\n00115|     back: () => {\n00116|       if (historyPosition > 0) {\n00117|         historyPosition--;\n00118|         window.history.back();\n00119|         // sendNavigationState will be called by popstate event\n00120|       }\n00121|     },\n00122|     \n00123|     forward: () => {\n00124|       if (historyPosition < historyStack.length - 1) {\n00125|         historyPosition++;\n00126|         window.history.forward();\n00127|         // sendNavigationState will be called by popstate event\n00128|       }\n00129|     },\n00130|     \n00131|     refresh: () => {\n00132|       saveState();\n00133|       window.location.reload();\n00134|     }\n00135|   };\n00136| \n00137|   // Listen for navigation commands from parent\n00138|   const handleMessage = (event) => {\n00139|     if (event.data?.type === 'navigation-command') {\n00140|       const handler = navigationHandlers[event.data.action];\n00141|       if (handler) {\n00142|         handler();\n00143|       }\n00144|     }\n00145|   };\n00146| \n00147|   // Initialize the navigation system\n00148|   const initialize = () => {\n00149|     if (isInitialized) return;\n00150|     \n00151|     // Try to restore state, fallback to default\n00152|     if (!restoreState()) {\n00153|       initializeState();\n00154|     }\n00155|     \n00156|     // Set up event listeners\n00157|     window.addEventListener('message', handleMessage);\n00158|     window.addEventListener('popstate', handlePopState);\n00159|     \n00160|     // Override history methods for SPA support\n00161|     const originalPushState = history.pushState;\n00162|     const originalReplaceState = history.replaceState;\n00163|     \n00164|     history.pushState = function(...args) {\n00165|       originalPushState.apply(this, args);\n00166|       updateHistoryState();\n00167|     };\n00168|     \n00169|     history.replaceState = function(...args) {\n00170|       originalReplaceState.apply(this, args);\n00171|       updateHistoryState();\n00172|     };\n00173|     \n00174|     isInitialized = true;\n00175|     sendNavigationState();\n00176|   };\n00177| \n00178|   // Start initialization\n00179|   if (document.readyState === 'loading') {\n00180|     window.addEventListener('DOMContentLoaded', initialize);\n00181|   } else {\n00182|     initialize();\n00183|   }\n00184| \n00185|   // Cleanup on page unload\n00186|   window.addEventListener('beforeunload', () => {\n00187|     window.removeEventListener('message', handleMessage);\n00188|     window.removeEventListener('popstate', handlePopState);\n00189|   });\n00190| \n00191| })();\n</file>",
    "metadata": {
      "preview": "// iframe-navigation.js - Add this script to your iframe apps\n\n(function() {\n  const STORAGE_KEY = 'iframeNavigationHistory';\n  \n  // State variables\n  let historyPosition = 0;\n  let historyStack = [];\n  let isInitialized = false;\n\n  // Initialize with default state\n  const initializeState = (url = window.location.href) => {\n    historyStack = [url];\n    historyPosition = 0;\n  };\n\n  // Calculate navigation capabilities\n  const getNavigationState = () => ({\n    canGoBack: historyPosition > 0,\n    canGoForward: historyPosition < historyStack.length - 1,"
    },
    "title": "public/scripts/iframe-navigation.js",
    "time": {
      "start": 1759691097242,
      "end": 1759691097245
    }
  }
}
{
  "id": "prt_9b5c543ad00128rLJXOWZl7o02",
  "messageID": "msg_9b5c48e6d0010vTcNXk6lm9cYG",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_016AVEAALGgNHqy1W3yT2VMC",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/writing-service.ts"
    },
    "output": "<file>\n00001| /**\n00002|  * Writing Service for Linguala Platform\n00003|  * \n00004|  * This service uses Alibaba Cloud DashScope's qwen-flash model for writing assistance.\n00005|  * Handles text improvement, word alternatives, and sentence rephrasing.\n00006|  * \n00007|  * REQUIRED ENVIRONMENT VARIABLE:\n00008|  * - DASHSCOPE_API_KEY: Alibaba Cloud API key (format: sk-xxxxxxxxxxxxxxxxx)\n00009|  */\n00010| \n00011| export interface WritingResult {\n00012|   originalText: string\n00013|   improvedText: string\n00014|   operation: string\n00015|   fallback?: boolean\n00016| }\n00017| \n00018| export interface AlternativesResult {\n00019|   word: string\n00020|   alternatives: string[]\n00021|   operation: string\n00022|   fallback?: boolean\n00023| }\n00024| \n00025| export interface RephraseResult {\n00026|   originalText: string\n00027|   rephrasedText: string\n00028|   rephraseOptions: string[]\n00029|   operation: string\n00030|   fallback?: boolean\n00031| }\n00032| \n00033| // Text improvement function using qwen-flash\n00034| export async function improveText(text: string, options: { correctionsOnly?: boolean, writingStyle?: string, tone?: string } = {}): Promise<WritingResult> {\n00035|   const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n00036|   console.log('Starting qwen-flash API call for text:', text.substring(0, 50))\n00037|   \n00038|   // Build dynamic system prompt based on options\n00039|   let systemPrompt = 'You are a professional writing assistant. '\n00040|   \n00041|   if (options.correctionsOnly) {\n00042|     systemPrompt += 'Focus ONLY on correcting grammar, spelling, and punctuation errors. Do not change the style, tone, or meaning of the text. '\n00043|   } else {\n00044|     systemPrompt += 'Improve the text for clarity, readability, and engagement while maintaining the original meaning. '\n00045|     \n00046|     // Add writing style guidance\n00047|     if (options.writingStyle) {\n00048|       switch (options.writingStyle) {\n00049|         case 'simple':\n00050|           systemPrompt += 'Use simple, clear language that is easy to understand. Avoid complex words and long sentences. '\n00051|           break\n00052|         case 'business':\n00053|           systemPrompt += 'Use professional, business-appropriate language. Be concise and direct. '\n00054|           break\n00055|         case 'casual':\n00056|           systemPrompt += 'Use a relaxed, conversational tone. Make it sound natural and friendly. '\n00057|           break\n00058|         case 'academic':\n00059|           systemPrompt += 'Use formal, academic language with precise terminology and structured arguments. '\n00060|           break\n00061|       }\n00062|     }\n00063|     \n00064|     // Add tone guidance\n00065|     if (options.tone) {\n00066|       switch (options.tone) {\n00067|         case 'friendly':\n00068|           systemPrompt += 'Maintain a warm and approachable tone. '\n00069|           break\n00070|         case 'professional':\n00071|           systemPrompt += 'Keep a professional and authoritative tone. '\n00072|           break\n00073|         case 'enthusiastic':\n00074|           systemPrompt += 'Add energy and enthusiasm to the text. '\n00075|           break\n00076|         case 'diplomatic':\n00077|           systemPrompt += 'Use diplomatic and tactful language. '\n00078|           break\n00079|       }\n00080|     }\n00081|   }\n00082|   \n00083|   systemPrompt += 'Return only the improved text without explanations, quotes, or additional commentary.'\n00084|   \n00085|   // Add timeout wrapper\n00086|   const timeoutPromise = new Promise((_, reject) => {\n00087|     setTimeout(() => reject(new Error('API call timeout after 10 seconds')), 10000)\n00088|   })\n00089|   \n00090|   try {\n00091|     const fetchPromise = fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00092|       method: 'POST',\n00093|       headers: {\n00094|         'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n00095|         'Content-Type': 'application/json',\n00096|       },\n00097|       body: JSON.stringify({\n00098|         model: 'qwen-flash',\n00099|         messages: [\n00100|           {\n00101|             role: 'system',\n00102|             content: systemPrompt\n00103|           },\n00104|           {\n00105|             role: 'user',\n00106|             content: text\n00107|           }\n00108|         ],\n00109|         max_tokens: 1000,\n00110|         temperature: options.correctionsOnly ? 0.1 : 0.3\n00111|       })\n00112|     })\n00113|     \n00114|     const response = await Promise.race([fetchPromise, timeoutPromise]) as Response\n00115|     \n00116|     if (!response.ok) {\n00117|       throw new Error(`API request failed: ${response.status}`)\n00118|     }\n00119| \n00120|     const data = await response.json()\n00121|     const improvedText = data.choices[0]?.message?.content?.trim()\n00122| \n00123|     if (improvedText && improvedText !== text) {\n00124|       return {\n00125|         originalText: text,\n00126|         improvedText,\n00127|         operation: 'improve'\n00128|       }\n00129|     } else {\n00130|       throw new Error('No improvement received')\n00131|     }\n00132|   } catch (error) {\n00133|     console.error('Improve writing error:', error)\n00134|     // Enhanced fallback - basic grammar and style improvements\n00135|     const basicImprovement = text\n00136|       // Dutch grammar fixes\n00137|       .replace(/\\bik leest\\b/gi, 'ik lees')\n00138|       .replace(/\\bIk leest\\b/g, 'Ik lees')\n00139|       .replace(/\\bjij heeft\\b/gi, 'jij hebt')\n00140|       .replace(/\\bJij heeft\\b/g, 'Jij hebt')\n00141|       .replace(/\\bhij hebben\\b/gi, 'hij heeft')\n00142|       .replace(/\\bHij hebben\\b/g, 'Hij heeft')\n00143|       .replace(/\\bzij hebben\\b/gi, 'zij heeft')\n00144|       .replace(/\\bZij hebben\\b/g, 'Zij heeft')\n00145|       // English grammar fixes\n00146|       .replace(/\\bi\\b/gi, 'I')\n00147|       .replace(/\\bI\\s+am\\s+going\\s+to\\s+went\\b/gi, 'I am going to go')\n00148|       .replace(/\\bYou\\s+was\\b/gi, 'You were')\n00149|       .replace(/\\bHe\\s+don't\\b/gi, 'He doesn\\'t')\n00150|       .replace(/\\bShe\\s+don't\\b/gi, 'She doesn\\'t')\n00151|       .replace(/\\bthere\\s+house\\b/gi, 'their house')\n00152|       .replace(/\\byour\\s+welcome\\b/gi, 'you\\'re welcome')\n00153|       .replace(/\\bits\\s+a\\s+beautiful\\s+day\\b/gi, 'it\\'s a beautiful day')\n00154|       // German basic improvements\n00155|       .replace(/\\bich\\s+sind\\b/gi, 'ich bin')\n00156|       .replace(/\\bdu\\s+sind\\b/gi, 'du bist')\n00157|       .replace(/\\ber\\s+sind\\b/gi, 'er ist')\n00158|       // French basic improvements\n00159|       .replace(/\\bje\\s+suis\\s+aller\\b/gi, 'je suis allé')\n00160|       .replace(/\\btu\\s+es\\s+aller\\b/gi, 'tu es allé')\n00161|       // Spanish basic improvements\n00162|       .replace(/\\byo\\s+son\\b/gi, 'yo soy')\n00163|       .replace(/\\btú\\s+son\\b/gi, 'tú eres')\n00164|       // Capitalization\n00165|       .replace(/^[a-z]/, match => match.toUpperCase())\n00166|       .replace(/\\.\\s+[a-z]/g, match => match.toUpperCase())\n00167|       // Double spaces\n00168|       .replace(/\\s{2,}/g, ' ')\n00169|       .trim()\n00170| \n00171|     return {\n00172|       originalText: text,\n00173|       improvedText: basicImprovement || text,\n00174|       operation: 'improve',\n00175|       fallback: true\n00176|     }\n00177|   }\n00178| }\n00179| \n00180| // Get word alternatives using qwen-flash\n00181| export async function getWordAlternatives(word: string, context: string, options: { mode?: string, sourceLang?: string, targetLang?: string } = {}): Promise<AlternativesResult> {\n00182|   const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n00183|   console.log('Getting alternatives for word:', word)\n00184|   \n00185|   try {\n00186|     let systemPrompt = 'You are a professional writing assistant. '\n00187|     \n00188|     if (options.mode === 'translate') {\n00189|       systemPrompt += `Provide 5 alternative translations or synonyms for the word \"${word}\" in the context: \"${context}\". `\n00190|       if (options.targetLang) {\n00191|         systemPrompt += `Focus on translations that work well in ${options.targetLang}. `\n00192|       }\n00193|     } else {\n00194|       systemPrompt += `Provide 5 alternative words or synonyms for \"${word}\" in the context: \"${context}\". Focus on words that improve clarity, style, and readability. `\n00195|     }\n00196|     \n00197|     systemPrompt += 'Return only a JSON array of alternative words, like: [\"alternative1\", \"alternative2\", \"alternative3\", \"alternative4\", \"alternative5\"]'\n00198|     \n00199|     const timeoutPromise = new Promise((_, reject) => {\n00200|       setTimeout(() => reject(new Error('API call timeout after 8 seconds')), 8000)\n00201|     })\n00202|     \n00203|     const fetchPromise = fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00204|       method: 'POST',\n00205|       headers: {\n00206|         'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n00207|         'Content-Type': 'application/json',\n00208|       },\n00209|       body: JSON.stringify({\n00210|         model: 'qwen-flash',\n00211|         messages: [\n00212|           {\n00213|             role: 'system',\n00214|             content: systemPrompt\n00215|           },\n00216|           {\n00217|             role: 'user',\n00218|             content: `Word: \"${word}\"\\nContext: \"${context}\"`\n00219|           }\n00220|         ],\n00221|         max_tokens: 200,\n00222|         temperature: 0.7\n00223|       })\n00224|     })\n00225|     \n00226|     const response = await Promise.race([fetchPromise, timeoutPromise]) as Response\n00227|     \n00228|     if (!response.ok) {\n00229|       throw new Error(`API request failed: ${response.status}`)\n00230|     }\n00231| \n00232|     const data = await response.json()\n00233|     const content = data.choices[0]?.message?.content?.trim()\n00234|     \n00235|     // Try to parse JSON response\n00236|     let alternatives: string[] = []\n00237|     try {\n00238|       alternatives = JSON.parse(content)\n00239|     } catch {\n00240|       // Fallback: extract words from text response\n00241|       const words = content.match(/[\\w']+/g) || []\n00242|       alternatives = words.slice(0, 5)\n00243|     }\n00244|     \n00245|     return {\n00246|       word,\n00247|       alternatives: alternatives.filter(alt => alt.toLowerCase() !== word.toLowerCase()).slice(0, 5),\n00248|       operation: 'alternatives'\n00249|     }\n00250|   } catch (error) {\n00251|     console.error('Get alternatives error:', error)\n00252|     \n00253|     // Enhanced fallback alternatives\n00254|     const fallbackAlternatives = getFallbackAlternatives(word)\n00255|     \n00256|     return {\n00257|       word,\n00258|       alternatives: fallbackAlternatives,\n00259|       operation: 'alternatives',\n00260|       fallback: true\n00261|     }\n00262|   }\n00263| }\n00264| \n00265| // Rephrase text using qwen-flash\n00266| export async function rephraseText(text: string): Promise<RephraseResult> {\n00267|   const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n00268|   \n00269|   try {\n00270|     const controller = new AbortController()\n00271|     const timeoutId = setTimeout(() => controller.abort(), 2000) // 2 second timeout\n00272|     \n00273|     const response = await fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00274|       method: 'POST',\n00275|       headers: {\n00276|         'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n00277|         'Content-Type': 'application/json',\n00278|       },\n00279|       body: JSON.stringify({\n00280|         model: 'qwen-flash',\n00281|         messages: [\n00282|           {\n00283|             role: 'system',\n00284|             content: 'You are a professional writing assistant. Provide 3 different ways to rephrase the given text using different words and sentence structures while keeping the same meaning. Make them sound natural and engaging. Return only a JSON array of rephrased options, like: [\"option1\", \"option2\", \"option3\"]'\n00285|           },\n00286|           {\n00287|             role: 'user',\n00288|             content: text\n00289|           }\n00290|         ]\n00291|       }),\n00292|       signal: controller.signal\n00293|     })\n00294| \n00295|     clearTimeout(timeoutId)\n00296| \n00297|     if (!response.ok) {\n00298|       throw new Error(`API request failed: ${response.status}`)\n00299|     }\n00300| \n00301|     const data = await response.json()\n00302|     const content = data.choices[0]?.message?.content?.trim()\n00303|     \n00304|     // Try to parse JSON response\n00305|     let rephraseOptions: string[] = []\n00306|     try {\n00307|       rephraseOptions = JSON.parse(content)\n00308|     } catch {\n00309|       // Fallback: treat as single option\n00310|       rephraseOptions = [content]\n00311|     }\n00312| \n00313|     return {\n00314|       originalText: text,\n00315|       rephrasedText: rephraseOptions[0] || text,\n00316|       rephraseOptions: rephraseOptions.filter(option => option && option !== text),\n00317|       operation: 'rephrase'\n00318|     }\n00319|   } catch (error) {\n00320|     console.error('Rephrase text error:', error)\n00321|     // Enhanced fallback - multiple rephrase options\n00322|     const option1 = text\n00323|       .replace(/\\bvery\\b/g, 'extremely')\n00324|       .replace(/\\bgood\\b/g, 'excellent')\n00325|       .replace(/\\bbad\\b/g, 'poor')\n00326|       .replace(/\\bnice\\b/g, 'pleasant')\n00327|       .replace(/\\bbig\\b/g, 'large')\n00328|     \n00329|     const option2 = text\n00330|       .replace(/I think/g, 'I believe')\n00331|       .replace(/It is important/g, 'It is essential')\n00332|       .replace(/In my opinion/g, 'From my perspective')\n00333|       .replace(/very important/g, 'crucial')\n00334|       \n00335|     const option3 = text\n00336|       .replace(/\\breally\\b/g, 'truly')\n00337|       .replace(/\\bshould\\b/g, 'ought to')\n00338|       .replace(/\\bwant to\\b/g, 'wish to')\n00339|       .replace(/\\bneed to\\b/g, 'must')\n00340|     \n00341|     const rephraseOptions = [option1, option2, option3].filter(option => option !== text)\n00342|     \n00343|     return {\n00344|       originalText: text,\n00345|       rephrasedText: rephraseOptions[0] || text,\n00346|       rephraseOptions: rephraseOptions,\n00347|       operation: 'rephrase',\n00348|       fallback: true\n00349|     }\n00350|   }\n00351| }\n00352| \n00353| // Enhanced fallback alternatives\n00354| function getFallbackAlternatives(word: string): string[] {\n00355|   const alternatives: Record<string, string[]> = {\n00356|     'good': ['great', 'excellent', 'wonderful', 'fantastic', 'superb'],\n00357|     'bad': ['poor', 'terrible', 'awful', 'horrible', 'dreadful'],\n00358|     'big': ['large', 'huge', 'massive', 'enormous', 'gigantic'],\n00359|     'small': ['tiny', 'little', 'compact', 'miniature', 'petite'],\n00360|     'fast': ['quick', 'rapid', 'swift', 'speedy', 'brisk'],\n00361|     'slow': ['gradual', 'leisurely', 'sluggish', 'unhurried', 'steady'],\n00362|     'important': ['crucial', 'vital', 'essential', 'significant', 'critical'],\n00363|     'beautiful': ['gorgeous', 'stunning', 'lovely', 'attractive', 'magnificent'],\n00364|     'happy': ['joyful', 'cheerful', 'delighted', 'pleased', 'elated'],\n00365|     'sad': ['unhappy', 'sorrowful', 'melancholy', 'dejected', 'gloomy'],\n00366|     'very': ['extremely', 'incredibly', 'remarkably', 'exceptionally', 'tremendously'],\n00367|     'really': ['truly', 'genuinely', 'actually', 'indeed', 'certainly'],\n00368|     'said': ['stated', 'mentioned', 'declared', 'expressed', 'remarked'],\n00369|     'make': ['create', 'produce', 'build', 'construct', 'generate'],\n00370|     'think': ['believe', 'consider', 'suppose', 'assume', 'reckon'],\n00371|     'know': ['understand', 'realize', 'recognize', 'comprehend', 'grasp'],\n00372|     'help': ['assist', 'support', 'aid', 'guide', 'facilitate'],\n00373|     'work': ['function', 'operate', 'perform', 'labor', 'serve'],\n00374|     'easy': ['simple', 'effortless', 'straightforward', 'uncomplicated', 'manageable'],\n00375|     'hard': ['difficult', 'challenging', 'tough', 'demanding', 'complex']\n00376|   }\n00377|   \n00378|   return alternatives[word.toLowerCase()] || []\n00379| }\n</file>",
    "metadata": {
      "preview": "/**\n * Writing Service for Linguala Platform\n * \n * This service uses Alibaba Cloud DashScope's qwen-flash model for writing assistance.\n * Handles text improvement, word alternatives, and sentence rephrasing.\n * \n * REQUIRED ENVIRONMENT VARIABLE:\n * - DASHSCOPE_API_KEY: Alibaba Cloud API key (format: sk-xxxxxxxxxxxxxxxxx)\n */\n\nexport interface WritingResult {\n  originalText: string\n  improvedText: string\n  operation: string\n  fallback?: boolean\n}\n\nexport interface AlternativesResult {\n  word: string\n  alternatives: string[]"
    },
    "title": "lib/writing-service.ts",
    "time": {
      "start": 1759691228564,
      "end": 1759691228569
    }
  }
}
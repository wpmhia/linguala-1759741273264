{
  "id": "prt_9b5e78514001xxvrPCnfLNxz75",
  "messageID": "msg_9b5e7738b001H2PJhrMrcr71SI",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01XmbeK64xNwNcFTU8VBmQJF",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/translation-service.ts"
    },
    "output": "<file>\n00001| /**\n00002|  * Translation Service for Linguala Platform\n00003|  * \n00004|  * This service uses Alibaba Cloud DashScope's qwen-mt-turbo model for translation only.\n00005|  * Simple, clean implementation focused on language translation.\n00006|  * \n00007|  * REQUIRED ENVIRONMENT VARIABLE:\n00008|  * - DASHSCOPE_API_KEY: Alibaba Cloud API key (format: sk-xxxxxxxxxxxxxxxxx)\n00009|  */\n00010| \n00011| // Language mapping for translation API - includes all frontend languages\n00012| const LANGUAGE_MAP: Record<string, string> = {\n00013|   auto: 'auto',\n00014|   \n00015|   // Popular EU Languages\n00016|   en: 'English',\n00017|   de: 'German', \n00018|   fr: 'French',\n00019|   es: 'Spanish',\n00020|   it: 'Italian',\n00021|   pt: 'Portuguese',\n00022|   pl: 'Polish',\n00023|   nl: 'Dutch',\n00024|   \n00025|   // Nordic Languages\n00026|   da: 'Danish',\n00027|   sv: 'Swedish',\n00028|   no: 'Norwegian',\n00029|   fi: 'Finnish',\n00030|   \n00031|   // Eastern European\n00032|   ru: 'Russian',\n00033|   uk: 'Ukrainian',\n00034|   cs: 'Czech',\n00035|   sk: 'Slovak',\n00036|   hu: 'Hungarian',\n00037|   ro: 'Romanian',\n00038|   bg: 'Bulgarian',\n00039|   hr: 'Croatian',\n00040|   sr: 'Serbian',\n00041|   sl: 'Slovenian',\n00042|   et: 'Estonian',\n00043|   lv: 'Latvian',\n00044|   lt: 'Lithuanian',\n00045|   \n00046|   // Popular Languages\n00047|   zh: 'Chinese',\n00048|   ja: 'Japanese',\n00049|   ko: 'Korean',\n00050|   ar: 'Arabic',\n00051|   hi: 'Hindi',\n00052|   tr: 'Turkish',\n00053|   he: 'Hebrew',\n00054|   \n00055|   // Additional European\n00056|   el: 'Greek',\n00057|   mt: 'Maltese',\n00058|   is: 'Icelandic',\n00059|   ga: 'Irish',\n00060|   cy: 'Welsh',\n00061|   eu: 'Basque',\n00062|   ca: 'Catalan'\n00063| }\n00064| \n00065| export interface TranslationResult {\n00066|   translatedText: string\n00067|   sourceLang: string\n00068|   targetLang: string\n00069|   fallback?: boolean\n00070| }\n00071| \n00072| // Simple translation function using qwen-mt-turbo\n00073| async function translateWithQwenMT(text: string, sourceLang: string, targetLang: string): Promise<TranslationResult> {\n00074|   const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n00075|   \n00076|   if (!DASHSCOPE_API_KEY) {\n00077|     throw new Error('DASHSCOPE_API_KEY not configured')\n00078|   }\n00079|   \n00080|   console.log(`Translating with qwen-mt-turbo: \"${text.substring(0, 50)}\" from ${sourceLang} to ${targetLang}`)\n00081|   \n00082|   try {\n00083|     console.log('Making API request to DashScope...')\n00084|     \n00085|     // Add timeout to fetch call\n00086|     const controller = new AbortController()\n00087|     const timeoutId = setTimeout(() => {\n00088|       console.log('API request timeout, aborting...')\n00089|       controller.abort()\n00090|     }, 10000) // 10 second timeout\n00091|     \n00092|     const response = await fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00093|       method: 'POST',\n00094|       headers: {\n00095|         'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n00096|         'Content-Type': 'application/json',\n00097|       },\n00098|       body: JSON.stringify({\n00099|         model: 'qwen-mt-turbo',\n00100|         messages: [\n00101|           {\n00102|             role: 'user',\n00103|             content: `Translate from ${sourceLang === 'auto' ? 'auto-detected language' : sourceLang} to ${targetLang}: ${text}`\n00104|           }\n00105|         ],\n00106|         max_tokens: 500,\n00107|         temperature: 0.1\n00108|       }),\n00109|       signal: controller.signal\n00110|     })\n00111|     \n00112|     clearTimeout(timeoutId)\n00113|     \n00114|     console.log('qwen-mt-turbo response status:', response.status)\n00115|     \n00116|     if (!response.ok) {\n00117|       throw new Error(`API request failed: ${response.status}`)\n00118|     }\n00119| \n00120|     const data = await response.json()\n00121|     const translatedText = data.choices[0]?.message?.content?.trim()\n00122| \n00123|     if (translatedText && translatedText !== text) {\n00124|       console.log('Translation successful:', translatedText)\n00125|       return {\n00126|         translatedText,\n00127|         sourceLang: sourceLang === 'auto' ? 'auto' : sourceLang,\n00128|         targetLang\n00129|       }\n00130|     } else {\n00131|       throw new Error('No translation received or same as input')\n00132|     }\n00133|   } catch (error) {\n00134|     console.error('qwen-mt-turbo translation error:', error)\n00135|     throw error\n00136|   }\n00137| }\n00138| \n00139| // Main translation function\n00140| export async function translateText(\n00141|   text: string, \n00142|   sourceLang: string, \n00143|   targetLang: string,\n00144|   options?: {\n00145|     domain?: string\n00146|     glossary?: Array<{ source: string; target: string }>\n00147|   }\n00148| ): Promise<TranslationResult> {\n00149|   try {\n00150|     if (!text || !targetLang) {\n00151|       throw new Error('Text and target language are required')\n00152|     }\n00153| \n00154|     // Map language codes to full names\n00155|     const targetLanguage = LANGUAGE_MAP[targetLang] || targetLang\n00156|     const sourceLanguage = sourceLang && sourceLang !== 'auto' ? LANGUAGE_MAP[sourceLang] || sourceLang : 'auto'\n00157|     \n00158|     // Try qwen-mt-turbo translation first\n00159|     try {\n00160|       const result = await translateWithQwenMT(text, sourceLanguage, targetLanguage)\n00161|       return result\n00162|     } catch (error) {\n00163|       console.error('qwen-mt-turbo translation failed, using fallback:', error)\n00164|       \n00165|       // Try fallback translation for common phrases\n00166|       const fallbackTranslation = getFallbackTranslation(text, targetLanguage)\n00167|       if (fallbackTranslation) {\n00168|         return {\n00169|           translatedText: fallbackTranslation,\n00170|           sourceLang,\n00171|           targetLang,\n00172|           fallback: true\n00173|         }\n00174|       }\n00175| \n00176|       // Enhanced pattern-based translation fallback\n00177|       const result = getPatternBasedTranslation(text, targetLanguage)\n00178|       return {\n00179|         translatedText: result,\n00180|         sourceLang,\n00181|         targetLang,\n00182|         fallback: true\n00183|       }\n00184|     }\n00185|     \n00186|   } catch (error) {\n00187|     console.error('Translation error:', error)\n00188|     return {\n00189|       translatedText: text,\n00190|       sourceLang,\n00191|       targetLang,\n00192|       fallback: true\n00193|     }\n00194|   }\n00195| }\n00196| \n00197| // Fallback translation for common phrases\n00198| function getFallbackTranslation(text: string, targetLanguage: string): string | null {\n00199|   const commonTranslations: Record<string, Record<string, string>> = {\n00200|     'hello': {\n00201|       'Spanish': 'hola',\n00202|       'French': 'bonjour',\n00203|       'German': 'hallo',\n00204|       'Italian': 'ciao',\n00205|       'Portuguese': 'olá'\n00206|     },\n00207|     'goodbye': {\n00208|       'Spanish': 'adiós',\n00209|       'French': 'au revoir',\n00210|       'German': 'auf wiedersehen',\n00211|       'Italian': 'ciao',\n00212|       'Portuguese': 'tchau'\n00213|     },\n00214|     'thank you': {\n00215|       'Spanish': 'gracias',\n00216|       'French': 'merci',\n00217|       'German': 'danke',\n00218|       'Italian': 'grazie',\n00219|       'Portuguese': 'obrigado'\n00220|     },\n00221|     'please': {\n00222|       'Spanish': 'por favor',\n00223|       'French': 's\\'il vous plaît',\n00224|       'German': 'bitte',\n00225|       'Italian': 'per favore',\n00226|       'Portuguese': 'por favor'\n00227|     },\n00228|     'yes': {\n00229|       'Spanish': 'sí',\n00230|       'French': 'oui',\n00231|       'German': 'ja',\n00232|       'Italian': 'sì',\n00233|       'Portuguese': 'sim'\n00234|     },\n00235|     'no': {\n00236|       'Spanish': 'no',\n00237|       'French': 'non',\n00238|       'German': 'nein',\n00239|       'Italian': 'no',\n00240|       'Portuguese': 'não'\n00241|     }\n00242|   }\n00243| \n00244|   const lowerText = text.toLowerCase().trim()\n00245|   return commonTranslations[lowerText]?.[targetLanguage] || null\n00246| }\n00247| \n00248| // Enhanced pattern-based translation for common text\n00249| function getPatternBasedTranslation(text: string, targetLanguage: string): string {\n00250|   const lowerText = text.toLowerCase().trim()\n00251|   \n00252|   // Common words and phrases\n00253|   const translations: Record<string, Record<string, string>> = {\n00254|     // Greetings\n00255|     'hello': { 'Spanish': 'hola', 'French': 'bonjour', 'German': 'hallo', 'Italian': 'ciao', 'Portuguese': 'olá' },\n00256|     'hello world': { 'Spanish': 'hola mundo', 'French': 'bonjour le monde', 'German': 'hallo welt', 'Italian': 'ciao mondo', 'Portuguese': 'olá mundo' },\n00257|     'good morning': { 'Spanish': 'buenos días', 'French': 'bonjour', 'German': 'guten morgen', 'Italian': 'buongiorno', 'Portuguese': 'bom dia' },\n00258|     'good evening': { 'Spanish': 'buenas tardes', 'French': 'bonsoir', 'German': 'guten abend', 'Italian': 'buonasera', 'Portuguese': 'boa tarde' },\n00259|     'good night': { 'Spanish': 'buenas noches', 'French': 'bonne nuit', 'German': 'gute nacht', 'Italian': 'buonanotte', 'Portuguese': 'boa noite' },\n00260|     \n00261|     // Common phrases\n00262|     'thank you': { 'Spanish': 'gracias', 'French': 'merci', 'German': 'danke', 'Italian': 'grazie', 'Portuguese': 'obrigado' },\n00263|     'please': { 'Spanish': 'por favor', 'French': 's\\'il vous plaît', 'German': 'bitte', 'Italian': 'per favore', 'Portuguese': 'por favor' },\n00264|     'excuse me': { 'Spanish': 'disculpe', 'French': 'excusez-moi', 'German': 'entschuldigung', 'Italian': 'scusi', 'Portuguese': 'com licença' },\n00265|     'yes': { 'Spanish': 'sí', 'French': 'oui', 'German': 'ja', 'Italian': 'sì', 'Portuguese': 'sim' },\n00266|     'no': { 'Spanish': 'no', 'French': 'non', 'German': 'nein', 'Italian': 'no', 'Portuguese': 'não' },\n00267|     \n00268|     // Common words\n00269|     'cat': { 'Spanish': 'gato', 'French': 'chat', 'German': 'katze', 'Italian': 'gatto', 'Portuguese': 'gato' },\n00270|     'dog': { 'Spanish': 'perro', 'French': 'chien', 'German': 'hund', 'Italian': 'cane', 'Portuguese': 'cão' },\n00271|     'water': { 'Spanish': 'agua', 'French': 'eau', 'German': 'wasser', 'Italian': 'acqua', 'Portuguese': 'água' },\n00272|     'food': { 'Spanish': 'comida', 'French': 'nourriture', 'German': 'essen', 'Italian': 'cibo', 'Portuguese': 'comida' },\n00273|     'house': { 'Spanish': 'casa', 'French': 'maison', 'German': 'haus', 'Italian': 'casa', 'Portuguese': 'casa' },\n00274|     'love': { 'Spanish': 'amor', 'French': 'amour', 'German': 'liebe', 'Italian': 'amore', 'Portuguese': 'amor' },\n00275|     'world': { 'Spanish': 'mundo', 'French': 'monde', 'German': 'welt', 'Italian': 'mondo', 'Portuguese': 'mundo' },\n00276|     'time': { 'Spanish': 'tiempo', 'French': 'temps', 'German': 'zeit', 'Italian': 'tempo', 'Portuguese': 'tempo' },\n00277|     'book': { 'Spanish': 'libro', 'French': 'livre', 'German': 'buch', 'Italian': 'libro', 'Portuguese': 'livro' },\n00278|     'car': { 'Spanish': 'coche', 'French': 'voiture', 'German': 'auto', 'Italian': 'macchina', 'Portuguese': 'carro' }\n00279|   }\n00280|   \n00281|   // Try exact phrase match first\n00282|   if (translations[lowerText] && translations[lowerText][targetLanguage]) {\n00283|     return translations[lowerText][targetLanguage]\n00284|   }\n00285|   \n00286|   // Try word-by-word translation for simple sentences\n00287|   const words = lowerText.split(' ')\n00288|   const translatedWords = words.map(word => {\n00289|     const cleanWord = word.replace(/[.,!?;:]/, '')\n00290|     return translations[cleanWord]?.[targetLanguage] || word\n00291|   })\n00292|   \n00293|   const result = translatedWords.join(' ')\n00294|   \n00295|   // If we got some translations, return result; otherwise indicate it needs proper translation\n00296|   if (result !== text) {\n00297|     return result\n00298|   }\n00299|   \n00300|   return `[Translated to ${targetLanguage}] ${text}`\n00301| }\n</file>",
    "metadata": {
      "preview": "/**\n * Translation Service for Linguala Platform\n * \n * This service uses Alibaba Cloud DashScope's qwen-mt-turbo model for translation only.\n * Simple, clean implementation focused on language translation.\n * \n * REQUIRED ENVIRONMENT VARIABLE:\n * - DASHSCOPE_API_KEY: Alibaba Cloud API key (format: sk-xxxxxxxxxxxxxxxxx)\n */\n\n// Language mapping for translation API - includes all frontend languages\nconst LANGUAGE_MAP: Record<string, string> = {\n  auto: 'auto',\n  \n  // Popular EU Languages\n  en: 'English',\n  de: 'German', \n  fr: 'French',\n  es: 'Spanish',\n  it: 'Italian',"
    },
    "title": "lib/translation-service.ts",
    "time": {
      "start": 1759693473626,
      "end": 1759693473628
    }
  }
}
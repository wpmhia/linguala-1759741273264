{
  "id": "prt_9b5e787870012gz47Um33fSexb",
  "messageID": "msg_9b5e7738b001H2PJhrMrcr71SI",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01JWAun8N67kFP7VivQdQ6aQ",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/writing-service.ts"
    },
    "output": "<file>\n00001| /**\n00002|  * Writing Service for Linguala Platform\n00003|  * \n00004|  * This service uses Alibaba Cloud DashScope's qwen-flash model for writing assistance.\n00005|  * Handles text improvement, word alternatives, and sentence rephrasing.\n00006|  * \n00007|  * REQUIRED ENVIRONMENT VARIABLE:\n00008|  * - DASHSCOPE_API_KEY: Alibaba Cloud API key (format: sk-xxxxxxxxxxxxxxxxx)\n00009|  */\n00010| \n00011| export interface WritingResult {\n00012|   originalText: string\n00013|   improvedText: string\n00014|   operation: string\n00015|   fallback?: boolean\n00016| }\n00017| \n00018| export interface AlternativesResult {\n00019|   word: string\n00020|   alternatives: string[]\n00021|   operation: string\n00022|   fallback?: boolean\n00023| }\n00024| \n00025| export interface RephraseResult {\n00026|   originalText: string\n00027|   rephrasedText: string\n00028|   rephraseOptions: string[]\n00029|   operation: string\n00030|   fallback?: boolean\n00031| }\n00032| \n00033| // Text improvement function using qwen-flash\n00034| export async function improveText(text: string, options: { correctionsOnly?: boolean, writingStyle?: string, tone?: string } = {}): Promise<WritingResult> {\n00035|   const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n00036|   console.log('Starting qwen-flash API call for text:', text.substring(0, 50))\n00037|   \n00038|   // Build dynamic system prompt based on options\n00039|   let systemPrompt = 'You are a professional writing assistant. '\n00040|   \n00041|   if (options.correctionsOnly) {\n00042|     systemPrompt += 'Focus ONLY on correcting grammar, spelling, and punctuation errors. Do not change the style, tone, or meaning of the text. '\n00043|   } else {\n00044|     systemPrompt += 'Improve the text for clarity, readability, and engagement while maintaining the original meaning. '\n00045|     \n00046|     // Add writing style guidance\n00047|     if (options.writingStyle) {\n00048|       switch (options.writingStyle) {\n00049|         case 'simple':\n00050|           systemPrompt += 'Use simple, clear language that is easy to understand. Avoid complex words and long sentences. '\n00051|           break\n00052|         case 'business':\n00053|           systemPrompt += 'Use professional, business-appropriate language. Be concise and direct. '\n00054|           break\n00055|         case 'casual':\n00056|           systemPrompt += 'Use a relaxed, conversational tone. Make it sound natural and friendly. '\n00057|           break\n00058|         case 'academic':\n00059|           systemPrompt += 'Use formal, academic language with precise terminology and structured arguments. '\n00060|           break\n00061|       }\n00062|     }\n00063|     \n00064|     // Add tone guidance\n00065|     if (options.tone) {\n00066|       switch (options.tone) {\n00067|         case 'friendly':\n00068|           systemPrompt += 'Maintain a warm and approachable tone. '\n00069|           break\n00070|         case 'professional':\n00071|           systemPrompt += 'Keep a professional and authoritative tone. '\n00072|           break\n00073|         case 'enthusiastic':\n00074|           systemPrompt += 'Add energy and enthusiasm to the text. '\n00075|           break\n00076|         case 'diplomatic':\n00077|           systemPrompt += 'Use diplomatic and tactful language. '\n00078|           break\n00079|       }\n00080|     }\n00081|   }\n00082|   \n00083|   systemPrompt += '\\n\\nIMPORTANT: Return ONLY the improved version of the input text. Do NOT add explanations, suggestions, greetings, or any additional content. Do NOT answer questions in the text. Simply return the corrected/improved text as-is.'\n00084|   \n00085|   // Add aggressive timeout wrapper\n00086|   const timeoutPromise = new Promise((_, reject) => {\n00087|     setTimeout(() => {\n00088|       console.log('ðŸ”¥ TIMEOUT: qwen-flash API call timed out after 3 seconds')\n00089|       reject(new Error('API call timeout after 3 seconds'))\n00090|     }, 3000)\n00091|   })\n00092|   \n00093|   try {\n00094|     const fetchPromise = fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00095|       method: 'POST',\n00096|       headers: {\n00097|         'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n00098|         'Content-Type': 'application/json',\n00099|       },\n00100|       body: JSON.stringify({\n00101|         model: 'qwen-flash',\n00102|         messages: [\n00103|           {\n00104|             role: 'system',\n00105|             content: systemPrompt\n00106|           },\n00107|           {\n00108|             role: 'user',\n00109|             content: text\n00110|           }\n00111|         ],\n00112|         max_tokens: 1000,\n00113|         temperature: options.correctionsOnly ? 0.1 : 0.3\n00114|       })\n00115|     })\n00116|     \n00117|     const response = await Promise.race([fetchPromise, timeoutPromise]) as Response\n00118|     \n00119|     if (!response.ok) {\n00120|       throw new Error(`API request failed: ${response.status}`)\n00121|     }\n00122| \n00123|     const data = await response.json()\n00124|     const improvedText = data.choices[0]?.message?.content?.trim()\n00125| \n00126|     if (improvedText && improvedText !== text) {\n00127|       return {\n00128|         originalText: text,\n00129|         improvedText,\n00130|         operation: 'improve'\n00131|       }\n00132|     } else {\n00133|       throw new Error('No improvement received')\n00134|     }\n00135|   } catch (error) {\n00136|     console.error('Improve writing error:', error)\n00137|     throw new Error('Text improvement service unavailable')\n00138|   }\n00139| }\n00140| \n00141| // Get word alternatives using qwen-flash\n00142| export async function getWordAlternatives(word: string, context: string, options: { mode?: string, sourceLang?: string, targetLang?: string } = {}): Promise<AlternativesResult> {\n00143|   const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n00144|   console.log('Getting alternatives for word:', word)\n00145|   \n00146|   try {\n00147|     let systemPrompt = 'You are a professional writing assistant. '\n00148|     \n00149|     if (options.mode === 'translate') {\n00150|       systemPrompt += `Provide 5 alternative translations or synonyms for the word \"${word}\" in the context: \"${context}\". `\n00151|       if (options.targetLang) {\n00152|         systemPrompt += `Focus on translations that work well in ${options.targetLang}. `\n00153|       }\n00154|     } else {\n00155|       systemPrompt += `Provide 5 alternative words or synonyms for \"${word}\" in the context: \"${context}\". Focus on words that improve clarity, style, and readability. `\n00156|     }\n00157|     \n00158|     systemPrompt += '\\n\\nIMPORTANT: Return ONLY a valid JSON array of 5 alternative words. Nothing else. Format: [\"word1\", \"word2\", \"word3\", \"word4\", \"word5\"]'\n00159|     \n00160|     const timeoutPromise = new Promise((_, reject) => {\n00161|       setTimeout(() => {\n00162|         console.log('ðŸ”¥ TIMEOUT: word alternatives API call timed out after 3 seconds')\n00163|         reject(new Error('API call timeout after 3 seconds'))\n00164|       }, 3000)\n00165|     })\n00166|     \n00167|     const fetchPromise = fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00168|       method: 'POST',\n00169|       headers: {\n00170|         'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n00171|         'Content-Type': 'application/json',\n00172|       },\n00173|       body: JSON.stringify({\n00174|         model: 'qwen-flash',\n00175|         messages: [\n00176|           {\n00177|             role: 'system',\n00178|             content: systemPrompt\n00179|           },\n00180|           {\n00181|             role: 'user',\n00182|             content: `Word: \"${word}\"\\nContext: \"${context}\"`\n00183|           }\n00184|         ],\n00185|         max_tokens: 200,\n00186|         temperature: 0.7\n00187|       })\n00188|     })\n00189|     \n00190|     const response = await Promise.race([fetchPromise, timeoutPromise]) as Response\n00191|     \n00192|     if (!response.ok) {\n00193|       throw new Error(`API request failed: ${response.status}`)\n00194|     }\n00195| \n00196|     const data = await response.json()\n00197|     const content = data.choices[0]?.message?.content?.trim()\n00198|     \n00199|     // Try to parse JSON response\n00200|     let alternatives: string[] = []\n00201|     try {\n00202|       alternatives = JSON.parse(content)\n00203|     } catch {\n00204|       // Fallback: extract words from text response\n00205|       const words = content.match(/[\\w']+/g) || []\n00206|       alternatives = words.slice(0, 5)\n00207|     }\n00208|     \n00209|     return {\n00210|       word,\n00211|       alternatives: alternatives.filter(alt => alt.toLowerCase() !== word.toLowerCase()).slice(0, 5),\n00212|       operation: 'alternatives'\n00213|     }\n00214|   } catch (error) {\n00215|     console.error('Get alternatives error:', error)\n00216|     throw new Error('Word alternatives service unavailable')\n00217|   }\n00218| }\n00219| \n00220| // Rephrase text using qwen-flash\n00221| export async function rephraseText(text: string): Promise<RephraseResult> {\n00222|   const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n00223|   \n00224|   try {\n00225|     const controller = new AbortController()\n00226|     const timeoutId = setTimeout(() => {\n00227|       console.log('ðŸ”¥ TIMEOUT: rephrase API call timed out after 3 seconds')\n00228|       controller.abort()\n00229|     }, 3000) // 3 second timeout\n00230|     \n00231|     const response = await fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n00232|       method: 'POST',\n00233|       headers: {\n00234|         'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n00235|         'Content-Type': 'application/json',\n00236|       },\n00237|       body: JSON.stringify({\n00238|         model: 'qwen-flash',\n00239|         messages: [\n00240|           {\n00241|             role: 'system',\n00242|             content: 'You are a professional writing assistant. Provide 3 different ways to rephrase the given text using different words and sentence structures while keeping the same meaning.\\n\\nIMPORTANT: Return ONLY a valid JSON array of 3 rephrased options. Nothing else. Format: [\"option1\", \"option2\", \"option3\"]'\n00243|           },\n00244|           {\n00245|             role: 'user',\n00246|             content: text\n00247|           }\n00248|         ]\n00249|       }),\n00250|       signal: controller.signal\n00251|     })\n00252| \n00253|     clearTimeout(timeoutId)\n00254| \n00255|     if (!response.ok) {\n00256|       throw new Error(`API request failed: ${response.status}`)\n00257|     }\n00258| \n00259|     const data = await response.json()\n00260|     const content = data.choices[0]?.message?.content?.trim()\n00261|     \n00262|     // Try to parse JSON response\n00263|     let rephraseOptions: string[] = []\n00264|     try {\n00265|       rephraseOptions = JSON.parse(content)\n00266|     } catch {\n00267|       // Fallback: treat as single option\n00268|       rephraseOptions = [content]\n00269|     }\n00270| \n00271|     return {\n00272|       originalText: text,\n00273|       rephrasedText: rephraseOptions[0] || text,\n00274|       rephraseOptions: rephraseOptions.filter(option => option && option !== text),\n00275|       operation: 'rephrase'\n00276|     }\n00277|   } catch (error) {\n00278|     console.error('Rephrase text error:', error)\n00279|     throw new Error('Text rephrasing service unavailable')\n00280|   }\n00281| }\n00282| \n00283| \n</file>",
    "metadata": {
      "preview": "/**\n * Writing Service for Linguala Platform\n * \n * This service uses Alibaba Cloud DashScope's qwen-flash model for writing assistance.\n * Handles text improvement, word alternatives, and sentence rephrasing.\n * \n * REQUIRED ENVIRONMENT VARIABLE:\n * - DASHSCOPE_API_KEY: Alibaba Cloud API key (format: sk-xxxxxxxxxxxxxxxxx)\n */\n\nexport interface WritingResult {\n  originalText: string\n  improvedText: string\n  operation: string\n  fallback?: boolean\n}\n\nexport interface AlternativesResult {\n  word: string\n  alternatives: string[]"
    },
    "title": "lib/writing-service.ts",
    "time": {
      "start": 1759693473985,
      "end": 1759693473986
    }
  }
}
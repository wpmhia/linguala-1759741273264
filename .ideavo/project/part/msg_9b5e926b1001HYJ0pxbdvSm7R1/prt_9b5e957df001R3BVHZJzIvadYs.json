{
  "id": "prt_9b5e957df001R3BVHZJzIvadYs",
  "messageID": "msg_9b5e926b1001HYJ0pxbdvSm7R1",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "multiedit",
  "callID": "toolu_01XNiPAXh3zNSuP8QHeLaaYN",
  "state": {
    "status": "error",
    "input": {
      "filePath": "/home/user/project/lib/translation-service.ts",
      "edits": [
        {
          "oldString": "// Language mapping for translation API - includes all frontend languages\nconst LANGUAGE_MAP: Record<string, string> = {\n  auto: 'auto',\n  \n  // Popular EU Languages\n  en: 'English',\n  de: 'German', \n  fr: 'French',\n  es: 'Spanish',\n  it: 'Italian',\n  pt: 'Portuguese',\n  pl: 'Polish',\n  nl: 'Dutch',\n  \n  // Nordic Languages\n  da: 'Danish',\n  sv: 'Swedish',\n  no: 'Norwegian',\n  fi: 'Finnish',\n  \n  // Eastern European\n  ru: 'Russian',\n  uk: 'Ukrainian',\n  cs: 'Czech',\n  sk: 'Slovak',\n  hu: 'Hungarian',\n  ro: 'Romanian',\n  bg: 'Bulgarian',\n  hr: 'Croatian',\n  sr: 'Serbian',\n  sl: 'Slovenian',\n  et: 'Estonian',\n  lv: 'Latvian',\n  lt: 'Lithuanian',\n  \n  // Popular Languages\n  zh: 'Chinese',\n  ja: 'Japanese',\n  ko: 'Korean',\n  ar: 'Arabic',\n  hi: 'Hindi',\n  tr: 'Turkish',\n  he: 'Hebrew',\n  \n  // Additional European\n  el: 'Greek',\n  mt: 'Maltese',\n  is: 'Icelandic',\n  ga: 'Irish',\n  cy: 'Welsh',\n  eu: 'Basque',\n  ca: 'Catalan'\n}",
          "newString": "// Helper function to strip HTML/markup and normalize text\nfunction cleanText(text: string): string {\n  return text\n    .replace(/<[^>]+>/g, ' ')     // Remove HTML tags\n    .replace(/\\s+/g, ' ')         // Collapse whitespace\n    .trim()                       // Remove leading/trailing space\n}\n\n// Helper function to estimate token count (rough approximation: 1 token ≈ 4 chars)\nfunction estimateTokens(text: string): number {\n  return Math.ceil(text.length / 4)\n}\n\n// Helper function to calculate adaptive max tokens\nfunction getAdaptiveMaxTokens(inputText: string): number {\n  const inputTokens = estimateTokens(inputText)\n  return Math.ceil(inputTokens * 1.5) + 20\n}"
        },
        {
          "oldString": "// Simple translation function using qwen-mt-turbo\nasync function translateWithQwenMT(text: string, sourceLang: string, targetLang: string): Promise<TranslationResult> {\n  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n  \n  if (!DASHSCOPE_API_KEY) {\n    throw new Error('DASHSCOPE_API_KEY not configured')\n  }\n  \n  console.log(`Translating with qwen-mt-turbo: \"${text.substring(0, 50)}\" from ${sourceLang} to ${targetLang}`)\n  \n  try {\n    console.log('Making API request to DashScope...')\n    \n    // Add timeout to fetch call\n    const controller = new AbortController()\n    const timeoutId = setTimeout(() => {\n      console.log('API request timeout, aborting...')\n      controller.abort()\n    }, 10000) // 10 second timeout\n    \n    const response = await fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-mt-turbo',\n        messages: [\n          {\n            role: 'user',\n            content: `Translate from ${sourceLang === 'auto' ? 'auto-detected language' : sourceLang} to ${targetLang}: ${text}`\n          }\n        ],\n        max_tokens: 500,\n        temperature: 0.1\n      }),\n      signal: controller.signal\n    })\n    \n    clearTimeout(timeoutId)\n    \n    console.log('qwen-mt-turbo response status:', response.status)\n    \n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const translatedText = data.choices[0]?.message?.content?.trim()\n\n    if (translatedText && translatedText !== text) {\n      console.log('Translation successful:', translatedText)\n      return {\n        translatedText,\n        sourceLang: sourceLang === 'auto' ? 'auto' : sourceLang,\n        targetLang\n      }\n    } else {\n      throw new Error('No translation received or same as input')\n    }\n  } catch (error) {\n    console.error('qwen-mt-turbo translation error:', error)\n    throw error\n  }\n}",
          "newString": "// Optimized translation function using qwen-mt-turbo\nasync function translateWithQwenMT(text: string, sourceLang: string, targetLang: string): Promise<TranslationResult> {\n  const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n  \n  if (!DASHSCOPE_API_KEY) {\n    throw new Error('DASHSCOPE_API_KEY not configured')\n  }\n  \n  // Clean text before sending\n  const cleanedText = cleanText(text)\n  const maxTokens = getAdaptiveMaxTokens(cleanedText)\n  \n  console.log(`Translating: \"${cleanedText.substring(0, 50)}\" ${sourceLang}→${targetLang} (max_tokens: ${maxTokens})`)\n  \n  try {\n    const controller = new AbortController()\n    const timeoutId = setTimeout(() => {\n      console.log('API request timeout, aborting...')\n      controller.abort()\n    }, 10000)\n    \n    // Optimized prompt: single message, no pleasantries, ISO codes\n    const srcCode = sourceLang === 'auto' ? 'auto' : sourceLang\n    const prompt = `${srcCode}→${targetLang}:\\n${cleanedText}`\n    \n    const response = await fetch('https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${DASHSCOPE_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'qwen-mt-turbo',\n        messages: [{ role: 'user', content: prompt }],\n        max_tokens: maxTokens,\n        temperature: 0.1\n      }),\n      signal: controller.signal\n    })\n    \n    clearTimeout(timeoutId)\n    \n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const translatedText = data.choices[0]?.message?.content?.trim()\n\n    if (translatedText && translatedText !== cleanedText) {\n      console.log('Translation successful:', translatedText)\n      return {\n        translatedText,\n        sourceLang: sourceLang === 'auto' ? 'auto' : sourceLang,\n        targetLang\n      }\n    } else {\n      throw new Error('No translation received or same as input')\n    }\n  } catch (error) {\n    console.error('qwen-mt-turbo translation error:', error)\n    throw error\n  }\n}"
        },
        {
          "oldString": "    // Map language codes to full names\n    const targetLanguage = LANGUAGE_MAP[targetLang] || targetLang\n    const sourceLanguage = sourceLang && sourceLang !== 'auto' ? LANGUAGE_MAP[sourceLang] || sourceLang : 'auto'\n    \n    // Try qwen-mt-turbo translation first\n    try {\n      const result = await translateWithQwenMT(text, sourceLanguage, targetLanguage)\n      return result",
          "newString": "    // Use ISO codes directly for optimization\n    const targetLanguage = targetLang\n    const sourceLanguage = sourceLang || 'auto'\n    \n    // Try qwen-mt-turbo translation first\n    try {\n      const result = await translateWithQwenMT(text, sourceLanguage, targetLanguage)\n      return result"
        }
      ]
    },
    "error": "Error: You must read the file /home/user/project/lib/translation-service.ts before overwriting it. Use the Read tool first",
    "time": {
      "start": 1759693621505,
      "end": 1759693621506
    }
  }
}
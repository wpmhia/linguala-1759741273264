{
  "id": "prt_9b5ead277001c4IFauuklu55P4",
  "messageID": "msg_9b5e926b1001HYJ0pxbdvSm7R1",
  "sessionID": "ses_65b8a18f2ffeMlgQ4UP0yHPHsm",
  "type": "tool",
  "tool": "edit",
  "callID": "toolu_011z8AAS6pQ7nSopV91yc8wR",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/lib/writing-service.ts",
      "oldString": "  // Build dynamic system prompt based on options\n  let systemPrompt = 'You are a professional writing assistant. '\n  \n  if (options.correctionsOnly) {\n    systemPrompt += 'Focus ONLY on correcting grammar, spelling, and punctuation errors. Do not change the style, tone, or meaning of the text. '\n  } else {\n    systemPrompt += 'Improve the text for clarity, readability, and engagement while maintaining the original meaning. '\n    \n    // Add writing style guidance\n    if (options.writingStyle) {\n      switch (options.writingStyle) {\n        case 'simple':\n          systemPrompt += 'Use simple, clear language that is easy to understand. Avoid complex words and long sentences. '\n          break\n        case 'business':\n          systemPrompt += 'Use professional, business-appropriate language. Be concise and direct. '\n          break\n        case 'casual':\n          systemPrompt += 'Use a relaxed, conversational tone. Make it sound natural and friendly. '\n          break\n        case 'academic':\n          systemPrompt += 'Use formal, academic language with precise terminology and structured arguments. '\n          break\n      }\n    }\n    \n    // Add tone guidance\n    if (options.tone) {\n      switch (options.tone) {\n        case 'friendly':\n          systemPrompt += 'Maintain a warm and approachable tone. '\n          break\n        case 'professional':\n          systemPrompt += 'Keep a professional and authoritative tone. '\n          break\n        case 'enthusiastic':\n          systemPrompt += 'Add energy and enthusiasm to the text. '\n          break\n        case 'diplomatic':\n          systemPrompt += 'Use diplomatic and tactful language. '\n          break\n      }\n    }\n  }\n  \n  systemPrompt += '\\n\\nIMPORTANT: Return ONLY the improved version of the input text. Do NOT add explanations, suggestions, greetings, or any additional content. Do NOT answer questions in the text. Simply return the corrected/improved text as-is.'",
      "newString": "  // Clean text before processing\n  const cleanedText = cleanText(text)\n  const maxTokens = getAdaptiveMaxTokens(cleanedText)\n  \n  // Optimized prompt: collapsed into single message, minimal instructions\n  let prompt = options.correctionsOnly ? 'Fix:\\n' : 'Improve:\\n'\n  \n  // Add style/tone modifiers if specified\n  if (options.writingStyle) {\n    const styleMap = { simple: 'simple', business: 'business', casual: 'casual', academic: 'formal' }\n    prompt += `(${styleMap[options.writingStyle] || options.writingStyle}) `\n  }\n  \n  if (options.tone) {\n    prompt += `(${options.tone}) `\n  }\n  \n  prompt += cleanedText"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "diff": "Index: /home/user/project/lib/writing-service.ts\n===================================================================\n--- /home/user/project/lib/writing-service.ts\n+++ /home/user/project/lib/writing-service.ts\n@@ -53,55 +53,27 @@\n export async function improveText(text: string, options: { correctionsOnly?: boolean, writingStyle?: string, tone?: string } = {}): Promise<WritingResult> {\n   const DASHSCOPE_API_KEY = process.env.DASHSCOPE_API_KEY\n   console.log('Starting qwen-flash API call for text:', text.substring(0, 50))\n   \n-  // Build dynamic system prompt based on options\n-  let systemPrompt = 'You are a professional writing assistant. '\n+  // Clean text before processing\n+  const cleanedText = cleanText(text)\n+  const maxTokens = getAdaptiveMaxTokens(cleanedText)\n   \n-  if (options.correctionsOnly) {\n-    systemPrompt += 'Focus ONLY on correcting grammar, spelling, and punctuation errors. Do not change the style, tone, or meaning of the text. '\n-  } else {\n-    systemPrompt += 'Improve the text for clarity, readability, and engagement while maintaining the original meaning. '\n-    \n-    // Add writing style guidance\n-    if (options.writingStyle) {\n-      switch (options.writingStyle) {\n-        case 'simple':\n-          systemPrompt += 'Use simple, clear language that is easy to understand. Avoid complex words and long sentences. '\n-          break\n-        case 'business':\n-          systemPrompt += 'Use professional, business-appropriate language. Be concise and direct. '\n-          break\n-        case 'casual':\n-          systemPrompt += 'Use a relaxed, conversational tone. Make it sound natural and friendly. '\n-          break\n-        case 'academic':\n-          systemPrompt += 'Use formal, academic language with precise terminology and structured arguments. '\n-          break\n-      }\n-    }\n-    \n-    // Add tone guidance\n-    if (options.tone) {\n-      switch (options.tone) {\n-        case 'friendly':\n-          systemPrompt += 'Maintain a warm and approachable tone. '\n-          break\n-        case 'professional':\n-          systemPrompt += 'Keep a professional and authoritative tone. '\n-          break\n-        case 'enthusiastic':\n-          systemPrompt += 'Add energy and enthusiasm to the text. '\n-          break\n-        case 'diplomatic':\n-          systemPrompt += 'Use diplomatic and tactful language. '\n-          break\n-      }\n-    }\n+  // Optimized prompt: collapsed into single message, minimal instructions\n+  let prompt = options.correctionsOnly ? 'Fix:\\n' : 'Improve:\\n'\n+  \n+  // Add style/tone modifiers if specified\n+  if (options.writingStyle) {\n+    const styleMap = { simple: 'simple', business: 'business', casual: 'casual', academic: 'formal' }\n+    prompt += `(${styleMap[options.writingStyle] || options.writingStyle}) `\n   }\n   \n-  systemPrompt += '\\n\\nIMPORTANT: Return ONLY the improved version of the input text. Do NOT add explanations, suggestions, greetings, or any additional content. Do NOT answer questions in the text. Simply return the corrected/improved text as-is.'\n+  if (options.tone) {\n+    prompt += `(${options.tone}) `\n+  }\n   \n+  prompt += cleanedText\n+  \n   // Add aggressive timeout wrapper\n   const timeoutPromise = new Promise((_, reject) => {\n     setTimeout(() => {\n       console.log('ðŸ”¥ TIMEOUT: qwen-flash API call timed out after 3 seconds')\n"
    },
    "title": "lib/writing-service.ts",
    "time": {
      "start": 1759693698928,
      "end": 1759693698936
    }
  }
}